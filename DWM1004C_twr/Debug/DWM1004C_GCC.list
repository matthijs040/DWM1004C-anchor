
DWM1004C_GCC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d04  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a08  08004dc4  08004dc4  00014dc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .default_config 00000065  08005800  08005800  00015800  2**8
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          00000008  08005868  08005868  00015868  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .init_array   00000004  08005870  08005870  00015870  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .fini_array   00000004  08005874  08005874  00015874  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .data         000000a4  20000000  08005878  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fConfig      00000100  20000100  0800591c  00020100  2**8
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003d8  20000200  08005a1c  00020200  2**8
                  ALLOC
 10 ._user_heap_stack 00000600  200005d8  08005a1c  000205d8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020200  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b228  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003da3  00000000  00000000  0003b450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00009420  00000000  00000000  0003f1f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ad0  00000000  00000000  00048618  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000b00  00000000  00000000  000490e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000a757  00000000  00000000  00049be8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013180  00000000  00000000  0005433f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0004f34d  00000000  00000000  000674bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  000b680c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000024d8  00000000  00000000  000b6860  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .stabstr      00000183  00000000  00000000  000b8d38  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000200 	.word	0x20000200
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004dac 	.word	0x08004dac

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000204 	.word	0x20000204
 8000104:	08004dac 	.word	0x08004dac

08000108 <strcmp>:
 8000108:	7802      	ldrb	r2, [r0, #0]
 800010a:	780b      	ldrb	r3, [r1, #0]
 800010c:	2a00      	cmp	r2, #0
 800010e:	d003      	beq.n	8000118 <strcmp+0x10>
 8000110:	3001      	adds	r0, #1
 8000112:	3101      	adds	r1, #1
 8000114:	429a      	cmp	r2, r3
 8000116:	d0f7      	beq.n	8000108 <strcmp>
 8000118:	1ad0      	subs	r0, r2, r3
 800011a:	4770      	bx	lr

0800011c <strlen>:
 800011c:	2300      	movs	r3, #0
 800011e:	5cc2      	ldrb	r2, [r0, r3]
 8000120:	3301      	adds	r3, #1
 8000122:	2a00      	cmp	r2, #0
 8000124:	d1fb      	bne.n	800011e <strlen+0x2>
 8000126:	1e58      	subs	r0, r3, #1
 8000128:	4770      	bx	lr
	...

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_ldivmod>:
 800042c:	2b00      	cmp	r3, #0
 800042e:	d115      	bne.n	800045c <__aeabi_ldivmod+0x30>
 8000430:	2a00      	cmp	r2, #0
 8000432:	d113      	bne.n	800045c <__aeabi_ldivmod+0x30>
 8000434:	2900      	cmp	r1, #0
 8000436:	db06      	blt.n	8000446 <__aeabi_ldivmod+0x1a>
 8000438:	dc01      	bgt.n	800043e <__aeabi_ldivmod+0x12>
 800043a:	2800      	cmp	r0, #0
 800043c:	d006      	beq.n	800044c <__aeabi_ldivmod+0x20>
 800043e:	2000      	movs	r0, #0
 8000440:	43c0      	mvns	r0, r0
 8000442:	0841      	lsrs	r1, r0, #1
 8000444:	e002      	b.n	800044c <__aeabi_ldivmod+0x20>
 8000446:	2180      	movs	r1, #128	; 0x80
 8000448:	0609      	lsls	r1, r1, #24
 800044a:	2000      	movs	r0, #0
 800044c:	b407      	push	{r0, r1, r2}
 800044e:	4802      	ldr	r0, [pc, #8]	; (8000458 <__aeabi_ldivmod+0x2c>)
 8000450:	a101      	add	r1, pc, #4	; (adr r1, 8000458 <__aeabi_ldivmod+0x2c>)
 8000452:	1840      	adds	r0, r0, r1
 8000454:	9002      	str	r0, [sp, #8]
 8000456:	bd03      	pop	{r0, r1, pc}
 8000458:	ffffffd1 	.word	0xffffffd1
 800045c:	b403      	push	{r0, r1}
 800045e:	4668      	mov	r0, sp
 8000460:	b501      	push	{r0, lr}
 8000462:	9802      	ldr	r0, [sp, #8]
 8000464:	f000 f91a 	bl	800069c <__gnu_ldivmod_helper>
 8000468:	9b01      	ldr	r3, [sp, #4]
 800046a:	469e      	mov	lr, r3
 800046c:	b002      	add	sp, #8
 800046e:	bc0c      	pop	{r2, r3}
 8000470:	4770      	bx	lr
 8000472:	46c0      	nop			; (mov r8, r8)

08000474 <__aeabi_uldivmod>:
 8000474:	2b00      	cmp	r3, #0
 8000476:	d111      	bne.n	800049c <__aeabi_uldivmod+0x28>
 8000478:	2a00      	cmp	r2, #0
 800047a:	d10f      	bne.n	800049c <__aeabi_uldivmod+0x28>
 800047c:	2900      	cmp	r1, #0
 800047e:	d100      	bne.n	8000482 <__aeabi_uldivmod+0xe>
 8000480:	2800      	cmp	r0, #0
 8000482:	d002      	beq.n	800048a <__aeabi_uldivmod+0x16>
 8000484:	2100      	movs	r1, #0
 8000486:	43c9      	mvns	r1, r1
 8000488:	1c08      	adds	r0, r1, #0
 800048a:	b407      	push	{r0, r1, r2}
 800048c:	4802      	ldr	r0, [pc, #8]	; (8000498 <__aeabi_uldivmod+0x24>)
 800048e:	a102      	add	r1, pc, #8	; (adr r1, 8000498 <__aeabi_uldivmod+0x24>)
 8000490:	1840      	adds	r0, r0, r1
 8000492:	9002      	str	r0, [sp, #8]
 8000494:	bd03      	pop	{r0, r1, pc}
 8000496:	46c0      	nop			; (mov r8, r8)
 8000498:	ffffff91 	.word	0xffffff91
 800049c:	b403      	push	{r0, r1}
 800049e:	4668      	mov	r0, sp
 80004a0:	b501      	push	{r0, lr}
 80004a2:	9802      	ldr	r0, [sp, #8]
 80004a4:	f000 f82e 	bl	8000504 <__udivmoddi4>
 80004a8:	9b01      	ldr	r3, [sp, #4]
 80004aa:	469e      	mov	lr, r3
 80004ac:	b002      	add	sp, #8
 80004ae:	bc0c      	pop	{r2, r3}
 80004b0:	4770      	bx	lr
 80004b2:	46c0      	nop			; (mov r8, r8)

080004b4 <__aeabi_lmul>:
 80004b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004b6:	0415      	lsls	r5, r2, #16
 80004b8:	0c2d      	lsrs	r5, r5, #16
 80004ba:	000f      	movs	r7, r1
 80004bc:	0001      	movs	r1, r0
 80004be:	002e      	movs	r6, r5
 80004c0:	46c6      	mov	lr, r8
 80004c2:	4684      	mov	ip, r0
 80004c4:	0400      	lsls	r0, r0, #16
 80004c6:	0c14      	lsrs	r4, r2, #16
 80004c8:	0c00      	lsrs	r0, r0, #16
 80004ca:	0c09      	lsrs	r1, r1, #16
 80004cc:	4346      	muls	r6, r0
 80004ce:	434d      	muls	r5, r1
 80004d0:	4360      	muls	r0, r4
 80004d2:	4361      	muls	r1, r4
 80004d4:	1940      	adds	r0, r0, r5
 80004d6:	0c34      	lsrs	r4, r6, #16
 80004d8:	1824      	adds	r4, r4, r0
 80004da:	b500      	push	{lr}
 80004dc:	42a5      	cmp	r5, r4
 80004de:	d903      	bls.n	80004e8 <__aeabi_lmul+0x34>
 80004e0:	2080      	movs	r0, #128	; 0x80
 80004e2:	0240      	lsls	r0, r0, #9
 80004e4:	4680      	mov	r8, r0
 80004e6:	4441      	add	r1, r8
 80004e8:	0c25      	lsrs	r5, r4, #16
 80004ea:	186d      	adds	r5, r5, r1
 80004ec:	4661      	mov	r1, ip
 80004ee:	4359      	muls	r1, r3
 80004f0:	437a      	muls	r2, r7
 80004f2:	0430      	lsls	r0, r6, #16
 80004f4:	1949      	adds	r1, r1, r5
 80004f6:	0424      	lsls	r4, r4, #16
 80004f8:	0c00      	lsrs	r0, r0, #16
 80004fa:	1820      	adds	r0, r4, r0
 80004fc:	1889      	adds	r1, r1, r2
 80004fe:	bc80      	pop	{r7}
 8000500:	46b8      	mov	r8, r7
 8000502:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000504 <__udivmoddi4>:
 8000504:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000506:	4657      	mov	r7, sl
 8000508:	464e      	mov	r6, r9
 800050a:	4645      	mov	r5, r8
 800050c:	46de      	mov	lr, fp
 800050e:	b5e0      	push	{r5, r6, r7, lr}
 8000510:	0004      	movs	r4, r0
 8000512:	000d      	movs	r5, r1
 8000514:	4692      	mov	sl, r2
 8000516:	4699      	mov	r9, r3
 8000518:	b083      	sub	sp, #12
 800051a:	428b      	cmp	r3, r1
 800051c:	d830      	bhi.n	8000580 <__udivmoddi4+0x7c>
 800051e:	d02d      	beq.n	800057c <__udivmoddi4+0x78>
 8000520:	4649      	mov	r1, r9
 8000522:	4650      	mov	r0, sl
 8000524:	f000 f8f6 	bl	8000714 <__clzdi2>
 8000528:	0029      	movs	r1, r5
 800052a:	0006      	movs	r6, r0
 800052c:	0020      	movs	r0, r4
 800052e:	f000 f8f1 	bl	8000714 <__clzdi2>
 8000532:	1a33      	subs	r3, r6, r0
 8000534:	4698      	mov	r8, r3
 8000536:	3b20      	subs	r3, #32
 8000538:	469b      	mov	fp, r3
 800053a:	d433      	bmi.n	80005a4 <__udivmoddi4+0xa0>
 800053c:	465a      	mov	r2, fp
 800053e:	4653      	mov	r3, sl
 8000540:	4093      	lsls	r3, r2
 8000542:	4642      	mov	r2, r8
 8000544:	001f      	movs	r7, r3
 8000546:	4653      	mov	r3, sl
 8000548:	4093      	lsls	r3, r2
 800054a:	001e      	movs	r6, r3
 800054c:	42af      	cmp	r7, r5
 800054e:	d83a      	bhi.n	80005c6 <__udivmoddi4+0xc2>
 8000550:	42af      	cmp	r7, r5
 8000552:	d100      	bne.n	8000556 <__udivmoddi4+0x52>
 8000554:	e078      	b.n	8000648 <__udivmoddi4+0x144>
 8000556:	465b      	mov	r3, fp
 8000558:	1ba4      	subs	r4, r4, r6
 800055a:	41bd      	sbcs	r5, r7
 800055c:	2b00      	cmp	r3, #0
 800055e:	da00      	bge.n	8000562 <__udivmoddi4+0x5e>
 8000560:	e075      	b.n	800064e <__udivmoddi4+0x14a>
 8000562:	2200      	movs	r2, #0
 8000564:	2300      	movs	r3, #0
 8000566:	9200      	str	r2, [sp, #0]
 8000568:	9301      	str	r3, [sp, #4]
 800056a:	2301      	movs	r3, #1
 800056c:	465a      	mov	r2, fp
 800056e:	4093      	lsls	r3, r2
 8000570:	9301      	str	r3, [sp, #4]
 8000572:	2301      	movs	r3, #1
 8000574:	4642      	mov	r2, r8
 8000576:	4093      	lsls	r3, r2
 8000578:	9300      	str	r3, [sp, #0]
 800057a:	e028      	b.n	80005ce <__udivmoddi4+0xca>
 800057c:	4282      	cmp	r2, r0
 800057e:	d9cf      	bls.n	8000520 <__udivmoddi4+0x1c>
 8000580:	2200      	movs	r2, #0
 8000582:	2300      	movs	r3, #0
 8000584:	9200      	str	r2, [sp, #0]
 8000586:	9301      	str	r3, [sp, #4]
 8000588:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800058a:	2b00      	cmp	r3, #0
 800058c:	d001      	beq.n	8000592 <__udivmoddi4+0x8e>
 800058e:	601c      	str	r4, [r3, #0]
 8000590:	605d      	str	r5, [r3, #4]
 8000592:	9800      	ldr	r0, [sp, #0]
 8000594:	9901      	ldr	r1, [sp, #4]
 8000596:	b003      	add	sp, #12
 8000598:	bcf0      	pop	{r4, r5, r6, r7}
 800059a:	46bb      	mov	fp, r7
 800059c:	46b2      	mov	sl, r6
 800059e:	46a9      	mov	r9, r5
 80005a0:	46a0      	mov	r8, r4
 80005a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005a4:	4642      	mov	r2, r8
 80005a6:	2320      	movs	r3, #32
 80005a8:	1a9b      	subs	r3, r3, r2
 80005aa:	4652      	mov	r2, sl
 80005ac:	40da      	lsrs	r2, r3
 80005ae:	4641      	mov	r1, r8
 80005b0:	0013      	movs	r3, r2
 80005b2:	464a      	mov	r2, r9
 80005b4:	408a      	lsls	r2, r1
 80005b6:	0017      	movs	r7, r2
 80005b8:	4642      	mov	r2, r8
 80005ba:	431f      	orrs	r7, r3
 80005bc:	4653      	mov	r3, sl
 80005be:	4093      	lsls	r3, r2
 80005c0:	001e      	movs	r6, r3
 80005c2:	42af      	cmp	r7, r5
 80005c4:	d9c4      	bls.n	8000550 <__udivmoddi4+0x4c>
 80005c6:	2200      	movs	r2, #0
 80005c8:	2300      	movs	r3, #0
 80005ca:	9200      	str	r2, [sp, #0]
 80005cc:	9301      	str	r3, [sp, #4]
 80005ce:	4643      	mov	r3, r8
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d0d9      	beq.n	8000588 <__udivmoddi4+0x84>
 80005d4:	07fb      	lsls	r3, r7, #31
 80005d6:	0872      	lsrs	r2, r6, #1
 80005d8:	431a      	orrs	r2, r3
 80005da:	4646      	mov	r6, r8
 80005dc:	087b      	lsrs	r3, r7, #1
 80005de:	e00e      	b.n	80005fe <__udivmoddi4+0xfa>
 80005e0:	42ab      	cmp	r3, r5
 80005e2:	d101      	bne.n	80005e8 <__udivmoddi4+0xe4>
 80005e4:	42a2      	cmp	r2, r4
 80005e6:	d80c      	bhi.n	8000602 <__udivmoddi4+0xfe>
 80005e8:	1aa4      	subs	r4, r4, r2
 80005ea:	419d      	sbcs	r5, r3
 80005ec:	2001      	movs	r0, #1
 80005ee:	1924      	adds	r4, r4, r4
 80005f0:	416d      	adcs	r5, r5
 80005f2:	2100      	movs	r1, #0
 80005f4:	3e01      	subs	r6, #1
 80005f6:	1824      	adds	r4, r4, r0
 80005f8:	414d      	adcs	r5, r1
 80005fa:	2e00      	cmp	r6, #0
 80005fc:	d006      	beq.n	800060c <__udivmoddi4+0x108>
 80005fe:	42ab      	cmp	r3, r5
 8000600:	d9ee      	bls.n	80005e0 <__udivmoddi4+0xdc>
 8000602:	3e01      	subs	r6, #1
 8000604:	1924      	adds	r4, r4, r4
 8000606:	416d      	adcs	r5, r5
 8000608:	2e00      	cmp	r6, #0
 800060a:	d1f8      	bne.n	80005fe <__udivmoddi4+0xfa>
 800060c:	9800      	ldr	r0, [sp, #0]
 800060e:	9901      	ldr	r1, [sp, #4]
 8000610:	465b      	mov	r3, fp
 8000612:	1900      	adds	r0, r0, r4
 8000614:	4169      	adcs	r1, r5
 8000616:	2b00      	cmp	r3, #0
 8000618:	db24      	blt.n	8000664 <__udivmoddi4+0x160>
 800061a:	002b      	movs	r3, r5
 800061c:	465a      	mov	r2, fp
 800061e:	4644      	mov	r4, r8
 8000620:	40d3      	lsrs	r3, r2
 8000622:	002a      	movs	r2, r5
 8000624:	40e2      	lsrs	r2, r4
 8000626:	001c      	movs	r4, r3
 8000628:	465b      	mov	r3, fp
 800062a:	0015      	movs	r5, r2
 800062c:	2b00      	cmp	r3, #0
 800062e:	db2a      	blt.n	8000686 <__udivmoddi4+0x182>
 8000630:	0026      	movs	r6, r4
 8000632:	409e      	lsls	r6, r3
 8000634:	0033      	movs	r3, r6
 8000636:	0026      	movs	r6, r4
 8000638:	4647      	mov	r7, r8
 800063a:	40be      	lsls	r6, r7
 800063c:	0032      	movs	r2, r6
 800063e:	1a80      	subs	r0, r0, r2
 8000640:	4199      	sbcs	r1, r3
 8000642:	9000      	str	r0, [sp, #0]
 8000644:	9101      	str	r1, [sp, #4]
 8000646:	e79f      	b.n	8000588 <__udivmoddi4+0x84>
 8000648:	42a3      	cmp	r3, r4
 800064a:	d8bc      	bhi.n	80005c6 <__udivmoddi4+0xc2>
 800064c:	e783      	b.n	8000556 <__udivmoddi4+0x52>
 800064e:	4642      	mov	r2, r8
 8000650:	2320      	movs	r3, #32
 8000652:	2100      	movs	r1, #0
 8000654:	1a9b      	subs	r3, r3, r2
 8000656:	2200      	movs	r2, #0
 8000658:	9100      	str	r1, [sp, #0]
 800065a:	9201      	str	r2, [sp, #4]
 800065c:	2201      	movs	r2, #1
 800065e:	40da      	lsrs	r2, r3
 8000660:	9201      	str	r2, [sp, #4]
 8000662:	e786      	b.n	8000572 <__udivmoddi4+0x6e>
 8000664:	4642      	mov	r2, r8
 8000666:	2320      	movs	r3, #32
 8000668:	1a9b      	subs	r3, r3, r2
 800066a:	002a      	movs	r2, r5
 800066c:	4646      	mov	r6, r8
 800066e:	409a      	lsls	r2, r3
 8000670:	0023      	movs	r3, r4
 8000672:	40f3      	lsrs	r3, r6
 8000674:	4644      	mov	r4, r8
 8000676:	4313      	orrs	r3, r2
 8000678:	002a      	movs	r2, r5
 800067a:	40e2      	lsrs	r2, r4
 800067c:	001c      	movs	r4, r3
 800067e:	465b      	mov	r3, fp
 8000680:	0015      	movs	r5, r2
 8000682:	2b00      	cmp	r3, #0
 8000684:	dad4      	bge.n	8000630 <__udivmoddi4+0x12c>
 8000686:	4642      	mov	r2, r8
 8000688:	002f      	movs	r7, r5
 800068a:	2320      	movs	r3, #32
 800068c:	0026      	movs	r6, r4
 800068e:	4097      	lsls	r7, r2
 8000690:	1a9b      	subs	r3, r3, r2
 8000692:	40de      	lsrs	r6, r3
 8000694:	003b      	movs	r3, r7
 8000696:	4333      	orrs	r3, r6
 8000698:	e7cd      	b.n	8000636 <__udivmoddi4+0x132>
 800069a:	46c0      	nop			; (mov r8, r8)

0800069c <__gnu_ldivmod_helper>:
 800069c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800069e:	46ce      	mov	lr, r9
 80006a0:	4647      	mov	r7, r8
 80006a2:	b580      	push	{r7, lr}
 80006a4:	4691      	mov	r9, r2
 80006a6:	4698      	mov	r8, r3
 80006a8:	0004      	movs	r4, r0
 80006aa:	000d      	movs	r5, r1
 80006ac:	f000 f83e 	bl	800072c <__divdi3>
 80006b0:	0007      	movs	r7, r0
 80006b2:	000e      	movs	r6, r1
 80006b4:	0002      	movs	r2, r0
 80006b6:	000b      	movs	r3, r1
 80006b8:	4648      	mov	r0, r9
 80006ba:	4641      	mov	r1, r8
 80006bc:	f7ff fefa 	bl	80004b4 <__aeabi_lmul>
 80006c0:	1a24      	subs	r4, r4, r0
 80006c2:	418d      	sbcs	r5, r1
 80006c4:	9b08      	ldr	r3, [sp, #32]
 80006c6:	0038      	movs	r0, r7
 80006c8:	0031      	movs	r1, r6
 80006ca:	601c      	str	r4, [r3, #0]
 80006cc:	605d      	str	r5, [r3, #4]
 80006ce:	bcc0      	pop	{r6, r7}
 80006d0:	46b9      	mov	r9, r7
 80006d2:	46b0      	mov	r8, r6
 80006d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80006d6:	46c0      	nop			; (mov r8, r8)

080006d8 <__clzsi2>:
 80006d8:	211c      	movs	r1, #28
 80006da:	2301      	movs	r3, #1
 80006dc:	041b      	lsls	r3, r3, #16
 80006de:	4298      	cmp	r0, r3
 80006e0:	d301      	bcc.n	80006e6 <__clzsi2+0xe>
 80006e2:	0c00      	lsrs	r0, r0, #16
 80006e4:	3910      	subs	r1, #16
 80006e6:	0a1b      	lsrs	r3, r3, #8
 80006e8:	4298      	cmp	r0, r3
 80006ea:	d301      	bcc.n	80006f0 <__clzsi2+0x18>
 80006ec:	0a00      	lsrs	r0, r0, #8
 80006ee:	3908      	subs	r1, #8
 80006f0:	091b      	lsrs	r3, r3, #4
 80006f2:	4298      	cmp	r0, r3
 80006f4:	d301      	bcc.n	80006fa <__clzsi2+0x22>
 80006f6:	0900      	lsrs	r0, r0, #4
 80006f8:	3904      	subs	r1, #4
 80006fa:	a202      	add	r2, pc, #8	; (adr r2, 8000704 <__clzsi2+0x2c>)
 80006fc:	5c10      	ldrb	r0, [r2, r0]
 80006fe:	1840      	adds	r0, r0, r1
 8000700:	4770      	bx	lr
 8000702:	46c0      	nop			; (mov r8, r8)
 8000704:	02020304 	.word	0x02020304
 8000708:	01010101 	.word	0x01010101
	...

08000714 <__clzdi2>:
 8000714:	b510      	push	{r4, lr}
 8000716:	2900      	cmp	r1, #0
 8000718:	d103      	bne.n	8000722 <__clzdi2+0xe>
 800071a:	f7ff ffdd 	bl	80006d8 <__clzsi2>
 800071e:	3020      	adds	r0, #32
 8000720:	e002      	b.n	8000728 <__clzdi2+0x14>
 8000722:	1c08      	adds	r0, r1, #0
 8000724:	f7ff ffd8 	bl	80006d8 <__clzsi2>
 8000728:	bd10      	pop	{r4, pc}
 800072a:	46c0      	nop			; (mov r8, r8)

0800072c <__divdi3>:
 800072c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800072e:	4657      	mov	r7, sl
 8000730:	464e      	mov	r6, r9
 8000732:	4645      	mov	r5, r8
 8000734:	46de      	mov	lr, fp
 8000736:	b5e0      	push	{r5, r6, r7, lr}
 8000738:	000f      	movs	r7, r1
 800073a:	0019      	movs	r1, r3
 800073c:	2300      	movs	r3, #0
 800073e:	0006      	movs	r6, r0
 8000740:	4698      	mov	r8, r3
 8000742:	0010      	movs	r0, r2
 8000744:	b083      	sub	sp, #12
 8000746:	2f00      	cmp	r7, #0
 8000748:	da07      	bge.n	800075a <__divdi3+0x2e>
 800074a:	0033      	movs	r3, r6
 800074c:	003c      	movs	r4, r7
 800074e:	2700      	movs	r7, #0
 8000750:	425e      	negs	r6, r3
 8000752:	41a7      	sbcs	r7, r4
 8000754:	2301      	movs	r3, #1
 8000756:	425b      	negs	r3, r3
 8000758:	4698      	mov	r8, r3
 800075a:	2900      	cmp	r1, #0
 800075c:	da07      	bge.n	800076e <__divdi3+0x42>
 800075e:	4643      	mov	r3, r8
 8000760:	43db      	mvns	r3, r3
 8000762:	000c      	movs	r4, r1
 8000764:	4698      	mov	r8, r3
 8000766:	0003      	movs	r3, r0
 8000768:	2100      	movs	r1, #0
 800076a:	4258      	negs	r0, r3
 800076c:	41a1      	sbcs	r1, r4
 800076e:	0034      	movs	r4, r6
 8000770:	003d      	movs	r5, r7
 8000772:	4682      	mov	sl, r0
 8000774:	4689      	mov	r9, r1
 8000776:	42b9      	cmp	r1, r7
 8000778:	d86a      	bhi.n	8000850 <__divdi3+0x124>
 800077a:	d067      	beq.n	800084c <__divdi3+0x120>
 800077c:	4649      	mov	r1, r9
 800077e:	4650      	mov	r0, sl
 8000780:	f7ff ffc8 	bl	8000714 <__clzdi2>
 8000784:	4683      	mov	fp, r0
 8000786:	0039      	movs	r1, r7
 8000788:	0030      	movs	r0, r6
 800078a:	f7ff ffc3 	bl	8000714 <__clzdi2>
 800078e:	465b      	mov	r3, fp
 8000790:	1a1b      	subs	r3, r3, r0
 8000792:	469c      	mov	ip, r3
 8000794:	3b20      	subs	r3, #32
 8000796:	469b      	mov	fp, r3
 8000798:	d46b      	bmi.n	8000872 <__divdi3+0x146>
 800079a:	4658      	mov	r0, fp
 800079c:	4651      	mov	r1, sl
 800079e:	4081      	lsls	r1, r0
 80007a0:	4660      	mov	r0, ip
 80007a2:	000b      	movs	r3, r1
 80007a4:	4651      	mov	r1, sl
 80007a6:	4081      	lsls	r1, r0
 80007a8:	000a      	movs	r2, r1
 80007aa:	42bb      	cmp	r3, r7
 80007ac:	d900      	bls.n	80007b0 <__divdi3+0x84>
 80007ae:	e072      	b.n	8000896 <__divdi3+0x16a>
 80007b0:	42bb      	cmp	r3, r7
 80007b2:	d100      	bne.n	80007b6 <__divdi3+0x8a>
 80007b4:	e079      	b.n	80008aa <__divdi3+0x17e>
 80007b6:	0034      	movs	r4, r6
 80007b8:	003d      	movs	r5, r7
 80007ba:	4659      	mov	r1, fp
 80007bc:	1aa4      	subs	r4, r4, r2
 80007be:	419d      	sbcs	r5, r3
 80007c0:	2900      	cmp	r1, #0
 80007c2:	da00      	bge.n	80007c6 <__divdi3+0x9a>
 80007c4:	e074      	b.n	80008b0 <__divdi3+0x184>
 80007c6:	2100      	movs	r1, #0
 80007c8:	2000      	movs	r0, #0
 80007ca:	2601      	movs	r6, #1
 80007cc:	9000      	str	r0, [sp, #0]
 80007ce:	9101      	str	r1, [sp, #4]
 80007d0:	4659      	mov	r1, fp
 80007d2:	408e      	lsls	r6, r1
 80007d4:	9601      	str	r6, [sp, #4]
 80007d6:	4661      	mov	r1, ip
 80007d8:	2601      	movs	r6, #1
 80007da:	408e      	lsls	r6, r1
 80007dc:	4661      	mov	r1, ip
 80007de:	9600      	str	r6, [sp, #0]
 80007e0:	2900      	cmp	r1, #0
 80007e2:	d05f      	beq.n	80008a4 <__divdi3+0x178>
 80007e4:	07d9      	lsls	r1, r3, #31
 80007e6:	0856      	lsrs	r6, r2, #1
 80007e8:	430e      	orrs	r6, r1
 80007ea:	085f      	lsrs	r7, r3, #1
 80007ec:	4661      	mov	r1, ip
 80007ee:	2201      	movs	r2, #1
 80007f0:	2300      	movs	r3, #0
 80007f2:	e00c      	b.n	800080e <__divdi3+0xe2>
 80007f4:	42af      	cmp	r7, r5
 80007f6:	d101      	bne.n	80007fc <__divdi3+0xd0>
 80007f8:	42a6      	cmp	r6, r4
 80007fa:	d80a      	bhi.n	8000812 <__divdi3+0xe6>
 80007fc:	1ba4      	subs	r4, r4, r6
 80007fe:	41bd      	sbcs	r5, r7
 8000800:	1924      	adds	r4, r4, r4
 8000802:	416d      	adcs	r5, r5
 8000804:	3901      	subs	r1, #1
 8000806:	18a4      	adds	r4, r4, r2
 8000808:	415d      	adcs	r5, r3
 800080a:	2900      	cmp	r1, #0
 800080c:	d006      	beq.n	800081c <__divdi3+0xf0>
 800080e:	42af      	cmp	r7, r5
 8000810:	d9f0      	bls.n	80007f4 <__divdi3+0xc8>
 8000812:	3901      	subs	r1, #1
 8000814:	1924      	adds	r4, r4, r4
 8000816:	416d      	adcs	r5, r5
 8000818:	2900      	cmp	r1, #0
 800081a:	d1f8      	bne.n	800080e <__divdi3+0xe2>
 800081c:	9800      	ldr	r0, [sp, #0]
 800081e:	9901      	ldr	r1, [sp, #4]
 8000820:	465b      	mov	r3, fp
 8000822:	1900      	adds	r0, r0, r4
 8000824:	4169      	adcs	r1, r5
 8000826:	2b00      	cmp	r3, #0
 8000828:	db4d      	blt.n	80008c6 <__divdi3+0x19a>
 800082a:	002e      	movs	r6, r5
 800082c:	002c      	movs	r4, r5
 800082e:	40de      	lsrs	r6, r3
 8000830:	4663      	mov	r3, ip
 8000832:	40dc      	lsrs	r4, r3
 8000834:	465b      	mov	r3, fp
 8000836:	2b00      	cmp	r3, #0
 8000838:	db55      	blt.n	80008e6 <__divdi3+0x1ba>
 800083a:	0034      	movs	r4, r6
 800083c:	409c      	lsls	r4, r3
 800083e:	0023      	movs	r3, r4
 8000840:	4664      	mov	r4, ip
 8000842:	40a6      	lsls	r6, r4
 8000844:	0032      	movs	r2, r6
 8000846:	1a80      	subs	r0, r0, r2
 8000848:	4199      	sbcs	r1, r3
 800084a:	e003      	b.n	8000854 <__divdi3+0x128>
 800084c:	42b0      	cmp	r0, r6
 800084e:	d995      	bls.n	800077c <__divdi3+0x50>
 8000850:	2000      	movs	r0, #0
 8000852:	2100      	movs	r1, #0
 8000854:	4643      	mov	r3, r8
 8000856:	2b00      	cmp	r3, #0
 8000858:	d004      	beq.n	8000864 <__divdi3+0x138>
 800085a:	0003      	movs	r3, r0
 800085c:	000c      	movs	r4, r1
 800085e:	2100      	movs	r1, #0
 8000860:	4258      	negs	r0, r3
 8000862:	41a1      	sbcs	r1, r4
 8000864:	b003      	add	sp, #12
 8000866:	bcf0      	pop	{r4, r5, r6, r7}
 8000868:	46bb      	mov	fp, r7
 800086a:	46b2      	mov	sl, r6
 800086c:	46a9      	mov	r9, r5
 800086e:	46a0      	mov	r8, r4
 8000870:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000872:	4662      	mov	r2, ip
 8000874:	4648      	mov	r0, r9
 8000876:	2320      	movs	r3, #32
 8000878:	4651      	mov	r1, sl
 800087a:	4090      	lsls	r0, r2
 800087c:	1a9b      	subs	r3, r3, r2
 800087e:	40d9      	lsrs	r1, r3
 8000880:	0003      	movs	r3, r0
 8000882:	9100      	str	r1, [sp, #0]
 8000884:	9900      	ldr	r1, [sp, #0]
 8000886:	4660      	mov	r0, ip
 8000888:	430b      	orrs	r3, r1
 800088a:	4651      	mov	r1, sl
 800088c:	4081      	lsls	r1, r0
 800088e:	000a      	movs	r2, r1
 8000890:	42bb      	cmp	r3, r7
 8000892:	d800      	bhi.n	8000896 <__divdi3+0x16a>
 8000894:	e78c      	b.n	80007b0 <__divdi3+0x84>
 8000896:	2100      	movs	r1, #0
 8000898:	2000      	movs	r0, #0
 800089a:	9000      	str	r0, [sp, #0]
 800089c:	9101      	str	r1, [sp, #4]
 800089e:	4661      	mov	r1, ip
 80008a0:	2900      	cmp	r1, #0
 80008a2:	d19f      	bne.n	80007e4 <__divdi3+0xb8>
 80008a4:	9800      	ldr	r0, [sp, #0]
 80008a6:	9901      	ldr	r1, [sp, #4]
 80008a8:	e7d4      	b.n	8000854 <__divdi3+0x128>
 80008aa:	42b1      	cmp	r1, r6
 80008ac:	d8f3      	bhi.n	8000896 <__divdi3+0x16a>
 80008ae:	e782      	b.n	80007b6 <__divdi3+0x8a>
 80008b0:	4661      	mov	r1, ip
 80008b2:	2620      	movs	r6, #32
 80008b4:	2701      	movs	r7, #1
 80008b6:	1a76      	subs	r6, r6, r1
 80008b8:	2000      	movs	r0, #0
 80008ba:	2100      	movs	r1, #0
 80008bc:	40f7      	lsrs	r7, r6
 80008be:	9000      	str	r0, [sp, #0]
 80008c0:	9101      	str	r1, [sp, #4]
 80008c2:	9701      	str	r7, [sp, #4]
 80008c4:	e787      	b.n	80007d6 <__divdi3+0xaa>
 80008c6:	4662      	mov	r2, ip
 80008c8:	2320      	movs	r3, #32
 80008ca:	1a9b      	subs	r3, r3, r2
 80008cc:	002a      	movs	r2, r5
 80008ce:	409a      	lsls	r2, r3
 80008d0:	0026      	movs	r6, r4
 80008d2:	0013      	movs	r3, r2
 80008d4:	4662      	mov	r2, ip
 80008d6:	40d6      	lsrs	r6, r2
 80008d8:	002c      	movs	r4, r5
 80008da:	431e      	orrs	r6, r3
 80008dc:	4663      	mov	r3, ip
 80008de:	40dc      	lsrs	r4, r3
 80008e0:	465b      	mov	r3, fp
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	daa9      	bge.n	800083a <__divdi3+0x10e>
 80008e6:	4662      	mov	r2, ip
 80008e8:	2320      	movs	r3, #32
 80008ea:	0035      	movs	r5, r6
 80008ec:	4094      	lsls	r4, r2
 80008ee:	1a9b      	subs	r3, r3, r2
 80008f0:	40dd      	lsrs	r5, r3
 80008f2:	0023      	movs	r3, r4
 80008f4:	432b      	orrs	r3, r5
 80008f6:	e7a3      	b.n	8000840 <__divdi3+0x114>

080008f8 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 80008f8:	b510      	push	{r4, lr}
 80008fa:	0003      	movs	r3, r0
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 80008fc:	7900      	ldrb	r0, [r0, #4]
 80008fe:	2800      	cmp	r0, #0
 8000900:	d050      	beq.n	80009a4 <LL_EXTI_Init+0xac>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8000902:	681a      	ldr	r2, [r3, #0]
 8000904:	2a00      	cmp	r2, #0
 8000906:	d057      	beq.n	80009b8 <LL_EXTI_Init+0xc0>
    {
      switch (EXTI_InitStruct->Mode)
 8000908:	7958      	ldrb	r0, [r3, #5]
 800090a:	2801      	cmp	r0, #1
 800090c:	d018      	beq.n	8000940 <LL_EXTI_Init+0x48>
 800090e:	2802      	cmp	r0, #2
 8000910:	d020      	beq.n	8000954 <LL_EXTI_Init+0x5c>
 8000912:	2800      	cmp	r0, #0
 8000914:	d00b      	beq.n	800092e <LL_EXTI_Init+0x36>
 8000916:	2001      	movs	r0, #1
          break;
        default:
          status = ERROR;
          break;
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8000918:	799a      	ldrb	r2, [r3, #6]
 800091a:	2a00      	cmp	r2, #0
 800091c:	d04b      	beq.n	80009b6 <LL_EXTI_Init+0xbe>
      {
        switch (EXTI_InitStruct->Trigger)
 800091e:	2a02      	cmp	r2, #2
 8000920:	d02c      	beq.n	800097c <LL_EXTI_Init+0x84>
 8000922:	2a03      	cmp	r2, #3
 8000924:	d034      	beq.n	8000990 <LL_EXTI_Init+0x98>
 8000926:	2a01      	cmp	r2, #1
 8000928:	d01e      	beq.n	8000968 <LL_EXTI_Init+0x70>
 800092a:	2001      	movs	r0, #1
 800092c:	e043      	b.n	80009b6 <LL_EXTI_Init+0xbe>
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 800092e:	4923      	ldr	r1, [pc, #140]	; (80009bc <LL_EXTI_Init+0xc4>)
 8000930:	684c      	ldr	r4, [r1, #4]
 8000932:	4394      	bics	r4, r2
 8000934:	604c      	str	r4, [r1, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8000936:	680a      	ldr	r2, [r1, #0]
 8000938:	681c      	ldr	r4, [r3, #0]
 800093a:	4322      	orrs	r2, r4
 800093c:	600a      	str	r2, [r1, #0]
}
 800093e:	e7eb      	b.n	8000918 <LL_EXTI_Init+0x20>
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8000940:	491e      	ldr	r1, [pc, #120]	; (80009bc <LL_EXTI_Init+0xc4>)
 8000942:	6808      	ldr	r0, [r1, #0]
 8000944:	4390      	bics	r0, r2
 8000946:	6008      	str	r0, [r1, #0]
  SET_BIT(EXTI->EMR, ExtiLine);
 8000948:	684a      	ldr	r2, [r1, #4]
 800094a:	6818      	ldr	r0, [r3, #0]
 800094c:	4302      	orrs	r2, r0
 800094e:	604a      	str	r2, [r1, #4]
  ErrorStatus status = SUCCESS;
 8000950:	2000      	movs	r0, #0
}
 8000952:	e7e1      	b.n	8000918 <LL_EXTI_Init+0x20>
  SET_BIT(EXTI->IMR, ExtiLine);
 8000954:	4919      	ldr	r1, [pc, #100]	; (80009bc <LL_EXTI_Init+0xc4>)
 8000956:	6808      	ldr	r0, [r1, #0]
 8000958:	4302      	orrs	r2, r0
 800095a:	600a      	str	r2, [r1, #0]
  SET_BIT(EXTI->EMR, ExtiLine);
 800095c:	684a      	ldr	r2, [r1, #4]
 800095e:	6818      	ldr	r0, [r3, #0]
 8000960:	4302      	orrs	r2, r0
 8000962:	604a      	str	r2, [r1, #4]
 8000964:	2000      	movs	r0, #0
}
 8000966:	e7d7      	b.n	8000918 <LL_EXTI_Init+0x20>
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8000968:	4a14      	ldr	r2, [pc, #80]	; (80009bc <LL_EXTI_Init+0xc4>)
 800096a:	68d1      	ldr	r1, [r2, #12]
 800096c:	681c      	ldr	r4, [r3, #0]
 800096e:	43a1      	bics	r1, r4
 8000970:	60d1      	str	r1, [r2, #12]
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8000972:	681b      	ldr	r3, [r3, #0]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8000974:	6891      	ldr	r1, [r2, #8]
 8000976:	430b      	orrs	r3, r1
 8000978:	6093      	str	r3, [r2, #8]
}
 800097a:	e01c      	b.n	80009b6 <LL_EXTI_Init+0xbe>
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 800097c:	4a0f      	ldr	r2, [pc, #60]	; (80009bc <LL_EXTI_Init+0xc4>)
 800097e:	6891      	ldr	r1, [r2, #8]
 8000980:	681c      	ldr	r4, [r3, #0]
 8000982:	43a1      	bics	r1, r4
 8000984:	6091      	str	r1, [r2, #8]
            break;
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8000986:	681b      	ldr	r3, [r3, #0]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8000988:	68d1      	ldr	r1, [r2, #12]
 800098a:	430b      	orrs	r3, r1
 800098c:	60d3      	str	r3, [r2, #12]
}
 800098e:	e012      	b.n	80009b6 <LL_EXTI_Init+0xbe>
  SET_BIT(EXTI->RTSR, ExtiLine);
 8000990:	4a0a      	ldr	r2, [pc, #40]	; (80009bc <LL_EXTI_Init+0xc4>)
 8000992:	6891      	ldr	r1, [r2, #8]
 8000994:	681c      	ldr	r4, [r3, #0]
 8000996:	4321      	orrs	r1, r4
 8000998:	6091      	str	r1, [r2, #8]
            break;
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800099a:	681b      	ldr	r3, [r3, #0]
  SET_BIT(EXTI->FTSR, ExtiLine);
 800099c:	68d1      	ldr	r1, [r2, #12]
 800099e:	430b      	orrs	r3, r1
 80009a0:	60d3      	str	r3, [r2, #12]
}
 80009a2:	e008      	b.n	80009b6 <LL_EXTI_Init+0xbe>
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 80009a4:	4a05      	ldr	r2, [pc, #20]	; (80009bc <LL_EXTI_Init+0xc4>)
 80009a6:	6811      	ldr	r1, [r2, #0]
 80009a8:	681c      	ldr	r4, [r3, #0]
 80009aa:	43a1      	bics	r1, r4
 80009ac:	6011      	str	r1, [r2, #0]
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80009ae:	6819      	ldr	r1, [r3, #0]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 80009b0:	6853      	ldr	r3, [r2, #4]
 80009b2:	438b      	bics	r3, r1
 80009b4:	6053      	str	r3, [r2, #4]
  }
  return status;
}
 80009b6:	bd10      	pop	{r4, pc}
  ErrorStatus status = SUCCESS;
 80009b8:	2000      	movs	r0, #0
 80009ba:	e7fc      	b.n	80009b6 <LL_EXTI_Init+0xbe>
 80009bc:	40010400 	.word	0x40010400

080009c0 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80009c0:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t pinpos     = 0x00000000U;
 80009c2:	2200      	movs	r2, #0
  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  /* pinpos = 0; useless as already done in default initialization */

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80009c4:	e027      	b.n	8000a16 <LL_GPIO_Init+0x56>
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDER_OSPEED0), ((Pin * Pin) * Speed));
 80009c6:	6883      	ldr	r3, [r0, #8]
 80009c8:	002c      	movs	r4, r5
 80009ca:	436c      	muls	r4, r5
 80009cc:	0066      	lsls	r6, r4, #1
 80009ce:	1936      	adds	r6, r6, r4
 80009d0:	43b3      	bics	r3, r6
 80009d2:	688e      	ldr	r6, [r1, #8]
 80009d4:	4374      	muls	r4, r6
 80009d6:	4323      	orrs	r3, r4
 80009d8:	6083      	str	r3, [r0, #8]

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 80009da:	680c      	ldr	r4, [r1, #0]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80009dc:	6843      	ldr	r3, [r0, #4]
 80009de:	43a3      	bics	r3, r4
 80009e0:	68ce      	ldr	r6, [r1, #12]
 80009e2:	4374      	muls	r4, r6
 80009e4:	4323      	orrs	r3, r4
 80009e6:	6043      	str	r3, [r0, #4]
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 80009e8:	68c6      	ldr	r6, [r0, #12]
 80009ea:	002b      	movs	r3, r5
 80009ec:	436b      	muls	r3, r5
 80009ee:	005f      	lsls	r7, r3, #1
 80009f0:	18ff      	adds	r7, r7, r3
 80009f2:	43fc      	mvns	r4, r7
 80009f4:	46a4      	mov	ip, r4
 80009f6:	43be      	bics	r6, r7
 80009f8:	690f      	ldr	r7, [r1, #16]
 80009fa:	435f      	muls	r7, r3
 80009fc:	433e      	orrs	r6, r7
 80009fe:	60c6      	str	r6, [r0, #12]
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8000a00:	684c      	ldr	r4, [r1, #4]
 8000a02:	2c02      	cmp	r4, #2
 8000a04:	d016      	beq.n	8000a34 <LL_GPIO_Init+0x74>
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8000a06:	6804      	ldr	r4, [r0, #0]
 8000a08:	4665      	mov	r5, ip
 8000a0a:	402c      	ands	r4, r5
 8000a0c:	684d      	ldr	r5, [r1, #4]
 8000a0e:	436b      	muls	r3, r5
 8000a10:	4323      	orrs	r3, r4
 8000a12:	6003      	str	r3, [r0, #0]
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
    }
    pinpos++;
 8000a14:	3201      	adds	r2, #1
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8000a16:	680c      	ldr	r4, [r1, #0]
 8000a18:	0023      	movs	r3, r4
 8000a1a:	40d3      	lsrs	r3, r2
 8000a1c:	d026      	beq.n	8000a6c <LL_GPIO_Init+0xac>
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8000a1e:	2301      	movs	r3, #1
 8000a20:	4093      	lsls	r3, r2
 8000a22:	0025      	movs	r5, r4
 8000a24:	401d      	ands	r5, r3
    if (currentpin)
 8000a26:	421c      	tst	r4, r3
 8000a28:	d0f4      	beq.n	8000a14 <LL_GPIO_Init+0x54>
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8000a2a:	684b      	ldr	r3, [r1, #4]
 8000a2c:	3b01      	subs	r3, #1
 8000a2e:	2b01      	cmp	r3, #1
 8000a30:	d8da      	bhi.n	80009e8 <LL_GPIO_Init+0x28>
 8000a32:	e7c8      	b.n	80009c6 <LL_GPIO_Init+0x6>
        if (currentpin < LL_GPIO_PIN_8)
 8000a34:	2dff      	cmp	r5, #255	; 0xff
 8000a36:	d80b      	bhi.n	8000a50 <LL_GPIO_Init+0x90>
  *         @arg @ref LL_GPIO_AF_7
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 8000a38:	6a06      	ldr	r6, [r0, #32]
 8000a3a:	001c      	movs	r4, r3
 8000a3c:	436c      	muls	r4, r5
 8000a3e:	4365      	muls	r5, r4
 8000a40:	012c      	lsls	r4, r5, #4
 8000a42:	1b64      	subs	r4, r4, r5
 8000a44:	43a6      	bics	r6, r4
 8000a46:	694c      	ldr	r4, [r1, #20]
 8000a48:	4365      	muls	r5, r4
 8000a4a:	4335      	orrs	r5, r6
 8000a4c:	6205      	str	r5, [r0, #32]
             ((((Pin * Pin) * Pin) * Pin) * Alternate));
}
 8000a4e:	e7da      	b.n	8000a06 <LL_GPIO_Init+0x46>
  *         @arg @ref LL_GPIO_AF_7
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 8000a50:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8000a52:	0a2d      	lsrs	r5, r5, #8
 8000a54:	002c      	movs	r4, r5
 8000a56:	436c      	muls	r4, r5
 8000a58:	436c      	muls	r4, r5
 8000a5a:	4365      	muls	r5, r4
 8000a5c:	012c      	lsls	r4, r5, #4
 8000a5e:	1b64      	subs	r4, r4, r5
 8000a60:	43a6      	bics	r6, r4
 8000a62:	694c      	ldr	r4, [r1, #20]
 8000a64:	4365      	muls	r5, r4
 8000a66:	4335      	orrs	r5, r6
 8000a68:	6245      	str	r5, [r0, #36]	; 0x24
             (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * Alternate));
}
 8000a6a:	e7cc      	b.n	8000a06 <LL_GPIO_Init+0x46>
  }


  return (SUCCESS);
}
 8000a6c:	2000      	movs	r0, #0
 8000a6e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000a70 <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: I2C registers are initialized
  *          - ERROR: Not applicable
  */
ErrorStatus LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 8000a70:	b530      	push	{r4, r5, lr}
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Disable(I2C_TypeDef *I2Cx)
{
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 8000a72:	6802      	ldr	r2, [r0, #0]
 8000a74:	2401      	movs	r4, #1
 8000a76:	43a2      	bics	r2, r4
 8000a78:	6002      	str	r2, [r0, #0]
  *         The digital filter will filter spikes with a length of up to DNF[3:0]*ti2cclk.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ConfigFilters(I2C_TypeDef *I2Cx, uint32_t AnalogFilter, uint32_t DigitalFilter)
{
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ANFOFF | I2C_CR1_DNF, AnalogFilter | (DigitalFilter << I2C_CR1_DNF_Pos));
 8000a7a:	6803      	ldr	r3, [r0, #0]
 8000a7c:	4a17      	ldr	r2, [pc, #92]	; (8000adc <LL_I2C_Init+0x6c>)
 8000a7e:	4013      	ands	r3, r2
 8000a80:	68ca      	ldr	r2, [r1, #12]
 8000a82:	0212      	lsls	r2, r2, #8
 8000a84:	688d      	ldr	r5, [r1, #8]
 8000a86:	432a      	orrs	r2, r5
 8000a88:	4313      	orrs	r3, r2
 8000a8a:	6003      	str	r3, [r0, #0]
  * @note   This parameter is computed with the STM32CubeMX Tool.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetTiming(I2C_TypeDef *I2Cx, uint32_t Timing)
{
  WRITE_REG(I2Cx->TIMINGR, Timing);
 8000a8c:	684b      	ldr	r3, [r1, #4]
 8000a8e:	6103      	str	r3, [r0, #16]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8000a90:	6803      	ldr	r3, [r0, #0]
 8000a92:	4323      	orrs	r3, r4
 8000a94:	6003      	str	r3, [r0, #0]
  CLEAR_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8000a96:	6883      	ldr	r3, [r0, #8]
 8000a98:	4a11      	ldr	r2, [pc, #68]	; (8000ae0 <LL_I2C_Init+0x70>)
 8000a9a:	4013      	ands	r3, r2
 8000a9c:	6083      	str	r3, [r0, #8]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_OA1 | I2C_OAR1_OA1MODE, OwnAddress1 | OwnAddrSize);
 8000a9e:	6883      	ldr	r3, [r0, #8]
 8000aa0:	0adb      	lsrs	r3, r3, #11
 8000aa2:	02db      	lsls	r3, r3, #11
 8000aa4:	690a      	ldr	r2, [r1, #16]
 8000aa6:	698c      	ldr	r4, [r1, #24]
 8000aa8:	4322      	orrs	r2, r4
 8000aaa:	4313      	orrs	r3, r2
 8000aac:	6083      	str	r3, [r0, #8]
   */
  LL_I2C_DisableOwnAddress1(I2Cx);
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);

  /* OwnAdress1 == 0 is reserved for General Call address */
  if (I2C_InitStruct->OwnAddress1 != 0U)
 8000aae:	690b      	ldr	r3, [r1, #16]
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d004      	beq.n	8000abe <LL_I2C_Init+0x4e>
  SET_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8000ab4:	6882      	ldr	r2, [r0, #8]
 8000ab6:	2380      	movs	r3, #128	; 0x80
 8000ab8:	021b      	lsls	r3, r3, #8
 8000aba:	4313      	orrs	r3, r2
 8000abc:	6083      	str	r3, [r0, #8]
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE_ARP
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetMode(I2C_TypeDef *I2Cx, uint32_t PeripheralMode)
{
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBHEN | I2C_CR1_SMBDEN, PeripheralMode);
 8000abe:	6803      	ldr	r3, [r0, #0]
 8000ac0:	4a08      	ldr	r2, [pc, #32]	; (8000ae4 <LL_I2C_Init+0x74>)
 8000ac2:	4013      	ands	r3, r2
 8000ac4:	680a      	ldr	r2, [r1, #0]
 8000ac6:	4313      	orrs	r3, r2
 8000ac8:	6003      	str	r3, [r0, #0]
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 8000aca:	694b      	ldr	r3, [r1, #20]
  *         @arg @ref LL_I2C_NACK
  * @retval None
  */
__STATIC_INLINE void LL_I2C_AcknowledgeNextData(I2C_TypeDef *I2Cx, uint32_t TypeAcknowledge)
{
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NACK, TypeAcknowledge);
 8000acc:	6842      	ldr	r2, [r0, #4]
 8000ace:	4904      	ldr	r1, [pc, #16]	; (8000ae0 <LL_I2C_Init+0x70>)
 8000ad0:	400a      	ands	r2, r1
 8000ad2:	4313      	orrs	r3, r2
 8000ad4:	6043      	str	r3, [r0, #4]

  return SUCCESS;
}
 8000ad6:	2000      	movs	r0, #0
 8000ad8:	bd30      	pop	{r4, r5, pc}
 8000ada:	46c0      	nop			; (mov r8, r8)
 8000adc:	ffffe0ff 	.word	0xffffe0ff
 8000ae0:	ffff7fff 	.word	0xffff7fff
 8000ae4:	ffcfffff 	.word	0xffcfffff

08000ae8 <RCC_GetHCLKClockFreq>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8000ae8:	4b04      	ldr	r3, [pc, #16]	; (8000afc <RCC_GetHCLKClockFreq+0x14>)
 8000aea:	68da      	ldr	r2, [r3, #12]
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8000aec:	0912      	lsrs	r2, r2, #4
 8000aee:	230f      	movs	r3, #15
 8000af0:	4013      	ands	r3, r2
 8000af2:	4a03      	ldr	r2, [pc, #12]	; (8000b00 <RCC_GetHCLKClockFreq+0x18>)
 8000af4:	5cd3      	ldrb	r3, [r2, r3]
 8000af6:	40d8      	lsrs	r0, r3
}
 8000af8:	4770      	bx	lr
 8000afa:	46c0      	nop			; (mov r8, r8)
 8000afc:	40021000 	.word	0x40021000
 8000b00:	080050c0 	.word	0x080050c0

08000b04 <RCC_GetPCLK1ClockFreq>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8000b04:	4b04      	ldr	r3, [pc, #16]	; (8000b18 <RCC_GetPCLK1ClockFreq+0x14>)
 8000b06:	68da      	ldr	r2, [r3, #12]
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8000b08:	0a12      	lsrs	r2, r2, #8
 8000b0a:	2307      	movs	r3, #7
 8000b0c:	4013      	ands	r3, r2
 8000b0e:	4a03      	ldr	r2, [pc, #12]	; (8000b1c <RCC_GetPCLK1ClockFreq+0x18>)
 8000b10:	5cd3      	ldrb	r3, [r2, r3]
 8000b12:	40d8      	lsrs	r0, r3
}
 8000b14:	4770      	bx	lr
 8000b16:	46c0      	nop			; (mov r8, r8)
 8000b18:	40021000 	.word	0x40021000
 8000b1c:	080050d0 	.word	0x080050d0

08000b20 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8000b20:	b510      	push	{r4, lr}
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8000b22:	4b0e      	ldr	r3, [pc, #56]	; (8000b5c <RCC_PLL_GetFreqDomain_SYS+0x3c>)
 8000b24:	68db      	ldr	r3, [r3, #12]
  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL divider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();

  switch (pllsource)
 8000b26:	03db      	lsls	r3, r3, #15
 8000b28:	d405      	bmi.n	8000b36 <RCC_PLL_GetFreqDomain_SYS+0x16>
  * @rmtoll CR        HSIDIVF        LL_RCC_IsActiveFlag_HSIDIV
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HSIDIV(void)
{
  return ((READ_BIT(RCC->CR, RCC_CR_HSIDIVF) == RCC_CR_HSIDIVF) ? 1UL : 0UL);
 8000b2a:	4b0c      	ldr	r3, [pc, #48]	; (8000b5c <RCC_PLL_GetFreqDomain_SYS+0x3c>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	06db      	lsls	r3, r3, #27
 8000b30:	d512      	bpl.n	8000b58 <RCC_PLL_GetFreqDomain_SYS+0x38>
  {
    case LL_RCC_PLLSOURCE_HSI:       /* HSI used as PLL clock source */
      if (LL_RCC_IsActiveFlag_HSIDIV() != 0U)
      {
        pllinputfreq = (HSI_VALUE >> 2U);
 8000b32:	480b      	ldr	r0, [pc, #44]	; (8000b60 <RCC_PLL_GetFreqDomain_SYS+0x40>)
 8000b34:	e000      	b.n	8000b38 <RCC_PLL_GetFreqDomain_SYS+0x18>
        pllinputfreq = HSI_VALUE;
      }
      break;

    default:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8000b36:	480b      	ldr	r0, [pc, #44]	; (8000b64 <RCC_PLL_GetFreqDomain_SYS+0x44>)
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMUL));
 8000b38:	4908      	ldr	r1, [pc, #32]	; (8000b5c <RCC_PLL_GetFreqDomain_SYS+0x3c>)
 8000b3a:	68ca      	ldr	r2, [r1, #12]
      break;
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator(), LL_RCC_PLL_GetDivider());
 8000b3c:	0c92      	lsrs	r2, r2, #18
 8000b3e:	230f      	movs	r3, #15
 8000b40:	4013      	ands	r3, r2
 8000b42:	4a09      	ldr	r2, [pc, #36]	; (8000b68 <RCC_PLL_GetFreqDomain_SYS+0x48>)
 8000b44:	5cd3      	ldrb	r3, [r2, r3]
 8000b46:	4358      	muls	r0, r3
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLDIV));
 8000b48:	68cb      	ldr	r3, [r1, #12]
 8000b4a:	0d9b      	lsrs	r3, r3, #22
 8000b4c:	2103      	movs	r1, #3
 8000b4e:	4019      	ands	r1, r3
 8000b50:	3101      	adds	r1, #1
 8000b52:	f7ff faf5 	bl	8000140 <__udivsi3>
}
 8000b56:	bd10      	pop	{r4, pc}
        pllinputfreq = HSI_VALUE;
 8000b58:	4804      	ldr	r0, [pc, #16]	; (8000b6c <RCC_PLL_GetFreqDomain_SYS+0x4c>)
 8000b5a:	e7ed      	b.n	8000b38 <RCC_PLL_GetFreqDomain_SYS+0x18>
 8000b5c:	40021000 	.word	0x40021000
 8000b60:	003d0900 	.word	0x003d0900
 8000b64:	007a1200 	.word	0x007a1200
 8000b68:	080050b4 	.word	0x080050b4
 8000b6c:	00f42400 	.word	0x00f42400

08000b70 <RCC_GetSystemClockFreq>:
{
 8000b70:	b510      	push	{r4, lr}
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000b72:	4b17      	ldr	r3, [pc, #92]	; (8000bd0 <RCC_GetSystemClockFreq+0x60>)
 8000b74:	68da      	ldr	r2, [r3, #12]
 8000b76:	230c      	movs	r3, #12
 8000b78:	4013      	ands	r3, r2
  switch (LL_RCC_GetSysClkSource())
 8000b7a:	2b08      	cmp	r3, #8
 8000b7c:	d023      	beq.n	8000bc6 <RCC_GetSystemClockFreq+0x56>
 8000b7e:	d809      	bhi.n	8000b94 <RCC_GetSystemClockFreq+0x24>
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d00c      	beq.n	8000b9e <RCC_GetSystemClockFreq+0x2e>
 8000b84:	2b04      	cmp	r3, #4
 8000b86:	d114      	bne.n	8000bb2 <RCC_GetSystemClockFreq+0x42>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIDIVF) == RCC_CR_HSIDIVF) ? 1UL : 0UL);
 8000b88:	4b11      	ldr	r3, [pc, #68]	; (8000bd0 <RCC_GetSystemClockFreq+0x60>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	06db      	lsls	r3, r3, #27
 8000b8e:	d51c      	bpl.n	8000bca <RCC_GetSystemClockFreq+0x5a>
        frequency = (HSI_VALUE >> 2U);
 8000b90:	4810      	ldr	r0, [pc, #64]	; (8000bd4 <RCC_GetSystemClockFreq+0x64>)
 8000b92:	e019      	b.n	8000bc8 <RCC_GetSystemClockFreq+0x58>
  switch (LL_RCC_GetSysClkSource())
 8000b94:	2b0c      	cmp	r3, #12
 8000b96:	d10c      	bne.n	8000bb2 <RCC_GetSystemClockFreq+0x42>
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8000b98:	f7ff ffc2 	bl	8000b20 <RCC_PLL_GetFreqDomain_SYS>
      break;
 8000b9c:	e014      	b.n	8000bc8 <RCC_GetSystemClockFreq+0x58>
  return (uint32_t)(READ_BIT(RCC->ICSCR, RCC_ICSCR_MSIRANGE));
 8000b9e:	4b0c      	ldr	r3, [pc, #48]	; (8000bd0 <RCC_GetSystemClockFreq+0x60>)
 8000ba0:	685a      	ldr	r2, [r3, #4]
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8000ba2:	0b52      	lsrs	r2, r2, #13
 8000ba4:	2307      	movs	r3, #7
 8000ba6:	4013      	ands	r3, r2
 8000ba8:	3301      	adds	r3, #1
 8000baa:	2080      	movs	r0, #128	; 0x80
 8000bac:	0200      	lsls	r0, r0, #8
 8000bae:	4098      	lsls	r0, r3
      break;
 8000bb0:	e00a      	b.n	8000bc8 <RCC_GetSystemClockFreq+0x58>
 8000bb2:	4b07      	ldr	r3, [pc, #28]	; (8000bd0 <RCC_GetSystemClockFreq+0x60>)
 8000bb4:	685a      	ldr	r2, [r3, #4]
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8000bb6:	0b52      	lsrs	r2, r2, #13
 8000bb8:	2307      	movs	r3, #7
 8000bba:	4013      	ands	r3, r2
 8000bbc:	3301      	adds	r3, #1
 8000bbe:	2080      	movs	r0, #128	; 0x80
 8000bc0:	0200      	lsls	r0, r0, #8
 8000bc2:	4098      	lsls	r0, r3
      break;
 8000bc4:	e000      	b.n	8000bc8 <RCC_GetSystemClockFreq+0x58>
  switch (LL_RCC_GetSysClkSource())
 8000bc6:	4804      	ldr	r0, [pc, #16]	; (8000bd8 <RCC_GetSystemClockFreq+0x68>)
}
 8000bc8:	bd10      	pop	{r4, pc}
        frequency = HSI_VALUE;
 8000bca:	4804      	ldr	r0, [pc, #16]	; (8000bdc <RCC_GetSystemClockFreq+0x6c>)
  return frequency;
 8000bcc:	e7fc      	b.n	8000bc8 <RCC_GetSystemClockFreq+0x58>
 8000bce:	46c0      	nop			; (mov r8, r8)
 8000bd0:	40021000 	.word	0x40021000
 8000bd4:	003d0900 	.word	0x003d0900
 8000bd8:	007a1200 	.word	0x007a1200
 8000bdc:	00f42400 	.word	0x00f42400

08000be0 <LL_RCC_GetUSARTClockFreq>:
{
 8000be0:	b510      	push	{r4, lr}
  if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 8000be2:	280c      	cmp	r0, #12
 8000be4:	d001      	beq.n	8000bea <LL_RCC_GetUSARTClockFreq+0xa>
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8000be6:	2000      	movs	r0, #0
}
 8000be8:	bd10      	pop	{r4, pc}
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 8000bea:	4b19      	ldr	r3, [pc, #100]	; (8000c50 <LL_RCC_GetUSARTClockFreq+0x70>)
 8000bec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bee:	4003      	ands	r3, r0
 8000bf0:	0400      	lsls	r0, r0, #16
 8000bf2:	4318      	orrs	r0, r3
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8000bf4:	4b17      	ldr	r3, [pc, #92]	; (8000c54 <LL_RCC_GetUSARTClockFreq+0x74>)
 8000bf6:	4298      	cmp	r0, r3
 8000bf8:	d00f      	beq.n	8000c1a <LL_RCC_GetUSARTClockFreq+0x3a>
 8000bfa:	4b17      	ldr	r3, [pc, #92]	; (8000c58 <LL_RCC_GetUSARTClockFreq+0x78>)
 8000bfc:	4298      	cmp	r0, r3
 8000bfe:	d019      	beq.n	8000c34 <LL_RCC_GetUSARTClockFreq+0x54>
 8000c00:	4b16      	ldr	r3, [pc, #88]	; (8000c5c <LL_RCC_GetUSARTClockFreq+0x7c>)
 8000c02:	4298      	cmp	r0, r3
 8000c04:	d006      	beq.n	8000c14 <LL_RCC_GetUSARTClockFreq+0x34>
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8000c06:	f7ff ffb3 	bl	8000b70 <RCC_GetSystemClockFreq>
 8000c0a:	f7ff ff6d 	bl	8000ae8 <RCC_GetHCLKClockFreq>
 8000c0e:	f7ff ff79 	bl	8000b04 <RCC_GetPCLK1ClockFreq>
        break;
 8000c12:	e7e9      	b.n	8000be8 <LL_RCC_GetUSARTClockFreq+0x8>
        usart_frequency = RCC_GetSystemClockFreq();
 8000c14:	f7ff ffac 	bl	8000b70 <RCC_GetSystemClockFreq>
        break;
 8000c18:	e7e6      	b.n	8000be8 <LL_RCC_GetUSARTClockFreq+0x8>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8000c1a:	4b0d      	ldr	r3, [pc, #52]	; (8000c50 <LL_RCC_GetUSARTClockFreq+0x70>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	2204      	movs	r2, #4
 8000c20:	0010      	movs	r0, r2
 8000c22:	4018      	ands	r0, r3
 8000c24:	421a      	tst	r2, r3
 8000c26:	d0df      	beq.n	8000be8 <LL_RCC_GetUSARTClockFreq+0x8>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIDIVF) == RCC_CR_HSIDIVF) ? 1UL : 0UL);
 8000c28:	4b09      	ldr	r3, [pc, #36]	; (8000c50 <LL_RCC_GetUSARTClockFreq+0x70>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	06db      	lsls	r3, r3, #27
 8000c2e:	d40c      	bmi.n	8000c4a <LL_RCC_GetUSARTClockFreq+0x6a>
            usart_frequency = HSI_VALUE;
 8000c30:	480b      	ldr	r0, [pc, #44]	; (8000c60 <LL_RCC_GetUSARTClockFreq+0x80>)
 8000c32:	e7d9      	b.n	8000be8 <LL_RCC_GetUSARTClockFreq+0x8>
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSERDY) == RCC_CSR_LSERDY) ? 1UL : 0UL);
 8000c34:	4b06      	ldr	r3, [pc, #24]	; (8000c50 <LL_RCC_GetUSARTClockFreq+0x70>)
 8000c36:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000c38:	2380      	movs	r3, #128	; 0x80
 8000c3a:	009b      	lsls	r3, r3, #2
 8000c3c:	0010      	movs	r0, r2
 8000c3e:	4018      	ands	r0, r3
 8000c40:	421a      	tst	r2, r3
 8000c42:	d0d1      	beq.n	8000be8 <LL_RCC_GetUSARTClockFreq+0x8>
          usart_frequency = LSE_VALUE;
 8000c44:	2080      	movs	r0, #128	; 0x80
 8000c46:	0200      	lsls	r0, r0, #8
  return usart_frequency;
 8000c48:	e7ce      	b.n	8000be8 <LL_RCC_GetUSARTClockFreq+0x8>
            usart_frequency = (HSI_VALUE >> 2U);
 8000c4a:	4806      	ldr	r0, [pc, #24]	; (8000c64 <LL_RCC_GetUSARTClockFreq+0x84>)
 8000c4c:	e7cc      	b.n	8000be8 <LL_RCC_GetUSARTClockFreq+0x8>
 8000c4e:	46c0      	nop			; (mov r8, r8)
 8000c50:	40021000 	.word	0x40021000
 8000c54:	000c0008 	.word	0x000c0008
 8000c58:	000c000c 	.word	0x000c000c
 8000c5c:	000c0004 	.word	0x000c0004
 8000c60:	00f42400 	.word	0x00f42400
 8000c64:	003d0900 	.word	0x003d0900

08000c68 <LL_RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC is in Init mode
  *          - ERROR: RTC is not in Init mode
  */
ErrorStatus LL_RTC_EnterInitMode(RTC_TypeDef *RTCx)
{
 8000c68:	b510      	push	{r4, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	0004      	movs	r4, r0
  __IO uint32_t timeout = RTC_INITMODE_TIMEOUT;
 8000c6e:	23fa      	movs	r3, #250	; 0xfa
 8000c70:	009b      	lsls	r3, r3, #2
 8000c72:	9301      	str	r3, [sp, #4]
  * @param  RTCx RTC Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RTC_IsActiveFlag_INIT(RTC_TypeDef *RTCx)
{
  return ((READ_BIT(RTCx->ISR, RTC_ISR_INITF) == (RTC_ISR_INITF)) ? 1UL : 0UL);
 8000c74:	68c3      	ldr	r3, [r0, #12]
 8000c76:	065b      	lsls	r3, r3, #25
 8000c78:	d423      	bmi.n	8000cc2 <LL_RTC_EnterInitMode+0x5a>
  WRITE_REG(RTCx->ISR, RTC_LL_INIT_MASK);
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	425b      	negs	r3, r3
 8000c7e:	60c3      	str	r3, [r0, #12]
  return ((READ_BIT(RTCx->ISR, RTC_ISR_INITF) == (RTC_ISR_INITF)) ? 1UL : 0UL);
 8000c80:	68c3      	ldr	r3, [r0, #12]
 8000c82:	2240      	movs	r2, #64	; 0x40
 8000c84:	0011      	movs	r1, r2
 8000c86:	4019      	ands	r1, r3
 8000c88:	421a      	tst	r2, r3
 8000c8a:	d118      	bne.n	8000cbe <LL_RTC_EnterInitMode+0x56>
        timeout --;
      }
      tmp = LL_RTC_IsActiveFlag_INIT(RTCx);
      if (timeout == 0U)
      {
        status = ERROR;
 8000c8c:	2000      	movs	r0, #0
    while ((timeout != 0U) && (tmp != 1U))
 8000c8e:	9b01      	ldr	r3, [sp, #4]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d017      	beq.n	8000cc4 <LL_RTC_EnterInitMode+0x5c>
 8000c94:	2901      	cmp	r1, #1
 8000c96:	d015      	beq.n	8000cc4 <LL_RTC_EnterInitMode+0x5c>
  * @rmtoll STK_CTRL     COUNTFLAG     LL_SYSTICK_IsActiveCounterFlag
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SYSTICK_IsActiveCounterFlag(void)
{
  return ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) == (SysTick_CTRL_COUNTFLAG_Msk));
 8000c98:	4b0b      	ldr	r3, [pc, #44]	; (8000cc8 <LL_RTC_EnterInitMode+0x60>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
      if (LL_SYSTICK_IsActiveCounterFlag() == 1U)
 8000c9c:	03db      	lsls	r3, r3, #15
 8000c9e:	d502      	bpl.n	8000ca6 <LL_RTC_EnterInitMode+0x3e>
        timeout --;
 8000ca0:	9b01      	ldr	r3, [sp, #4]
 8000ca2:	3b01      	subs	r3, #1
 8000ca4:	9301      	str	r3, [sp, #4]
 8000ca6:	68e3      	ldr	r3, [r4, #12]
 8000ca8:	2240      	movs	r2, #64	; 0x40
 8000caa:	0011      	movs	r1, r2
 8000cac:	4019      	ands	r1, r3
 8000cae:	421a      	tst	r2, r3
 8000cb0:	d000      	beq.n	8000cb4 <LL_RTC_EnterInitMode+0x4c>
 8000cb2:	2101      	movs	r1, #1
      if (timeout == 0U)
 8000cb4:	9b01      	ldr	r3, [sp, #4]
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d1e9      	bne.n	8000c8e <LL_RTC_EnterInitMode+0x26>
        status = ERROR;
 8000cba:	2001      	movs	r0, #1
 8000cbc:	e7e7      	b.n	8000c8e <LL_RTC_EnterInitMode+0x26>
 8000cbe:	2101      	movs	r1, #1
 8000cc0:	e7e4      	b.n	8000c8c <LL_RTC_EnterInitMode+0x24>
  ErrorStatus status = SUCCESS;
 8000cc2:	2000      	movs	r0, #0
      }
    }
  }
  return status;
}
 8000cc4:	b002      	add	sp, #8
 8000cc6:	bd10      	pop	{r4, pc}
 8000cc8:	e000e010 	.word	0xe000e010

08000ccc <LL_RTC_Init>:
{
 8000ccc:	b570      	push	{r4, r5, r6, lr}
 8000cce:	0004      	movs	r4, r0
 8000cd0:	000d      	movs	r5, r1
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8000cd2:	23ca      	movs	r3, #202	; 0xca
 8000cd4:	6243      	str	r3, [r0, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8000cd6:	3b77      	subs	r3, #119	; 0x77
 8000cd8:	6243      	str	r3, [r0, #36]	; 0x24
  if (LL_RTC_EnterInitMode(RTCx) != ERROR)
 8000cda:	f7ff ffc5 	bl	8000c68 <LL_RTC_EnterInitMode>
 8000cde:	2801      	cmp	r0, #1
 8000ce0:	d016      	beq.n	8000d10 <LL_RTC_Init+0x44>
  MODIFY_REG(RTCx->CR, RTC_CR_FMT, HourFormat);
 8000ce2:	68a3      	ldr	r3, [r4, #8]
 8000ce4:	2240      	movs	r2, #64	; 0x40
 8000ce6:	4393      	bics	r3, r2
 8000ce8:	682a      	ldr	r2, [r5, #0]
 8000cea:	4313      	orrs	r3, r2
 8000cec:	60a3      	str	r3, [r4, #8]
  MODIFY_REG(RTCx->PRER, RTC_PRER_PREDIV_S, SynchPrescaler);
 8000cee:	6923      	ldr	r3, [r4, #16]
 8000cf0:	0bdb      	lsrs	r3, r3, #15
 8000cf2:	03db      	lsls	r3, r3, #15
 8000cf4:	68aa      	ldr	r2, [r5, #8]
 8000cf6:	4313      	orrs	r3, r2
 8000cf8:	6123      	str	r3, [r4, #16]
    LL_RTC_SetAsynchPrescaler(RTCx, RTC_InitStruct->AsynchPrescaler);
 8000cfa:	686a      	ldr	r2, [r5, #4]
  MODIFY_REG(RTCx->PRER, RTC_PRER_PREDIV_A, AsynchPrescaler << RTC_PRER_PREDIV_A_Pos);
 8000cfc:	6923      	ldr	r3, [r4, #16]
 8000cfe:	4906      	ldr	r1, [pc, #24]	; (8000d18 <LL_RTC_Init+0x4c>)
 8000d00:	400b      	ands	r3, r1
 8000d02:	0412      	lsls	r2, r2, #16
 8000d04:	4313      	orrs	r3, r2
 8000d06:	6123      	str	r3, [r4, #16]
  WRITE_REG(RTCx->ISR, (uint32_t)~RTC_ISR_INIT);
 8000d08:	2381      	movs	r3, #129	; 0x81
 8000d0a:	425b      	negs	r3, r3
 8000d0c:	60e3      	str	r3, [r4, #12]
    status = SUCCESS;
 8000d0e:	2000      	movs	r0, #0
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8000d10:	23ff      	movs	r3, #255	; 0xff
 8000d12:	6263      	str	r3, [r4, #36]	; 0x24
}
 8000d14:	bd70      	pop	{r4, r5, r6, pc}
 8000d16:	46c0      	nop			; (mov r8, r8)
 8000d18:	ff80ffff 	.word	0xff80ffff

08000d1c <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 8000d1c:	b510      	push	{r4, lr}
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsEnabled(SPI_TypeDef *SPIx)
{
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8000d1e:	6803      	ldr	r3, [r0, #0]
 8000d20:	065b      	lsls	r3, r3, #25
 8000d22:	d428      	bmi.n	8000d76 <LL_SPI_Init+0x5a>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 8000d24:	6803      	ldr	r3, [r0, #0]
 8000d26:	4a15      	ldr	r2, [pc, #84]	; (8000d7c <LL_SPI_Init+0x60>)
 8000d28:	401a      	ands	r2, r3
 8000d2a:	680b      	ldr	r3, [r1, #0]
 8000d2c:	684c      	ldr	r4, [r1, #4]
 8000d2e:	4323      	orrs	r3, r4
 8000d30:	688c      	ldr	r4, [r1, #8]
 8000d32:	4323      	orrs	r3, r4
 8000d34:	68cc      	ldr	r4, [r1, #12]
 8000d36:	4323      	orrs	r3, r4
 8000d38:	690c      	ldr	r4, [r1, #16]
 8000d3a:	4323      	orrs	r3, r4
 8000d3c:	694c      	ldr	r4, [r1, #20]
 8000d3e:	4323      	orrs	r3, r4
 8000d40:	698c      	ldr	r4, [r1, #24]
 8000d42:	4323      	orrs	r3, r4
 8000d44:	69cc      	ldr	r4, [r1, #28]
 8000d46:	4323      	orrs	r3, r4
 8000d48:	6a0c      	ldr	r4, [r1, #32]
 8000d4a:	4323      	orrs	r3, r4
 8000d4c:	4313      	orrs	r3, r2
 8000d4e:	6003      	str	r3, [r0, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 8000d50:	6843      	ldr	r3, [r0, #4]
 8000d52:	2204      	movs	r2, #4
 8000d54:	4393      	bics	r3, r2
 8000d56:	8aca      	ldrh	r2, [r1, #22]
 8000d58:	4313      	orrs	r3, r2
 8000d5a:	6043      	str	r3, [r0, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 8000d5c:	2380      	movs	r3, #128	; 0x80
 8000d5e:	019b      	lsls	r3, r3, #6
 8000d60:	6a0a      	ldr	r2, [r1, #32]
 8000d62:	429a      	cmp	r2, r3
 8000d64:	d001      	beq.n	8000d6a <LL_SPI_Init+0x4e>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
    }
    status = SUCCESS;
 8000d66:	2000      	movs	r0, #0
 8000d68:	e006      	b.n	8000d78 <LL_SPI_Init+0x5c>
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 8000d6a:	6a4b      	ldr	r3, [r1, #36]	; 0x24
  * @param  CRCPoly This parameter must be a number between Min_Data = 0x00 and Max_Data = 0xFFFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetCRCPolynomial(SPI_TypeDef *SPIx, uint32_t CRCPoly)
{
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 8000d6c:	041b      	lsls	r3, r3, #16
 8000d6e:	0c1b      	lsrs	r3, r3, #16
 8000d70:	6103      	str	r3, [r0, #16]
    status = SUCCESS;
 8000d72:	2000      	movs	r0, #0
}
 8000d74:	e000      	b.n	8000d78 <LL_SPI_Init+0x5c>
  ErrorStatus status = ERROR;
 8000d76:	2001      	movs	r0, #1
#if defined (SPI_I2S_SUPPORT)
  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2S_SUPPORT */
  return status;
}
 8000d78:	bd10      	pop	{r4, pc}
 8000d7a:	46c0      	nop			; (mov r8, r8)
 8000d7c:	ffff0040 	.word	0xffff0040

08000d80 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8000d80:	b570      	push	{r4, r5, r6, lr}
 8000d82:	0004      	movs	r4, r0
 8000d84:	000d      	movs	r5, r1
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabled(USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8000d86:	6803      	ldr	r3, [r0, #0]
 8000d88:	07db      	lsls	r3, r3, #31
 8000d8a:	d440      	bmi.n	8000e0e <LL_USART_Init+0x8e>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8000d8c:	6803      	ldr	r3, [r0, #0]
 8000d8e:	4a23      	ldr	r2, [pc, #140]	; (8000e1c <LL_USART_Init+0x9c>)
 8000d90:	401a      	ands	r2, r3
 8000d92:	684b      	ldr	r3, [r1, #4]
 8000d94:	68c9      	ldr	r1, [r1, #12]
 8000d96:	430b      	orrs	r3, r1
 8000d98:	6929      	ldr	r1, [r5, #16]
 8000d9a:	430b      	orrs	r3, r1
 8000d9c:	69a9      	ldr	r1, [r5, #24]
 8000d9e:	430b      	orrs	r3, r1
 8000da0:	4313      	orrs	r3, r2
 8000da2:	6003      	str	r3, [r0, #0]
  *         @arg @ref LL_USART_STOPBITS_2
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetStopBitsLength(USART_TypeDef *USARTx, uint32_t StopBits)
{
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8000da4:	6843      	ldr	r3, [r0, #4]
 8000da6:	4a1e      	ldr	r2, [pc, #120]	; (8000e20 <LL_USART_Init+0xa0>)
 8000da8:	4013      	ands	r3, r2
 8000daa:	68aa      	ldr	r2, [r5, #8]
 8000dac:	4313      	orrs	r3, r2
 8000dae:	6043      	str	r3, [r0, #4]
  *         @arg @ref LL_USART_HWCONTROL_RTS_CTS
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetHWFlowCtrl(USART_TypeDef *USARTx, uint32_t HardwareFlowControl)
{
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8000db0:	6883      	ldr	r3, [r0, #8]
 8000db2:	4a1c      	ldr	r2, [pc, #112]	; (8000e24 <LL_USART_Init+0xa4>)
 8000db4:	4013      	ands	r3, r2
 8000db6:	696a      	ldr	r2, [r5, #20]
 8000db8:	4313      	orrs	r3, r2
 8000dba:	6083      	str	r3, [r0, #8]
    }
#endif /* USART1 */
#if defined(USART1)
    else if (USARTx == USART2)
#else
    if (USARTx == USART2)
 8000dbc:	4b1a      	ldr	r3, [pc, #104]	; (8000e28 <LL_USART_Init+0xa8>)
 8000dbe:	4298      	cmp	r0, r3
 8000dc0:	d001      	beq.n	8000dc6 <LL_USART_Init+0x46>
  ErrorStatus status = ERROR;
 8000dc2:	2001      	movs	r0, #1
 8000dc4:	e024      	b.n	8000e10 <LL_USART_Init+0x90>
#endif /* USART1 */
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 8000dc6:	200c      	movs	r0, #12
 8000dc8:	f7ff ff0a 	bl	8000be0 <LL_RCC_GetUSARTClockFreq>

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8000dcc:	2800      	cmp	r0, #0
 8000dce:	d020      	beq.n	8000e12 <LL_USART_Init+0x92>
        && (USART_InitStruct->BaudRate != 0U))
 8000dd0:	6829      	ldr	r1, [r5, #0]
 8000dd2:	2900      	cmp	r1, #0
 8000dd4:	d01f      	beq.n	8000e16 <LL_USART_Init+0x96>
    {
      status = SUCCESS;
      LL_USART_SetBaudRate(USARTx,
 8000dd6:	69aa      	ldr	r2, [r5, #24]
                                          uint32_t BaudRate)
{
  uint32_t usartdiv;
  uint32_t brrtemp;

  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8000dd8:	2380      	movs	r3, #128	; 0x80
 8000dda:	021b      	lsls	r3, r3, #8
 8000ddc:	429a      	cmp	r2, r3
 8000dde:	d008      	beq.n	8000df2 <LL_USART_Init+0x72>
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
    USARTx->BRR = brrtemp;
  }
  else
  {
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8000de0:	084b      	lsrs	r3, r1, #1
 8000de2:	18c0      	adds	r0, r0, r3
 8000de4:	f7ff f9ac 	bl	8000140 <__udivsi3>
 8000de8:	0400      	lsls	r0, r0, #16
 8000dea:	0c00      	lsrs	r0, r0, #16
 8000dec:	60e0      	str	r0, [r4, #12]
      status = SUCCESS;
 8000dee:	2000      	movs	r0, #0
 8000df0:	e00e      	b.n	8000e10 <LL_USART_Init+0x90>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8000df2:	0040      	lsls	r0, r0, #1
 8000df4:	084b      	lsrs	r3, r1, #1
 8000df6:	18c0      	adds	r0, r0, r3
 8000df8:	f7ff f9a2 	bl	8000140 <__udivsi3>
    brrtemp = usartdiv & 0xFFF0U;
 8000dfc:	4b0b      	ldr	r3, [pc, #44]	; (8000e2c <LL_USART_Init+0xac>)
 8000dfe:	4003      	ands	r3, r0
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8000e00:	0840      	lsrs	r0, r0, #1
 8000e02:	2207      	movs	r2, #7
 8000e04:	4010      	ands	r0, r2
 8000e06:	4318      	orrs	r0, r3
    USARTx->BRR = brrtemp;
 8000e08:	60e0      	str	r0, [r4, #12]
 8000e0a:	2000      	movs	r0, #0
 8000e0c:	e000      	b.n	8000e10 <LL_USART_Init+0x90>
  ErrorStatus status = ERROR;
 8000e0e:	2001      	movs	r0, #1
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
}
 8000e10:	bd70      	pop	{r4, r5, r6, pc}
  ErrorStatus status = ERROR;
 8000e12:	2001      	movs	r0, #1
 8000e14:	e7fc      	b.n	8000e10 <LL_USART_Init+0x90>
 8000e16:	2001      	movs	r0, #1
 8000e18:	e7fa      	b.n	8000e10 <LL_USART_Init+0x90>
 8000e1a:	46c0      	nop			; (mov r8, r8)
 8000e1c:	efff69f3 	.word	0xefff69f3
 8000e20:	ffffcfff 	.word	0xffffcfff
 8000e24:	fffffcff 	.word	0xfffffcff
 8000e28:	40004400 	.word	0x40004400
 8000e2c:	0000fff0 	.word	0x0000fff0

08000e30 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8000e30:	b510      	push	{r4, lr}
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8000e32:	21fa      	movs	r1, #250	; 0xfa
 8000e34:	0089      	lsls	r1, r1, #2
 8000e36:	f7ff f983 	bl	8000140 <__udivsi3>
 8000e3a:	3801      	subs	r0, #1
 8000e3c:	4b03      	ldr	r3, [pc, #12]	; (8000e4c <LL_Init1msTick+0x1c>)
 8000e3e:	6058      	str	r0, [r3, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8000e40:	2200      	movs	r2, #0
 8000e42:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e44:	3205      	adds	r2, #5
 8000e46:	601a      	str	r2, [r3, #0]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
}
 8000e48:	bd10      	pop	{r4, pc}
 8000e4a:	46c0      	nop			; (mov r8, r8)
 8000e4c:	e000e010 	.word	0xe000e010

08000e50 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8000e50:	b082      	sub	sp, #8
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8000e52:	4b08      	ldr	r3, [pc, #32]	; (8000e74 <LL_mDelay+0x24>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	9301      	str	r3, [sp, #4]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8000e58:	9b01      	ldr	r3, [sp, #4]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 8000e5a:	1c43      	adds	r3, r0, #1
 8000e5c:	d000      	beq.n	8000e60 <LL_mDelay+0x10>
  {
    Delay++;
 8000e5e:	3001      	adds	r0, #1
  }

  while (Delay)
 8000e60:	2800      	cmp	r0, #0
 8000e62:	d005      	beq.n	8000e70 <LL_mDelay+0x20>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8000e64:	4b03      	ldr	r3, [pc, #12]	; (8000e74 <LL_mDelay+0x24>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	03db      	lsls	r3, r3, #15
 8000e6a:	d5f9      	bpl.n	8000e60 <LL_mDelay+0x10>
    {
      Delay--;
 8000e6c:	3801      	subs	r0, #1
 8000e6e:	e7f7      	b.n	8000e60 <LL_mDelay+0x10>
    }
  }
}
 8000e70:	b002      	add	sp, #8
 8000e72:	4770      	bx	lr
 8000e74:	e000e010 	.word	0xe000e010

08000e78 <LL_SetSystemCoreClock>:
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8000e78:	4b01      	ldr	r3, [pc, #4]	; (8000e80 <LL_SetSystemCoreClock+0x8>)
 8000e7a:	6018      	str	r0, [r3, #0]
}
 8000e7c:	4770      	bx	lr
 8000e7e:	46c0      	nop			; (mov r8, r8)
 8000e80:	2000003c 	.word	0x2000003c

08000e84 <dwt_writetodevice>:
    uint16  recordNumber,
    uint16  index,
    uint32        length,
    const uint8   *buffer
)
{
 8000e84:	b530      	push	{r4, r5, lr}
 8000e86:	b083      	sub	sp, #12
#ifdef DWT_API_ERROR_CHECK
    assert(recordNumber <= 0x3F); // Record number is limited to 6-bits.
#endif

    // Write message header selecting WRITE operation and addresses as appropriate (this is one to three bytes long)
    if (index == 0) // For index of 0, no sub-index is required
 8000e88:	2900      	cmp	r1, #0
 8000e8a:	d10a      	bne.n	8000ea2 <dwt_writetodevice+0x1e>
    {
        header[cnt++] = 0x80 | recordNumber ; // Bit-7 is WRITE operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
 8000e8c:	3980      	subs	r1, #128	; 0x80
 8000e8e:	4308      	orrs	r0, r1
 8000e90:	a901      	add	r1, sp, #4
 8000e92:	7008      	strb	r0, [r1, #0]
 8000e94:	2001      	movs	r0, #1
            header[cnt++] =  (uint8) (index >> 7) ; // 8-bit value = high eight bits of index.
        }
    }

    // Write it to the SPI
    writetospi(cnt,header,length,buffer);
 8000e96:	b280      	uxth	r0, r0
 8000e98:	a901      	add	r1, sp, #4
 8000e9a:	f000 ff03 	bl	8001ca4 <writetospi>
} // end dwt_writetodevice()
 8000e9e:	b003      	add	sp, #12
 8000ea0:	bd30      	pop	{r4, r5, pc}
        header[cnt++] = 0xC0 | recordNumber ; // Bit-7 is WRITE operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 8000ea2:	2440      	movs	r4, #64	; 0x40
 8000ea4:	4264      	negs	r4, r4
 8000ea6:	4320      	orrs	r0, r4
 8000ea8:	ac01      	add	r4, sp, #4
 8000eaa:	7020      	strb	r0, [r4, #0]
        if (index <= 127) // For non-zero index < 127, just a single sub-index byte is required
 8000eac:	297f      	cmp	r1, #127	; 0x7f
 8000eae:	d802      	bhi.n	8000eb6 <dwt_writetodevice+0x32>
            header[cnt++] = (uint8)index ; // Bit-7 zero means no extension, bits 6-0 is index.
 8000eb0:	7061      	strb	r1, [r4, #1]
 8000eb2:	2002      	movs	r0, #2
 8000eb4:	e7ef      	b.n	8000e96 <dwt_writetodevice+0x12>
            header[cnt++] = 0x80 | (uint8)(index) ; // Bit-7 one means extended index, bits 6-0 is low seven bits of index.
 8000eb6:	b2cd      	uxtb	r5, r1
 8000eb8:	ac01      	add	r4, sp, #4
 8000eba:	2080      	movs	r0, #128	; 0x80
 8000ebc:	4240      	negs	r0, r0
 8000ebe:	4328      	orrs	r0, r5
 8000ec0:	7060      	strb	r0, [r4, #1]
            header[cnt++] =  (uint8) (index >> 7) ; // 8-bit value = high eight bits of index.
 8000ec2:	09c9      	lsrs	r1, r1, #7
 8000ec4:	70a1      	strb	r1, [r4, #2]
 8000ec6:	2003      	movs	r0, #3
 8000ec8:	e7e5      	b.n	8000e96 <dwt_writetodevice+0x12>

08000eca <dwt_writetxdata>:
{
 8000eca:	b510      	push	{r4, lr}
 8000ecc:	000b      	movs	r3, r1
 8000ece:	0011      	movs	r1, r2
    if ((txBufferOffset + txFrameLength) <= 1024)
 8000ed0:	1814      	adds	r4, r2, r0
 8000ed2:	2280      	movs	r2, #128	; 0x80
 8000ed4:	00d2      	lsls	r2, r2, #3
 8000ed6:	4294      	cmp	r4, r2
 8000ed8:	dc05      	bgt.n	8000ee6 <dwt_writetxdata+0x1c>
        dwt_writetodevice( TX_BUFFER_ID, txBufferOffset, txFrameLength-2, txFrameBytes);
 8000eda:	1e82      	subs	r2, r0, #2
 8000edc:	2009      	movs	r0, #9
 8000ede:	f7ff ffd1 	bl	8000e84 <dwt_writetodevice>
        return DWT_SUCCESS;
 8000ee2:	2000      	movs	r0, #0
} // end dwt_writetxdata()
 8000ee4:	bd10      	pop	{r4, pc}
        return DWT_ERROR;
 8000ee6:	2001      	movs	r0, #1
 8000ee8:	4240      	negs	r0, r0
 8000eea:	e7fb      	b.n	8000ee4 <dwt_writetxdata+0x1a>

08000eec <dwt_readfromdevice>:
    uint16  recordNumber,
    uint16  index,
    uint32        length,
    uint8         *buffer
)
{
 8000eec:	b530      	push	{r4, r5, lr}
 8000eee:	b083      	sub	sp, #12
#ifdef DWT_API_ERROR_CHECK
    assert(recordNumber <= 0x3F); // Record number is limited to 6-bits.
#endif

    // Write message header selecting READ operation and addresses as appropriate (this is one to three bytes long)
    if (index == 0) // For index of 0, no sub-index is required
 8000ef0:	2900      	cmp	r1, #0
 8000ef2:	d108      	bne.n	8000f06 <dwt_readfromdevice+0x1a>
    {
        header[cnt++] = (uint8) recordNumber ; // Bit-7 zero is READ operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
 8000ef4:	a901      	add	r1, sp, #4
 8000ef6:	7008      	strb	r0, [r1, #0]
 8000ef8:	2001      	movs	r0, #1
            header[cnt++] =  (uint8) (index >> 7) ; // 8-bit value = high eight bits of index.
        }
    }

    // Do the read from the SPI
    readfromspi(cnt, header, length, buffer);  // result is stored in the buffer
 8000efa:	b280      	uxth	r0, r0
 8000efc:	a901      	add	r1, sp, #4
 8000efe:	f000 ff0d 	bl	8001d1c <readfromspi>
} // end dwt_readfromdevice()
 8000f02:	b003      	add	sp, #12
 8000f04:	bd30      	pop	{r4, r5, pc}
        header[cnt++] = (uint8)(0x40 | recordNumber) ; // Bit-7 zero is READ operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 8000f06:	2440      	movs	r4, #64	; 0x40
 8000f08:	4320      	orrs	r0, r4
 8000f0a:	ac01      	add	r4, sp, #4
 8000f0c:	7020      	strb	r0, [r4, #0]
        if (index <= 127) // For non-zero index < 127, just a single sub-index byte is required
 8000f0e:	297f      	cmp	r1, #127	; 0x7f
 8000f10:	d802      	bhi.n	8000f18 <dwt_readfromdevice+0x2c>
            header[cnt++] = (uint8) index ; // Bit-7 zero means no extension, bits 6-0 is index.
 8000f12:	7061      	strb	r1, [r4, #1]
 8000f14:	2002      	movs	r0, #2
 8000f16:	e7f0      	b.n	8000efa <dwt_readfromdevice+0xe>
            header[cnt++] = 0x80 | (uint8)(index) ; // Bit-7 one means extended index, bits 6-0 is low seven bits of index.
 8000f18:	b2cd      	uxtb	r5, r1
 8000f1a:	ac01      	add	r4, sp, #4
 8000f1c:	2080      	movs	r0, #128	; 0x80
 8000f1e:	4240      	negs	r0, r0
 8000f20:	4328      	orrs	r0, r5
 8000f22:	7060      	strb	r0, [r4, #1]
            header[cnt++] =  (uint8) (index >> 7) ; // 8-bit value = high eight bits of index.
 8000f24:	09c9      	lsrs	r1, r1, #7
 8000f26:	70a1      	strb	r1, [r4, #2]
 8000f28:	2003      	movs	r0, #3
 8000f2a:	e7e6      	b.n	8000efa <dwt_readfromdevice+0xe>

08000f2c <dwt_readrxdata>:
{
 8000f2c:	b510      	push	{r4, lr}
 8000f2e:	0003      	movs	r3, r0
 8000f30:	000c      	movs	r4, r1
 8000f32:	0011      	movs	r1, r2
    dwt_readfromdevice(RX_BUFFER_ID,rxBufferOffset,length,buffer) ;
 8000f34:	0022      	movs	r2, r4
 8000f36:	2011      	movs	r0, #17
 8000f38:	f7ff ffd8 	bl	8000eec <dwt_readfromdevice>
}
 8000f3c:	bd10      	pop	{r4, pc}
	...

08000f40 <dwt_readcarrierintegrator>:
{
 8000f40:	b500      	push	{lr}
 8000f42:	b083      	sub	sp, #12
    dwt_readfromdevice(DRX_CONF_ID,DRX_CARRIER_INT_OFFSET,DRX_CARRIER_INT_LEN, buffer) ;
 8000f44:	ab01      	add	r3, sp, #4
 8000f46:	2203      	movs	r2, #3
 8000f48:	2128      	movs	r1, #40	; 0x28
 8000f4a:	2027      	movs	r0, #39	; 0x27
 8000f4c:	f7ff ffce 	bl	8000eec <dwt_readfromdevice>
    for (j = 2 ; j >= 0 ; j --)  // arrange the three bytes into an unsigned integer value
 8000f50:	2302      	movs	r3, #2
    uint32  regval = 0 ;
 8000f52:	2000      	movs	r0, #0
    for (j = 2 ; j >= 0 ; j --)  // arrange the three bytes into an unsigned integer value
 8000f54:	e004      	b.n	8000f60 <dwt_readcarrierintegrator+0x20>
        regval = (regval << 8) + buffer[j] ;
 8000f56:	0200      	lsls	r0, r0, #8
 8000f58:	aa01      	add	r2, sp, #4
 8000f5a:	5cd2      	ldrb	r2, [r2, r3]
 8000f5c:	1880      	adds	r0, r0, r2
    for (j = 2 ; j >= 0 ; j --)  // arrange the three bytes into an unsigned integer value
 8000f5e:	3b01      	subs	r3, #1
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	daf8      	bge.n	8000f56 <dwt_readcarrierintegrator+0x16>
    if (regval & B20_SIGN_EXTEND_TEST) regval |= B20_SIGN_EXTEND_MASK ; // sign extend bit #20 to whole word
 8000f64:	02c3      	lsls	r3, r0, #11
 8000f66:	d503      	bpl.n	8000f70 <dwt_readcarrierintegrator+0x30>
 8000f68:	4b03      	ldr	r3, [pc, #12]	; (8000f78 <dwt_readcarrierintegrator+0x38>)
 8000f6a:	4318      	orrs	r0, r3
}
 8000f6c:	b003      	add	sp, #12
 8000f6e:	bd00      	pop	{pc}
    else regval &= DRX_CARRIER_INT_MASK ;                               // make sure upper bits are clear if not sign extending
 8000f70:	02c0      	lsls	r0, r0, #11
 8000f72:	0ac0      	lsrs	r0, r0, #11
 8000f74:	e7fa      	b.n	8000f6c <dwt_readcarrierintegrator+0x2c>
 8000f76:	46c0      	nop			; (mov r8, r8)
 8000f78:	fff00000 	.word	0xfff00000

08000f7c <dwt_readrxtimestamp>:
{
 8000f7c:	b510      	push	{r4, lr}
 8000f7e:	0003      	movs	r3, r0
    dwt_readfromdevice(RX_TIME_ID, RX_TIME_RX_STAMP_OFFSET, RX_TIME_RX_STAMP_LEN, timestamp) ; // Get the adjusted time of arrival
 8000f80:	2205      	movs	r2, #5
 8000f82:	2100      	movs	r1, #0
 8000f84:	2015      	movs	r0, #21
 8000f86:	f7ff ffb1 	bl	8000eec <dwt_readfromdevice>
}
 8000f8a:	bd10      	pop	{r4, pc}

08000f8c <dwt_read32bitoffsetreg>:
 * output parameters
 *
 * returns 32 bit register value
 */
uint32 dwt_read32bitoffsetreg(int regFileID, int regOffset)
{
 8000f8c:	b500      	push	{lr}
 8000f8e:	b083      	sub	sp, #12
    uint32  regval = 0 ;
    int     j ;
    uint8   buffer[4] ;

    dwt_readfromdevice(regFileID,regOffset,4,buffer); // Read 4 bytes (32-bits) register into buffer
 8000f90:	b289      	uxth	r1, r1
 8000f92:	b280      	uxth	r0, r0
 8000f94:	ab01      	add	r3, sp, #4
 8000f96:	2204      	movs	r2, #4
 8000f98:	f7ff ffa8 	bl	8000eec <dwt_readfromdevice>

    for (j = 3 ; j >= 0 ; j --)
 8000f9c:	2303      	movs	r3, #3
    uint32  regval = 0 ;
 8000f9e:	2000      	movs	r0, #0
    for (j = 3 ; j >= 0 ; j --)
 8000fa0:	e004      	b.n	8000fac <dwt_read32bitoffsetreg+0x20>
    {
        regval = (regval << 8) + buffer[j] ;
 8000fa2:	0200      	lsls	r0, r0, #8
 8000fa4:	aa01      	add	r2, sp, #4
 8000fa6:	5cd2      	ldrb	r2, [r2, r3]
 8000fa8:	1880      	adds	r0, r0, r2
    for (j = 3 ; j >= 0 ; j --)
 8000faa:	3b01      	subs	r3, #1
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	daf8      	bge.n	8000fa2 <dwt_read32bitoffsetreg+0x16>
    }
    return regval ;

} // end dwt_read32bitoffsetreg()
 8000fb0:	b003      	add	sp, #12
 8000fb2:	bd00      	pop	{pc}

08000fb4 <dwt_readdevid>:
{
 8000fb4:	b510      	push	{r4, lr}
    return dwt_read32bitoffsetreg(DEV_ID_ID,0);
 8000fb6:	2100      	movs	r1, #0
 8000fb8:	2000      	movs	r0, #0
 8000fba:	f7ff ffe7 	bl	8000f8c <dwt_read32bitoffsetreg>
}
 8000fbe:	bd10      	pop	{r4, pc}

08000fc0 <dwt_readtxtimestamplo32>:
{
 8000fc0:	b510      	push	{r4, lr}
    return dwt_read32bitreg(TX_TIME_ID); // Read TX TIME as a 32-bit register to get the 4 lower bytes out of 5
 8000fc2:	2100      	movs	r1, #0
 8000fc4:	2017      	movs	r0, #23
 8000fc6:	f7ff ffe1 	bl	8000f8c <dwt_read32bitoffsetreg>
}
 8000fca:	bd10      	pop	{r4, pc}

08000fcc <dwt_readrxtimestamplo32>:
{
 8000fcc:	b510      	push	{r4, lr}
    return dwt_read32bitreg(RX_TIME_ID); // Read RX TIME as a 32-bit register to get the 4 lower bytes out of 5
 8000fce:	2100      	movs	r1, #0
 8000fd0:	2015      	movs	r0, #21
 8000fd2:	f7ff ffdb 	bl	8000f8c <dwt_read32bitoffsetreg>
}
 8000fd6:	bd10      	pop	{r4, pc}

08000fd8 <dwt_read16bitoffsetreg>:
 * output parameters
 *
 * returns 16 bit register value
 */
uint16 dwt_read16bitoffsetreg(int regFileID, int regOffset)
{
 8000fd8:	b500      	push	{lr}
 8000fda:	b083      	sub	sp, #12
    uint16  regval = 0 ;
    uint8   buffer[2] ;

    dwt_readfromdevice(regFileID,regOffset,2,buffer); // Read 2 bytes (16-bits) register into buffer
 8000fdc:	b289      	uxth	r1, r1
 8000fde:	b280      	uxth	r0, r0
 8000fe0:	ab01      	add	r3, sp, #4
 8000fe2:	2202      	movs	r2, #2
 8000fe4:	f7ff ff82 	bl	8000eec <dwt_readfromdevice>

    regval = ((uint16)buffer[1] << 8) + buffer[0] ;
 8000fe8:	466b      	mov	r3, sp
 8000fea:	7958      	ldrb	r0, [r3, #5]
 8000fec:	0200      	lsls	r0, r0, #8
 8000fee:	791b      	ldrb	r3, [r3, #4]
 8000ff0:	18c0      	adds	r0, r0, r3
 8000ff2:	b280      	uxth	r0, r0
    return regval ;

} // end dwt_read16bitoffsetreg()
 8000ff4:	b003      	add	sp, #12
 8000ff6:	bd00      	pop	{pc}

08000ff8 <dwt_readdiagnostics>:
{
 8000ff8:	b510      	push	{r4, lr}
 8000ffa:	0004      	movs	r4, r0
    diagnostics->firstPath = dwt_read16bitoffsetreg(RX_TIME_ID, RX_TIME_FP_INDEX_OFFSET);
 8000ffc:	2105      	movs	r1, #5
 8000ffe:	2015      	movs	r0, #21
 8001000:	f7ff ffea 	bl	8000fd8 <dwt_read16bitoffsetreg>
 8001004:	81e0      	strh	r0, [r4, #14]
    diagnostics->maxNoise = dwt_read16bitoffsetreg(LDE_IF_ID, LDE_THRESH_OFFSET);
 8001006:	2100      	movs	r1, #0
 8001008:	202e      	movs	r0, #46	; 0x2e
 800100a:	f7ff ffe5 	bl	8000fd8 <dwt_read16bitoffsetreg>
 800100e:	8020      	strh	r0, [r4, #0]
    dwt_readfromdevice(RX_FQUAL_ID, 0x0, 8, (uint8*)&diagnostics->stdNoise);
 8001010:	1d23      	adds	r3, r4, #4
 8001012:	2208      	movs	r2, #8
 8001014:	2100      	movs	r1, #0
 8001016:	2012      	movs	r0, #18
 8001018:	f7ff ff68 	bl	8000eec <dwt_readfromdevice>
    diagnostics->firstPathAmp1 = dwt_read16bitoffsetreg(RX_TIME_ID, RX_TIME_FP_AMPL1_OFFSET);
 800101c:	2107      	movs	r1, #7
 800101e:	2015      	movs	r0, #21
 8001020:	f7ff ffda 	bl	8000fd8 <dwt_read16bitoffsetreg>
 8001024:	8060      	strh	r0, [r4, #2]
    diagnostics->rxPreamCount = (dwt_read32bitreg(RX_FINFO_ID) & RX_FINFO_RXPACC_MASK) >> RX_FINFO_RXPACC_SHIFT  ;
 8001026:	2100      	movs	r1, #0
 8001028:	2010      	movs	r0, #16
 800102a:	f7ff ffaf 	bl	8000f8c <dwt_read32bitoffsetreg>
 800102e:	0d00      	lsrs	r0, r0, #20
 8001030:	81a0      	strh	r0, [r4, #12]
}
 8001032:	bd10      	pop	{r4, pc}

08001034 <dwt_read8bitoffsetreg>:
 * output parameters
 *
 * returns 8-bit register value
 */
uint8 dwt_read8bitoffsetreg(int regFileID, int regOffset)
{
 8001034:	b510      	push	{r4, lr}
 8001036:	b082      	sub	sp, #8
    uint8 regval;

    dwt_readfromdevice(regFileID, regOffset, 1, &regval);
 8001038:	466b      	mov	r3, sp
 800103a:	1ddc      	adds	r4, r3, #7
 800103c:	b289      	uxth	r1, r1
 800103e:	b280      	uxth	r0, r0
 8001040:	0023      	movs	r3, r4
 8001042:	2201      	movs	r2, #1
 8001044:	f7ff ff52 	bl	8000eec <dwt_readfromdevice>

    return regval ;
 8001048:	7820      	ldrb	r0, [r4, #0]
}
 800104a:	b002      	add	sp, #8
 800104c:	bd10      	pop	{r4, pc}

0800104e <dwt_write8bitoffsetreg>:
 * output parameters
 *
 * no return value
 */
void dwt_write8bitoffsetreg(int regFileID, int regOffset, uint8 regval)
{
 800104e:	b500      	push	{lr}
 8001050:	b083      	sub	sp, #12
 8001052:	466b      	mov	r3, sp
 8001054:	3307      	adds	r3, #7
 8001056:	701a      	strb	r2, [r3, #0]
    dwt_writetodevice(regFileID, regOffset, 1, &regval);
 8001058:	b289      	uxth	r1, r1
 800105a:	b280      	uxth	r0, r0
 800105c:	2201      	movs	r2, #1
 800105e:	f7ff ff11 	bl	8000e84 <dwt_writetodevice>
}
 8001062:	b003      	add	sp, #12
 8001064:	bd00      	pop	{pc}

08001066 <dwt_configurefor64plen>:
{
 8001066:	b510      	push	{r4, lr}
 8001068:	0004      	movs	r4, r0
    dwt_write8bitoffsetreg(CRTR_ID, CRTR_GEAR_OFFSET, DEMOD_GEAR_64L);
 800106a:	2247      	movs	r2, #71	; 0x47
 800106c:	2128      	movs	r1, #40	; 0x28
 800106e:	2031      	movs	r0, #49	; 0x31
 8001070:	f7ff ffed 	bl	800104e <dwt_write8bitoffsetreg>
    if(prf == DWT_PRF_16M)
 8001074:	2c01      	cmp	r4, #1
 8001076:	d005      	beq.n	8001084 <dwt_configurefor64plen+0x1e>
        dwt_write8bitoffsetreg(DRX_CONF_ID, DRX_TUNE2_OFFSET+2, DRX_TUNE2_UNCONF_SFD_TH_PRF64);
 8001078:	2220      	movs	r2, #32
 800107a:	210a      	movs	r1, #10
 800107c:	2027      	movs	r0, #39	; 0x27
 800107e:	f7ff ffe6 	bl	800104e <dwt_write8bitoffsetreg>
}
 8001082:	bd10      	pop	{r4, pc}
        dwt_write8bitoffsetreg(DRX_CONF_ID, DRX_TUNE2_OFFSET+2, DRX_TUNE2_UNCONF_SFD_TH_PRF16);
 8001084:	220e      	movs	r2, #14
 8001086:	210a      	movs	r1, #10
 8001088:	2027      	movs	r0, #39	; 0x27
 800108a:	f7ff ffe0 	bl	800104e <dwt_write8bitoffsetreg>
 800108e:	e7f8      	b.n	8001082 <dwt_configurefor64plen+0x1c>

08001090 <dwt_write16bitoffsetreg>:
 * output parameters
 *
 * no return value
 */
void dwt_write16bitoffsetreg(int regFileID, int regOffset, uint16 regval)
{
 8001090:	b500      	push	{lr}
 8001092:	b083      	sub	sp, #12
    uint8   buffer[2] ;

    buffer[0] = regval & 0xFF;
 8001094:	466b      	mov	r3, sp
 8001096:	711a      	strb	r2, [r3, #4]
    buffer[1] = regval >> 8 ;
 8001098:	0a12      	lsrs	r2, r2, #8
 800109a:	715a      	strb	r2, [r3, #5]

    dwt_writetodevice(regFileID,regOffset,2,buffer);
 800109c:	b289      	uxth	r1, r1
 800109e:	b280      	uxth	r0, r0
 80010a0:	ab01      	add	r3, sp, #4
 80010a2:	2202      	movs	r2, #2
 80010a4:	f7ff feee 	bl	8000e84 <dwt_writetodevice>
} // end dwt_write16bitoffsetreg()
 80010a8:	b003      	add	sp, #12
 80010aa:	bd00      	pop	{pc}

080010ac <dwt_setrxantennadelay>:
{
 80010ac:	b510      	push	{r4, lr}
 80010ae:	0002      	movs	r2, r0
    dwt_write16bitoffsetreg(LDE_IF_ID, LDE_RXANTD_OFFSET, rxDelay);
 80010b0:	4902      	ldr	r1, [pc, #8]	; (80010bc <dwt_setrxantennadelay+0x10>)
 80010b2:	202e      	movs	r0, #46	; 0x2e
 80010b4:	f7ff ffec 	bl	8001090 <dwt_write16bitoffsetreg>
}
 80010b8:	bd10      	pop	{r4, pc}
 80010ba:	46c0      	nop			; (mov r8, r8)
 80010bc:	00001804 	.word	0x00001804

080010c0 <dwt_settxantennadelay>:
{
 80010c0:	b510      	push	{r4, lr}
 80010c2:	0002      	movs	r2, r0
    dwt_write16bitoffsetreg(TX_ANTD_ID, TX_ANTD_OFFSET, txDelay);
 80010c4:	2100      	movs	r1, #0
 80010c6:	2018      	movs	r0, #24
 80010c8:	f7ff ffe2 	bl	8001090 <dwt_write16bitoffsetreg>
}
 80010cc:	bd10      	pop	{r4, pc}

080010ce <dwt_write32bitoffsetreg>:
 * output parameters
 *
 * no return value
 */
void dwt_write32bitoffsetreg(int regFileID, int regOffset, uint32 regval)
{
 80010ce:	b510      	push	{r4, lr}
 80010d0:	b082      	sub	sp, #8
    int     j ;
    uint8   buffer[4] ;

    for ( j = 0 ; j < 4 ; j++ )
 80010d2:	2300      	movs	r3, #0
 80010d4:	e003      	b.n	80010de <dwt_write32bitoffsetreg+0x10>
    {
        buffer[j] = regval & 0xff ;
 80010d6:	ac01      	add	r4, sp, #4
 80010d8:	54e2      	strb	r2, [r4, r3]
        regval >>= 8 ;
 80010da:	0a12      	lsrs	r2, r2, #8
    for ( j = 0 ; j < 4 ; j++ )
 80010dc:	3301      	adds	r3, #1
 80010de:	2b03      	cmp	r3, #3
 80010e0:	ddf9      	ble.n	80010d6 <dwt_write32bitoffsetreg+0x8>
    }

    dwt_writetodevice(regFileID,regOffset,4,buffer);
 80010e2:	b289      	uxth	r1, r1
 80010e4:	b280      	uxth	r0, r0
 80010e6:	ab01      	add	r3, sp, #4
 80010e8:	2204      	movs	r2, #4
 80010ea:	f7ff fecb 	bl	8000e84 <dwt_writetodevice>
} // end dwt_write32bitoffsetreg()
 80010ee:	b002      	add	sp, #8
 80010f0:	bd10      	pop	{r4, pc}
	...

080010f4 <dwt_writetxfctrl>:
{
 80010f4:	b510      	push	{r4, lr}
    uint32 reg32 = pdw1000local->txFCTRL | txFrameLength | ((uint32)txBufferOffset << TX_FCTRL_TXBOFFS_SHFT) | ((uint32)ranging << TX_FCTRL_TR_SHFT);
 80010f6:	4b06      	ldr	r3, [pc, #24]	; (8001110 <dwt_writetxfctrl+0x1c>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	68db      	ldr	r3, [r3, #12]
 80010fc:	4318      	orrs	r0, r3
 80010fe:	0589      	lsls	r1, r1, #22
 8001100:	4308      	orrs	r0, r1
 8001102:	03d2      	lsls	r2, r2, #15
 8001104:	4302      	orrs	r2, r0
    dwt_write32bitreg(TX_FCTRL_ID, reg32);
 8001106:	2100      	movs	r1, #0
 8001108:	2008      	movs	r0, #8
 800110a:	f7ff ffe0 	bl	80010ce <dwt_write32bitoffsetreg>
} // end dwt_writetxfctrl()
 800110e:	bd10      	pop	{r4, pc}
 8001110:	20000000 	.word	0x20000000

08001114 <_dwt_otpread>:
 * output parameters
 *
 * returns the 32bit of read data
 */
uint32 _dwt_otpread(uint16 address)
{
 8001114:	b510      	push	{r4, lr}
 8001116:	0002      	movs	r2, r0
    uint32 ret_data;

    // Write the address
    dwt_write16bitoffsetreg(OTP_IF_ID, OTP_ADDR, address);
 8001118:	2104      	movs	r1, #4
 800111a:	202d      	movs	r0, #45	; 0x2d
 800111c:	f7ff ffb8 	bl	8001090 <dwt_write16bitoffsetreg>

    // Perform OTP Read - Manual read mode has to be set
    dwt_write8bitoffsetreg(OTP_IF_ID, OTP_CTRL, OTP_CTRL_OTPREAD | OTP_CTRL_OTPRDEN);
 8001120:	2203      	movs	r2, #3
 8001122:	2106      	movs	r1, #6
 8001124:	202d      	movs	r0, #45	; 0x2d
 8001126:	f7ff ff92 	bl	800104e <dwt_write8bitoffsetreg>
    dwt_write8bitoffsetreg(OTP_IF_ID, OTP_CTRL, 0x00); // OTPREAD is self clearing but OTPRDEN is not
 800112a:	2200      	movs	r2, #0
 800112c:	2106      	movs	r1, #6
 800112e:	202d      	movs	r0, #45	; 0x2d
 8001130:	f7ff ff8d 	bl	800104e <dwt_write8bitoffsetreg>

    // Read read data, available 40ns after rising edge of OTP_READ
    ret_data = dwt_read32bitoffsetreg(OTP_IF_ID, OTP_RDAT);
 8001134:	210a      	movs	r1, #10
 8001136:	202d      	movs	r0, #45	; 0x2d
 8001138:	f7ff ff28 	bl	8000f8c <dwt_read32bitoffsetreg>

    // Return the 32bit of read data
    return ret_data;
}
 800113c:	bd10      	pop	{r4, pc}
	...

08001140 <_dwt_otpsetmrregs>:
 * output parameters
 *
 * returns DWT_SUCCESS for success, or DWT_ERROR for error
 */
uint32 _dwt_otpsetmrregs(int mode)
{
 8001140:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001142:	46d6      	mov	lr, sl
 8001144:	464f      	mov	r7, r9
 8001146:	4646      	mov	r6, r8
 8001148:	b5c0      	push	{r6, r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	0004      	movs	r4, r0
    uint8 wr_buf[4];
    uint32 mra=0,mrb=0,mr=0;

    // PROGRAMME MRA
    // Set MRA, MODE_SEL
    wr_buf[0] = 0x03;
 800114e:	ab01      	add	r3, sp, #4
 8001150:	2203      	movs	r2, #3
 8001152:	701a      	strb	r2, [r3, #0]
    dwt_writetodevice(OTP_IF_ID, OTP_CTRL+1,1,wr_buf);
 8001154:	3a02      	subs	r2, #2
 8001156:	2107      	movs	r1, #7
 8001158:	202d      	movs	r0, #45	; 0x2d
 800115a:	f7ff fe93 	bl	8000e84 <dwt_writetodevice>

    // Load data
    switch(mode&0x0f) {
 800115e:	200f      	movs	r0, #15
 8001160:	4020      	ands	r0, r4
 8001162:	2805      	cmp	r0, #5
 8001164:	d900      	bls.n	8001168 <_dwt_otpsetmrregs+0x28>
 8001166:	e0b7      	b.n	80012d8 <_dwt_otpsetmrregs+0x198>
 8001168:	0080      	lsls	r0, r0, #2
 800116a:	4b5d      	ldr	r3, [pc, #372]	; (80012e0 <_dwt_otpsetmrregs+0x1a0>)
 800116c:	581b      	ldr	r3, [r3, r0]
 800116e:	469f      	mov	pc, r3
 8001170:	2500      	movs	r5, #0
 8001172:	2600      	movs	r6, #0
 8001174:	2300      	movs	r3, #0
        break;
    default :
        return DWT_ERROR;
    }

    wr_buf[0] = mra & 0x00ff;
 8001176:	ac01      	add	r4, sp, #4
 8001178:	7023      	strb	r3, [r4, #0]
    wr_buf[1] = (mra & 0xff00)>>8;
 800117a:	0a1b      	lsrs	r3, r3, #8
 800117c:	7063      	strb	r3, [r4, #1]
    dwt_writetodevice(OTP_IF_ID, OTP_WDAT,2,wr_buf);
 800117e:	0023      	movs	r3, r4
 8001180:	2202      	movs	r2, #2
 8001182:	2100      	movs	r1, #0
 8001184:	202d      	movs	r0, #45	; 0x2d
 8001186:	f7ff fe7d 	bl	8000e84 <dwt_writetodevice>


    // Set WRITE_MR
    wr_buf[0] = 0x08;
 800118a:	2308      	movs	r3, #8
 800118c:	4698      	mov	r8, r3
 800118e:	7023      	strb	r3, [r4, #0]
    dwt_writetodevice(OTP_IF_ID, OTP_CTRL,1,wr_buf);
 8001190:	0023      	movs	r3, r4
 8001192:	2201      	movs	r2, #1
 8001194:	2106      	movs	r1, #6
 8001196:	202d      	movs	r0, #45	; 0x2d
 8001198:	f7ff fe74 	bl	8000e84 <dwt_writetodevice>

    // Wait?
    deca_sleep(2);
 800119c:	2002      	movs	r0, #2
 800119e:	f000 fd75 	bl	8001c8c <deca_sleep>

    // Set Clear Mode sel
    wr_buf[0] = 0x02;
 80011a2:	2302      	movs	r3, #2
 80011a4:	7023      	strb	r3, [r4, #0]
    dwt_writetodevice(OTP_IF_ID,OTP_CTRL+1,1,wr_buf);
 80011a6:	0023      	movs	r3, r4
 80011a8:	2201      	movs	r2, #1
 80011aa:	2107      	movs	r1, #7
 80011ac:	202d      	movs	r0, #45	; 0x2d
 80011ae:	f7ff fe69 	bl	8000e84 <dwt_writetodevice>

    // Set AUX update, write MR
    wr_buf[0] = 0x88;
 80011b2:	2388      	movs	r3, #136	; 0x88
 80011b4:	469a      	mov	sl, r3
 80011b6:	7023      	strb	r3, [r4, #0]
    dwt_writetodevice(OTP_IF_ID, OTP_CTRL,1,wr_buf);
 80011b8:	0023      	movs	r3, r4
 80011ba:	2201      	movs	r2, #1
 80011bc:	2106      	movs	r1, #6
 80011be:	202d      	movs	r0, #45	; 0x2d
 80011c0:	f7ff fe60 	bl	8000e84 <dwt_writetodevice>
    // Clear write MR
    wr_buf[0] = 0x80;
 80011c4:	2380      	movs	r3, #128	; 0x80
 80011c6:	4699      	mov	r9, r3
 80011c8:	7023      	strb	r3, [r4, #0]
    dwt_writetodevice(OTP_IF_ID, OTP_CTRL,1,wr_buf);
 80011ca:	0023      	movs	r3, r4
 80011cc:	2201      	movs	r2, #1
 80011ce:	2106      	movs	r1, #6
 80011d0:	202d      	movs	r0, #45	; 0x2d
 80011d2:	f7ff fe57 	bl	8000e84 <dwt_writetodevice>
    // Clear AUX update
    wr_buf[0] = 0x00;
 80011d6:	2700      	movs	r7, #0
 80011d8:	7027      	strb	r7, [r4, #0]
    dwt_writetodevice(OTP_IF_ID, OTP_CTRL,1,wr_buf);
 80011da:	0023      	movs	r3, r4
 80011dc:	2201      	movs	r2, #1
 80011de:	2106      	movs	r1, #6
 80011e0:	202d      	movs	r0, #45	; 0x2d
 80011e2:	f7ff fe4f 	bl	8000e84 <dwt_writetodevice>

    ///////////////////////////////////////////
    // PROGRAM MRB
    // Set SLOW, MRB, MODE_SEL
    wr_buf[0] = 0x05;
 80011e6:	2305      	movs	r3, #5
 80011e8:	7023      	strb	r3, [r4, #0]
    dwt_writetodevice(OTP_IF_ID,OTP_CTRL+1,1,wr_buf);
 80011ea:	0023      	movs	r3, r4
 80011ec:	2201      	movs	r2, #1
 80011ee:	2107      	movs	r1, #7
 80011f0:	202d      	movs	r0, #45	; 0x2d
 80011f2:	f7ff fe47 	bl	8000e84 <dwt_writetodevice>

    wr_buf[0] = mrb & 0x00ff;
 80011f6:	7026      	strb	r6, [r4, #0]
    wr_buf[1] = (mrb & 0xff00)>>8;
 80011f8:	0a36      	lsrs	r6, r6, #8
 80011fa:	7066      	strb	r6, [r4, #1]
    dwt_writetodevice(OTP_IF_ID, OTP_WDAT,2,wr_buf);
 80011fc:	0023      	movs	r3, r4
 80011fe:	2202      	movs	r2, #2
 8001200:	2100      	movs	r1, #0
 8001202:	202d      	movs	r0, #45	; 0x2d
 8001204:	f7ff fe3e 	bl	8000e84 <dwt_writetodevice>

    // Set WRITE_MR
    wr_buf[0] = 0x08;
 8001208:	4643      	mov	r3, r8
 800120a:	7023      	strb	r3, [r4, #0]
    dwt_writetodevice(OTP_IF_ID, OTP_CTRL,1,wr_buf);
 800120c:	0023      	movs	r3, r4
 800120e:	2201      	movs	r2, #1
 8001210:	2106      	movs	r1, #6
 8001212:	202d      	movs	r0, #45	; 0x2d
 8001214:	f7ff fe36 	bl	8000e84 <dwt_writetodevice>

    // Wait?
    deca_sleep(2);
 8001218:	2002      	movs	r0, #2
 800121a:	f000 fd37 	bl	8001c8c <deca_sleep>

    // Set Clear Mode sel
    wr_buf[0] = 0x04;
 800121e:	2304      	movs	r3, #4
 8001220:	7023      	strb	r3, [r4, #0]
    dwt_writetodevice(OTP_IF_ID,OTP_CTRL+1,1,wr_buf);
 8001222:	0023      	movs	r3, r4
 8001224:	2201      	movs	r2, #1
 8001226:	2107      	movs	r1, #7
 8001228:	202d      	movs	r0, #45	; 0x2d
 800122a:	f7ff fe2b 	bl	8000e84 <dwt_writetodevice>

    // Set AUX update, write MR
    wr_buf[0] = 0x88;
 800122e:	4653      	mov	r3, sl
 8001230:	7023      	strb	r3, [r4, #0]
    dwt_writetodevice(OTP_IF_ID, OTP_CTRL,1,wr_buf);
 8001232:	0023      	movs	r3, r4
 8001234:	2201      	movs	r2, #1
 8001236:	2106      	movs	r1, #6
 8001238:	202d      	movs	r0, #45	; 0x2d
 800123a:	f7ff fe23 	bl	8000e84 <dwt_writetodevice>
    // Clear write MR
    wr_buf[0] = 0x80;
 800123e:	464b      	mov	r3, r9
 8001240:	7023      	strb	r3, [r4, #0]
    dwt_writetodevice(OTP_IF_ID, OTP_CTRL,1,wr_buf);
 8001242:	0023      	movs	r3, r4
 8001244:	2201      	movs	r2, #1
 8001246:	2106      	movs	r1, #6
 8001248:	202d      	movs	r0, #45	; 0x2d
 800124a:	f7ff fe1b 	bl	8000e84 <dwt_writetodevice>
    // Clear AUX update
    wr_buf[0] = 0x00;
 800124e:	7027      	strb	r7, [r4, #0]
    dwt_writetodevice(OTP_IF_ID, OTP_CTRL,1,wr_buf);
 8001250:	0023      	movs	r3, r4
 8001252:	2201      	movs	r2, #1
 8001254:	2106      	movs	r1, #6
 8001256:	202d      	movs	r0, #45	; 0x2d
 8001258:	f7ff fe14 	bl	8000e84 <dwt_writetodevice>

    ///////////////////////////////////////////
    // PROGRAM MR
    // Set SLOW, MODE_SEL
    wr_buf[0] = 0x01;
 800125c:	2301      	movs	r3, #1
 800125e:	7023      	strb	r3, [r4, #0]
    dwt_writetodevice(OTP_IF_ID,OTP_CTRL+1,1,wr_buf);
 8001260:	0023      	movs	r3, r4
 8001262:	2201      	movs	r2, #1
 8001264:	2107      	movs	r1, #7
 8001266:	202d      	movs	r0, #45	; 0x2d
 8001268:	f7ff fe0c 	bl	8000e84 <dwt_writetodevice>
    // Load data

    wr_buf[0] = mr & 0x00ff;
 800126c:	7025      	strb	r5, [r4, #0]
    wr_buf[1] = (mr & 0xff00)>>8;
 800126e:	0a2d      	lsrs	r5, r5, #8
 8001270:	7065      	strb	r5, [r4, #1]
    dwt_writetodevice(OTP_IF_ID, OTP_WDAT,2,wr_buf);
 8001272:	0023      	movs	r3, r4
 8001274:	2202      	movs	r2, #2
 8001276:	2100      	movs	r1, #0
 8001278:	202d      	movs	r0, #45	; 0x2d
 800127a:	f7ff fe03 	bl	8000e84 <dwt_writetodevice>

    // Set WRITE_MR
    wr_buf[0] = 0x08;
 800127e:	4643      	mov	r3, r8
 8001280:	7023      	strb	r3, [r4, #0]
    dwt_writetodevice(OTP_IF_ID, OTP_CTRL,1,wr_buf);
 8001282:	0023      	movs	r3, r4
 8001284:	2201      	movs	r2, #1
 8001286:	2106      	movs	r1, #6
 8001288:	202d      	movs	r0, #45	; 0x2d
 800128a:	f7ff fdfb 	bl	8000e84 <dwt_writetodevice>

    // Wait?
    deca_sleep(2);
 800128e:	2002      	movs	r0, #2
 8001290:	f000 fcfc 	bl	8001c8c <deca_sleep>
    // Set Clear Mode sel
    wr_buf[0] = 0x00;
 8001294:	7027      	strb	r7, [r4, #0]
    dwt_writetodevice(OTP_IF_ID,OTP_CTRL+1,1,wr_buf);
 8001296:	0023      	movs	r3, r4
 8001298:	2201      	movs	r2, #1
 800129a:	2107      	movs	r1, #7
 800129c:	202d      	movs	r0, #45	; 0x2d
 800129e:	f7ff fdf1 	bl	8000e84 <dwt_writetodevice>

    return DWT_SUCCESS;
 80012a2:	2000      	movs	r0, #0
}
 80012a4:	b002      	add	sp, #8
 80012a6:	bce0      	pop	{r5, r6, r7}
 80012a8:	46ba      	mov	sl, r7
 80012aa:	46b1      	mov	r9, r6
 80012ac:	46a8      	mov	r8, r5
 80012ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
        mr =0x1824;
 80012b0:	4d0c      	ldr	r5, [pc, #48]	; (80012e4 <_dwt_otpsetmrregs+0x1a4>)
        mrb=0x0003;
 80012b2:	2603      	movs	r6, #3
        mra=0x9220;
 80012b4:	4b0c      	ldr	r3, [pc, #48]	; (80012e8 <_dwt_otpsetmrregs+0x1a8>)
        break;
 80012b6:	e75e      	b.n	8001176 <_dwt_otpsetmrregs+0x36>
        mr =0x1824;
 80012b8:	4d0a      	ldr	r5, [pc, #40]	; (80012e4 <_dwt_otpsetmrregs+0x1a4>)
        mrb=0x004e;
 80012ba:	264e      	movs	r6, #78	; 0x4e
        mra=0x9220;
 80012bc:	4b0a      	ldr	r3, [pc, #40]	; (80012e8 <_dwt_otpsetmrregs+0x1a8>)
        break;
 80012be:	e75a      	b.n	8001176 <_dwt_otpsetmrregs+0x36>
        mr =0x0000;
 80012c0:	2500      	movs	r5, #0
        mrb=0x0003;
 80012c2:	2603      	movs	r6, #3
        mra=0x0000;
 80012c4:	2300      	movs	r3, #0
        break;
 80012c6:	e756      	b.n	8001176 <_dwt_otpsetmrregs+0x36>
        mr =0x0024;
 80012c8:	2524      	movs	r5, #36	; 0x24
        mrb=0x0003;
 80012ca:	2603      	movs	r6, #3
        mra=0x0000;
 80012cc:	2300      	movs	r3, #0
        break;
 80012ce:	e752      	b.n	8001176 <_dwt_otpsetmrregs+0x36>
        mr =0x1024;
 80012d0:	4d06      	ldr	r5, [pc, #24]	; (80012ec <_dwt_otpsetmrregs+0x1ac>)
        mrb=0x000e;
 80012d2:	260e      	movs	r6, #14
        mra=0x9220; // Enable CPP mon
 80012d4:	4b04      	ldr	r3, [pc, #16]	; (80012e8 <_dwt_otpsetmrregs+0x1a8>)
 80012d6:	e74e      	b.n	8001176 <_dwt_otpsetmrregs+0x36>
    switch(mode&0x0f) {
 80012d8:	2001      	movs	r0, #1
 80012da:	4240      	negs	r0, r0
 80012dc:	e7e2      	b.n	80012a4 <_dwt_otpsetmrregs+0x164>
 80012de:	46c0      	nop			; (mov r8, r8)
 80012e0:	08004dc4 	.word	0x08004dc4
 80012e4:	00001824 	.word	0x00001824
 80012e8:	00009220 	.word	0x00009220
 80012ec:	00001024 	.word	0x00001024

080012f0 <_dwt_aonarrayupload>:
 * output parameters
 *
 * no return value
 */
void _dwt_aonarrayupload(void)
{
 80012f0:	b510      	push	{r4, lr}
    dwt_write8bitoffsetreg(AON_ID, AON_CTRL_OFFSET, 0x00); // Clear the register
 80012f2:	2200      	movs	r2, #0
 80012f4:	2102      	movs	r1, #2
 80012f6:	202c      	movs	r0, #44	; 0x2c
 80012f8:	f7ff fea9 	bl	800104e <dwt_write8bitoffsetreg>
    dwt_write8bitoffsetreg(AON_ID, AON_CTRL_OFFSET, AON_CTRL_SAVE);
 80012fc:	2202      	movs	r2, #2
 80012fe:	2102      	movs	r1, #2
 8001300:	202c      	movs	r0, #44	; 0x2c
 8001302:	f7ff fea4 	bl	800104e <dwt_write8bitoffsetreg>
}
 8001306:	bd10      	pop	{r4, pc}

08001308 <_dwt_configlde>:
 * output parameters
 *
 * no return value
 */
void _dwt_configlde(int prfIndex)
{
 8001308:	b510      	push	{r4, lr}
 800130a:	0004      	movs	r4, r0
    dwt_write8bitoffsetreg(LDE_IF_ID, LDE_CFG1_OFFSET, LDE_PARAM1); // 8-bit configuration register
 800130c:	226d      	movs	r2, #109	; 0x6d
 800130e:	4909      	ldr	r1, [pc, #36]	; (8001334 <_dwt_configlde+0x2c>)
 8001310:	202e      	movs	r0, #46	; 0x2e
 8001312:	f7ff fe9c 	bl	800104e <dwt_write8bitoffsetreg>

    if(prfIndex)
 8001316:	2c00      	cmp	r4, #0
 8001318:	d005      	beq.n	8001326 <_dwt_configlde+0x1e>
    {
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_64); // 16-bit LDE configuration tuning register
 800131a:	4a07      	ldr	r2, [pc, #28]	; (8001338 <_dwt_configlde+0x30>)
 800131c:	4907      	ldr	r1, [pc, #28]	; (800133c <_dwt_configlde+0x34>)
 800131e:	202e      	movs	r0, #46	; 0x2e
 8001320:	f7ff feb6 	bl	8001090 <dwt_write16bitoffsetreg>
    }
    else
    {
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_16);
    }
}
 8001324:	bd10      	pop	{r4, pc}
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_16);
 8001326:	4a06      	ldr	r2, [pc, #24]	; (8001340 <_dwt_configlde+0x38>)
 8001328:	4904      	ldr	r1, [pc, #16]	; (800133c <_dwt_configlde+0x34>)
 800132a:	202e      	movs	r0, #46	; 0x2e
 800132c:	f7ff feb0 	bl	8001090 <dwt_write16bitoffsetreg>
}
 8001330:	e7f8      	b.n	8001324 <_dwt_configlde+0x1c>
 8001332:	46c0      	nop			; (mov r8, r8)
 8001334:	00000806 	.word	0x00000806
 8001338:	00000607 	.word	0x00000607
 800133c:	00001806 	.word	0x00001806
 8001340:	00001607 	.word	0x00001607

08001344 <dwt_configure>:
{
 8001344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001346:	46ce      	mov	lr, r9
 8001348:	4647      	mov	r7, r8
 800134a:	b580      	push	{r7, lr}
 800134c:	0004      	movs	r4, r0
    uint8 chan = config->chan ;
 800134e:	7806      	ldrb	r6, [r0, #0]
    uint16 reg16 = lde_replicaCoeff[config->rxCode];
 8001350:	7943      	ldrb	r3, [r0, #5]
 8001352:	005b      	lsls	r3, r3, #1
 8001354:	4a7e      	ldr	r2, [pc, #504]	; (8001550 <dwt_configure+0x20c>)
 8001356:	5a9f      	ldrh	r7, [r3, r2]
    uint8 prfIndex = config->prf - DWT_PRF_16M;
 8001358:	7845      	ldrb	r5, [r0, #1]
 800135a:	3d01      	subs	r5, #1
 800135c:	b2ed      	uxtb	r5, r5
    uint8 bw = ((chan == 4) || (chan == 7)) ? 1 : 0 ; // Select wide or narrow band
 800135e:	2e04      	cmp	r6, #4
 8001360:	d100      	bne.n	8001364 <dwt_configure+0x20>
 8001362:	e0cf      	b.n	8001504 <dwt_configure+0x1c0>
 8001364:	2e07      	cmp	r6, #7
 8001366:	d100      	bne.n	800136a <dwt_configure+0x26>
 8001368:	e0c9      	b.n	80014fe <dwt_configure+0x1ba>
 800136a:	2300      	movs	r3, #0
 800136c:	4698      	mov	r8, r3
    if(DWT_BR_110K == config->dataRate)
 800136e:	79e3      	ldrb	r3, [r4, #7]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d000      	beq.n	8001376 <dwt_configure+0x32>
 8001374:	e0c9      	b.n	800150a <dwt_configure+0x1c6>
        pdw1000local->sysCFGreg |= SYS_CFG_RXM110K ;
 8001376:	4b77      	ldr	r3, [pc, #476]	; (8001554 <dwt_configure+0x210>)
 8001378:	681a      	ldr	r2, [r3, #0]
 800137a:	2380      	movs	r3, #128	; 0x80
 800137c:	03db      	lsls	r3, r3, #15
 800137e:	6911      	ldr	r1, [r2, #16]
 8001380:	430b      	orrs	r3, r1
 8001382:	6113      	str	r3, [r2, #16]
        reg16 >>= 3; // lde_replicaCoeff must be divided by 8
 8001384:	08ff      	lsrs	r7, r7, #3
    pdw1000local->longFrames = config->phrMode ;
 8001386:	4b73      	ldr	r3, [pc, #460]	; (8001554 <dwt_configure+0x210>)
 8001388:	6819      	ldr	r1, [r3, #0]
 800138a:	7a23      	ldrb	r3, [r4, #8]
 800138c:	728b      	strb	r3, [r1, #10]
    pdw1000local->sysCFGreg &= ~SYS_CFG_PHR_MODE_11;
 800138e:	4a72      	ldr	r2, [pc, #456]	; (8001558 <dwt_configure+0x214>)
 8001390:	690b      	ldr	r3, [r1, #16]
 8001392:	401a      	ands	r2, r3
 8001394:	610a      	str	r2, [r1, #16]
    pdw1000local->sysCFGreg |= (SYS_CFG_PHR_MODE_11 & ((uint32)config->phrMode << SYS_CFG_PHR_MODE_SHFT));
 8001396:	7a23      	ldrb	r3, [r4, #8]
 8001398:	041b      	lsls	r3, r3, #16
 800139a:	20c0      	movs	r0, #192	; 0xc0
 800139c:	0280      	lsls	r0, r0, #10
 800139e:	4003      	ands	r3, r0
 80013a0:	431a      	orrs	r2, r3
 80013a2:	610a      	str	r2, [r1, #16]
    dwt_write32bitreg(SYS_CFG_ID,pdw1000local->sysCFGreg) ;
 80013a4:	2100      	movs	r1, #0
 80013a6:	2004      	movs	r0, #4
 80013a8:	f7ff fe91 	bl	80010ce <dwt_write32bitoffsetreg>
    dwt_write16bitoffsetreg(LDE_IF_ID, LDE_REPC_OFFSET, reg16) ;
 80013ac:	003a      	movs	r2, r7
 80013ae:	496b      	ldr	r1, [pc, #428]	; (800155c <dwt_configure+0x218>)
 80013b0:	202e      	movs	r0, #46	; 0x2e
 80013b2:	f7ff fe6d 	bl	8001090 <dwt_write16bitoffsetreg>
    _dwt_configlde(prfIndex);
 80013b6:	0028      	movs	r0, r5
 80013b8:	f7ff ffa6 	bl	8001308 <_dwt_configlde>
    dwt_write32bitoffsetreg(FS_CTRL_ID, FS_PLLCFG_OFFSET, fs_pll_cfg[chan_idx[chan]]);
 80013bc:	4b68      	ldr	r3, [pc, #416]	; (8001560 <dwt_configure+0x21c>)
 80013be:	5d9b      	ldrb	r3, [r3, r6]
 80013c0:	4699      	mov	r9, r3
 80013c2:	009f      	lsls	r7, r3, #2
 80013c4:	4b67      	ldr	r3, [pc, #412]	; (8001564 <dwt_configure+0x220>)
 80013c6:	58fa      	ldr	r2, [r7, r3]
 80013c8:	2107      	movs	r1, #7
 80013ca:	202b      	movs	r0, #43	; 0x2b
 80013cc:	f7ff fe7f 	bl	80010ce <dwt_write32bitoffsetreg>
    dwt_write8bitoffsetreg(FS_CTRL_ID, FS_PLLTUNE_OFFSET, fs_pll_tune[chan_idx[chan]]);
 80013d0:	4b65      	ldr	r3, [pc, #404]	; (8001568 <dwt_configure+0x224>)
 80013d2:	464a      	mov	r2, r9
 80013d4:	5c9a      	ldrb	r2, [r3, r2]
 80013d6:	210b      	movs	r1, #11
 80013d8:	202b      	movs	r0, #43	; 0x2b
 80013da:	f7ff fe38 	bl	800104e <dwt_write8bitoffsetreg>
    dwt_write8bitoffsetreg(RF_CONF_ID, RF_RXCTRLH_OFFSET, rx_config[bw]);
 80013de:	4b63      	ldr	r3, [pc, #396]	; (800156c <dwt_configure+0x228>)
 80013e0:	4642      	mov	r2, r8
 80013e2:	5c9a      	ldrb	r2, [r3, r2]
 80013e4:	210b      	movs	r1, #11
 80013e6:	2028      	movs	r0, #40	; 0x28
 80013e8:	f7ff fe31 	bl	800104e <dwt_write8bitoffsetreg>
    dwt_write32bitoffsetreg(RF_CONF_ID, RF_TXCTRL_OFFSET, tx_config[chan_idx[chan]]);
 80013ec:	4b60      	ldr	r3, [pc, #384]	; (8001570 <dwt_configure+0x22c>)
 80013ee:	58fa      	ldr	r2, [r7, r3]
 80013f0:	210c      	movs	r1, #12
 80013f2:	2028      	movs	r0, #40	; 0x28
 80013f4:	f7ff fe6b 	bl	80010ce <dwt_write32bitoffsetreg>
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE0b_OFFSET, sftsh[config->dataRate][config->nsSFD]);
 80013f8:	79e3      	ldrb	r3, [r4, #7]
 80013fa:	79a2      	ldrb	r2, [r4, #6]
 80013fc:	005b      	lsls	r3, r3, #1
 80013fe:	189b      	adds	r3, r3, r2
 8001400:	005b      	lsls	r3, r3, #1
 8001402:	4a5c      	ldr	r2, [pc, #368]	; (8001574 <dwt_configure+0x230>)
 8001404:	5a9a      	ldrh	r2, [r3, r2]
 8001406:	2102      	movs	r1, #2
 8001408:	2027      	movs	r0, #39	; 0x27
 800140a:	f7ff fe41 	bl	8001090 <dwt_write16bitoffsetreg>
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1a_OFFSET, dtune1[prfIndex]);
 800140e:	006b      	lsls	r3, r5, #1
 8001410:	4a59      	ldr	r2, [pc, #356]	; (8001578 <dwt_configure+0x234>)
 8001412:	5a9a      	ldrh	r2, [r3, r2]
 8001414:	2104      	movs	r1, #4
 8001416:	2027      	movs	r0, #39	; 0x27
 8001418:	f7ff fe3a 	bl	8001090 <dwt_write16bitoffsetreg>
    if(config->dataRate == DWT_BR_110K)
 800141c:	79e3      	ldrb	r3, [r4, #7]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d100      	bne.n	8001424 <dwt_configure+0xe0>
 8001422:	e079      	b.n	8001518 <dwt_configure+0x1d4>
        if(config->txPreambLength == DWT_PLEN_64)
 8001424:	78a3      	ldrb	r3, [r4, #2]
 8001426:	2b04      	cmp	r3, #4
 8001428:	d100      	bne.n	800142c <dwt_configure+0xe8>
 800142a:	e07b      	b.n	8001524 <dwt_configure+0x1e0>
            dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_850K_6M8);
 800142c:	2220      	movs	r2, #32
 800142e:	2106      	movs	r1, #6
 8001430:	2027      	movs	r0, #39	; 0x27
 8001432:	f7ff fe2d 	bl	8001090 <dwt_write16bitoffsetreg>
            dwt_write8bitoffsetreg(DRX_CONF_ID, DRX_TUNE4H_OFFSET, DRX_TUNE4H_PRE128PLUS);
 8001436:	2228      	movs	r2, #40	; 0x28
 8001438:	2126      	movs	r1, #38	; 0x26
 800143a:	2027      	movs	r0, #39	; 0x27
 800143c:	f7ff fe07 	bl	800104e <dwt_write8bitoffsetreg>
    dwt_write32bitoffsetreg(DRX_CONF_ID, DRX_TUNE2_OFFSET, digital_bb_config[prfIndex][config->rxPAC]);
 8001440:	78e2      	ldrb	r2, [r4, #3]
 8001442:	00ab      	lsls	r3, r5, #2
 8001444:	189b      	adds	r3, r3, r2
 8001446:	009b      	lsls	r3, r3, #2
 8001448:	4a4c      	ldr	r2, [pc, #304]	; (800157c <dwt_configure+0x238>)
 800144a:	589a      	ldr	r2, [r3, r2]
 800144c:	2108      	movs	r1, #8
 800144e:	2027      	movs	r0, #39	; 0x27
 8001450:	f7ff fe3d 	bl	80010ce <dwt_write32bitoffsetreg>
    if(config->sfdTO == 0)
 8001454:	8963      	ldrh	r3, [r4, #10]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d101      	bne.n	800145e <dwt_configure+0x11a>
        config->sfdTO = DWT_SFDTOC_DEF;
 800145a:	4b49      	ldr	r3, [pc, #292]	; (8001580 <dwt_configure+0x23c>)
 800145c:	8163      	strh	r3, [r4, #10]
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_SFDTOC_OFFSET, config->sfdTO);
 800145e:	8962      	ldrh	r2, [r4, #10]
 8001460:	2120      	movs	r1, #32
 8001462:	2027      	movs	r0, #39	; 0x27
 8001464:	f7ff fe14 	bl	8001090 <dwt_write16bitoffsetreg>
    dwt_write32bitoffsetreg( AGC_CFG_STS_ID, 0xC, agc_config.lo32);
 8001468:	4f46      	ldr	r7, [pc, #280]	; (8001584 <dwt_configure+0x240>)
 800146a:	683a      	ldr	r2, [r7, #0]
 800146c:	210c      	movs	r1, #12
 800146e:	2023      	movs	r0, #35	; 0x23
 8001470:	f7ff fe2d 	bl	80010ce <dwt_write32bitoffsetreg>
    dwt_write16bitoffsetreg( AGC_CFG_STS_ID, 0x4, agc_config.target[prfIndex]);
 8001474:	006d      	lsls	r5, r5, #1
 8001476:	197d      	adds	r5, r7, r5
 8001478:	88aa      	ldrh	r2, [r5, #4]
 800147a:	2104      	movs	r1, #4
 800147c:	2023      	movs	r0, #35	; 0x23
 800147e:	f7ff fe07 	bl	8001090 <dwt_write16bitoffsetreg>
    if(config->nsSFD)
 8001482:	79a3      	ldrb	r3, [r4, #6]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d158      	bne.n	800153a <dwt_configure+0x1f6>
    uint8 useDWnsSFD = 0;
 8001488:	0019      	movs	r1, r3
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 800148a:	220f      	movs	r2, #15
 800148c:	4032      	ands	r2, r6
              (CHAN_CTRL_RX_CHAN_MASK & (chan << CHAN_CTRL_RX_CHAN_SHIFT)) | // Receive Channel
 800148e:	0136      	lsls	r6, r6, #4
 8001490:	20ff      	movs	r0, #255	; 0xff
 8001492:	4006      	ands	r6, r0
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 8001494:	4332      	orrs	r2, r6
              (CHAN_CTRL_RXFPRF_MASK & ((uint32)config->prf << CHAN_CTRL_RXFPRF_SHIFT)) | // RX PRF
 8001496:	7860      	ldrb	r0, [r4, #1]
 8001498:	0480      	lsls	r0, r0, #18
 800149a:	25c0      	movs	r5, #192	; 0xc0
 800149c:	032d      	lsls	r5, r5, #12
 800149e:	4028      	ands	r0, r5
              (CHAN_CTRL_RX_CHAN_MASK & (chan << CHAN_CTRL_RX_CHAN_SHIFT)) | // Receive Channel
 80014a0:	4302      	orrs	r2, r0
              ((CHAN_CTRL_TNSSFD|CHAN_CTRL_RNSSFD) & ((uint32)nsSfd_result << CHAN_CTRL_TNSSFD_SHIFT)) | // nsSFD enable RX&TX
 80014a2:	051b      	lsls	r3, r3, #20
 80014a4:	20c0      	movs	r0, #192	; 0xc0
 80014a6:	0380      	lsls	r0, r0, #14
 80014a8:	4003      	ands	r3, r0
              (CHAN_CTRL_RXFPRF_MASK & ((uint32)config->prf << CHAN_CTRL_RXFPRF_SHIFT)) | // RX PRF
 80014aa:	431a      	orrs	r2, r3
              (CHAN_CTRL_DWSFD & ((uint32)useDWnsSFD << CHAN_CTRL_DWSFD_SHIFT)) | // Use DW nsSFD
 80014ac:	044b      	lsls	r3, r1, #17
 80014ae:	2180      	movs	r1, #128	; 0x80
 80014b0:	0289      	lsls	r1, r1, #10
 80014b2:	400b      	ands	r3, r1
              ((CHAN_CTRL_TNSSFD|CHAN_CTRL_RNSSFD) & ((uint32)nsSfd_result << CHAN_CTRL_TNSSFD_SHIFT)) | // nsSFD enable RX&TX
 80014b4:	431a      	orrs	r2, r3
              (CHAN_CTRL_TX_PCOD_MASK & ((uint32)config->txCode << CHAN_CTRL_TX_PCOD_SHIFT)) | // TX Preamble Code
 80014b6:	7923      	ldrb	r3, [r4, #4]
 80014b8:	059b      	lsls	r3, r3, #22
 80014ba:	21f8      	movs	r1, #248	; 0xf8
 80014bc:	04c9      	lsls	r1, r1, #19
 80014be:	400b      	ands	r3, r1
              (CHAN_CTRL_DWSFD & ((uint32)useDWnsSFD << CHAN_CTRL_DWSFD_SHIFT)) | // Use DW nsSFD
 80014c0:	431a      	orrs	r2, r3
              (CHAN_CTRL_RX_PCOD_MASK & ((uint32)config->rxCode << CHAN_CTRL_RX_PCOD_SHIFT)) ; // RX Preamble Code
 80014c2:	7963      	ldrb	r3, [r4, #5]
 80014c4:	06db      	lsls	r3, r3, #27
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 80014c6:	431a      	orrs	r2, r3
    dwt_write32bitreg(CHAN_CTRL_ID,regval) ;
 80014c8:	2100      	movs	r1, #0
 80014ca:	201f      	movs	r0, #31
 80014cc:	f7ff fdff 	bl	80010ce <dwt_write32bitoffsetreg>
    pdw1000local->txFCTRL = ((uint32)(config->txPreambLength | config->prf) << TX_FCTRL_TXPRF_SHFT) | ((uint32)config->dataRate << TX_FCTRL_TXBR_SHFT);
 80014d0:	78a2      	ldrb	r2, [r4, #2]
 80014d2:	7863      	ldrb	r3, [r4, #1]
 80014d4:	431a      	orrs	r2, r3
 80014d6:	0412      	lsls	r2, r2, #16
 80014d8:	79e3      	ldrb	r3, [r4, #7]
 80014da:	035b      	lsls	r3, r3, #13
 80014dc:	491d      	ldr	r1, [pc, #116]	; (8001554 <dwt_configure+0x210>)
 80014de:	6809      	ldr	r1, [r1, #0]
 80014e0:	431a      	orrs	r2, r3
 80014e2:	60ca      	str	r2, [r1, #12]
    dwt_write32bitreg(TX_FCTRL_ID, pdw1000local->txFCTRL);
 80014e4:	2100      	movs	r1, #0
 80014e6:	2008      	movs	r0, #8
 80014e8:	f7ff fdf1 	bl	80010ce <dwt_write32bitoffsetreg>
    dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, SYS_CTRL_TXSTRT | SYS_CTRL_TRXOFF); // Request TX start and TRX off at the same time
 80014ec:	2242      	movs	r2, #66	; 0x42
 80014ee:	2100      	movs	r1, #0
 80014f0:	200d      	movs	r0, #13
 80014f2:	f7ff fdac 	bl	800104e <dwt_write8bitoffsetreg>
} // end dwt_configure()
 80014f6:	bcc0      	pop	{r6, r7}
 80014f8:	46b9      	mov	r9, r7
 80014fa:	46b0      	mov	r8, r6
 80014fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    uint8 bw = ((chan == 4) || (chan == 7)) ? 1 : 0 ; // Select wide or narrow band
 80014fe:	2301      	movs	r3, #1
 8001500:	4698      	mov	r8, r3
 8001502:	e734      	b.n	800136e <dwt_configure+0x2a>
 8001504:	2301      	movs	r3, #1
 8001506:	4698      	mov	r8, r3
 8001508:	e731      	b.n	800136e <dwt_configure+0x2a>
        pdw1000local->sysCFGreg &= (~SYS_CFG_RXM110K) ;
 800150a:	4b12      	ldr	r3, [pc, #72]	; (8001554 <dwt_configure+0x210>)
 800150c:	681a      	ldr	r2, [r3, #0]
 800150e:	4b1e      	ldr	r3, [pc, #120]	; (8001588 <dwt_configure+0x244>)
 8001510:	6911      	ldr	r1, [r2, #16]
 8001512:	400b      	ands	r3, r1
 8001514:	6113      	str	r3, [r2, #16]
 8001516:	e736      	b.n	8001386 <dwt_configure+0x42>
        dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_110K);
 8001518:	2264      	movs	r2, #100	; 0x64
 800151a:	2106      	movs	r1, #6
 800151c:	2027      	movs	r0, #39	; 0x27
 800151e:	f7ff fdb7 	bl	8001090 <dwt_write16bitoffsetreg>
 8001522:	e78d      	b.n	8001440 <dwt_configure+0xfc>
            dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_6M8_PRE64);
 8001524:	2210      	movs	r2, #16
 8001526:	2106      	movs	r1, #6
 8001528:	2027      	movs	r0, #39	; 0x27
 800152a:	f7ff fdb1 	bl	8001090 <dwt_write16bitoffsetreg>
            dwt_write8bitoffsetreg(DRX_CONF_ID, DRX_TUNE4H_OFFSET, DRX_TUNE4H_PRE64);
 800152e:	2210      	movs	r2, #16
 8001530:	2126      	movs	r1, #38	; 0x26
 8001532:	2027      	movs	r0, #39	; 0x27
 8001534:	f7ff fd8b 	bl	800104e <dwt_write8bitoffsetreg>
 8001538:	e782      	b.n	8001440 <dwt_configure+0xfc>
        dwt_write8bitoffsetreg(USR_SFD_ID, 0x00, dwnsSFDlen[config->dataRate]);
 800153a:	79e3      	ldrb	r3, [r4, #7]
 800153c:	4a13      	ldr	r2, [pc, #76]	; (800158c <dwt_configure+0x248>)
 800153e:	5cd2      	ldrb	r2, [r2, r3]
 8001540:	2100      	movs	r1, #0
 8001542:	2021      	movs	r0, #33	; 0x21
 8001544:	f7ff fd83 	bl	800104e <dwt_write8bitoffsetreg>
        useDWnsSFD = 1 ;
 8001548:	2101      	movs	r1, #1
        nsSfd_result = 3 ;
 800154a:	2303      	movs	r3, #3
 800154c:	e79d      	b.n	800148a <dwt_configure+0x146>
 800154e:	46c0      	nop			; (mov r8, r8)
 8001550:	08004e18 	.word	0x08004e18
 8001554:	20000000 	.word	0x20000000
 8001558:	fffcffff 	.word	0xfffcffff
 800155c:	00002804 	.word	0x00002804
 8001560:	08004ec4 	.word	0x08004ec4
 8001564:	08004e94 	.word	0x08004e94
 8001568:	08004e8c 	.word	0x08004e8c
 800156c:	08004e88 	.word	0x08004e88
 8001570:	08004eac 	.word	0x08004eac
 8001574:	08004e70 	.word	0x08004e70
 8001578:	08004e6c 	.word	0x08004e6c
 800157c:	08004e4c 	.word	0x08004e4c
 8001580:	00001041 	.word	0x00001041
 8001584:	08004e80 	.word	0x08004e80
 8001588:	ffbfffff 	.word	0xffbfffff
 800158c:	08004e7c 	.word	0x08004e7c

08001590 <dwt_setrxaftertxdelay>:
 * output parameters
 *
 * no return value
 */
void dwt_setrxaftertxdelay(uint32 rxDelayTime)
{
 8001590:	b510      	push	{r4, lr}
 8001592:	0004      	movs	r4, r0
    uint32 val = dwt_read32bitreg(ACK_RESP_T_ID) ; // Read ACK_RESP_T_ID register
 8001594:	2100      	movs	r1, #0
 8001596:	201a      	movs	r0, #26
 8001598:	f7ff fcf8 	bl	8000f8c <dwt_read32bitoffsetreg>

    val &= ~(ACK_RESP_T_W4R_TIM_MASK) ; // Clear the timer (19:0)
 800159c:	0d00      	lsrs	r0, r0, #20
 800159e:	0500      	lsls	r0, r0, #20

    val |= (rxDelayTime & ACK_RESP_T_W4R_TIM_MASK) ; // In UWB microseconds (e.g. turn the receiver on 20uus after TX)
 80015a0:	0322      	lsls	r2, r4, #12
 80015a2:	0b12      	lsrs	r2, r2, #12
 80015a4:	4302      	orrs	r2, r0

    dwt_write32bitreg(ACK_RESP_T_ID, val) ;
 80015a6:	2100      	movs	r1, #0
 80015a8:	201a      	movs	r0, #26
 80015aa:	f7ff fd90 	bl	80010ce <dwt_write32bitoffsetreg>
}
 80015ae:	bd10      	pop	{r4, pc}

080015b0 <dwt_setleds>:
 * output parameters none
 *
 * no return value
 */
void dwt_setleds(uint8 mode)
{
 80015b0:	b570      	push	{r4, r5, r6, lr}
 80015b2:	0004      	movs	r4, r0
    uint32 reg;

    if (mode & DWT_LEDS_ENABLE)
 80015b4:	07c3      	lsls	r3, r0, #31
 80015b6:	d52e      	bpl.n	8001616 <dwt_setleds+0x66>
    {
        // Set up MFIO for LED output.
        reg = dwt_read32bitoffsetreg(GPIO_CTRL_ID, GPIO_MODE_OFFSET);
 80015b8:	2100      	movs	r1, #0
 80015ba:	2026      	movs	r0, #38	; 0x26
 80015bc:	f7ff fce6 	bl	8000f8c <dwt_read32bitoffsetreg>
        reg &= ~(GPIO_MSGP2_MASK | GPIO_MSGP3_MASK);
 80015c0:	4a1a      	ldr	r2, [pc, #104]	; (800162c <dwt_setleds+0x7c>)
 80015c2:	4010      	ands	r0, r2
        reg |= (GPIO_PIN2_RXLED | GPIO_PIN3_TXLED);
 80015c4:	22a0      	movs	r2, #160	; 0xa0
 80015c6:	0152      	lsls	r2, r2, #5
 80015c8:	4302      	orrs	r2, r0
        dwt_write32bitoffsetreg(GPIO_CTRL_ID, GPIO_MODE_OFFSET, reg);
 80015ca:	2100      	movs	r1, #0
 80015cc:	2026      	movs	r0, #38	; 0x26
 80015ce:	f7ff fd7e 	bl	80010ce <dwt_write32bitoffsetreg>

        // Enable LP Oscillator to run from counter and turn on de-bounce clock.
        reg = dwt_read32bitoffsetreg(PMSC_ID, PMSC_CTRL0_OFFSET);
 80015d2:	2100      	movs	r1, #0
 80015d4:	2036      	movs	r0, #54	; 0x36
 80015d6:	f7ff fcd9 	bl	8000f8c <dwt_read32bitoffsetreg>
        reg |= (PMSC_CTRL0_GPDCE | PMSC_CTRL0_KHZCLEN);
 80015da:	2284      	movs	r2, #132	; 0x84
 80015dc:	0412      	lsls	r2, r2, #16
 80015de:	4302      	orrs	r2, r0
        dwt_write32bitoffsetreg(PMSC_ID, PMSC_CTRL0_OFFSET, reg);
 80015e0:	2100      	movs	r1, #0
 80015e2:	2036      	movs	r0, #54	; 0x36
 80015e4:	f7ff fd73 	bl	80010ce <dwt_write32bitoffsetreg>

        // Enable LEDs to blink and set default blink time.
        reg = PMSC_LEDC_BLNKEN | PMSC_LEDC_BLINK_TIME_DEF;
        // Make LEDs blink once if requested.
        if (mode & DWT_LEDS_INIT_BLINK)
 80015e8:	2302      	movs	r3, #2
 80015ea:	001d      	movs	r5, r3
 80015ec:	4025      	ands	r5, r4
 80015ee:	4223      	tst	r3, r4
 80015f0:	d10f      	bne.n	8001612 <dwt_setleds+0x62>
        reg = PMSC_LEDC_BLNKEN | PMSC_LEDC_BLINK_TIME_DEF;
 80015f2:	2488      	movs	r4, #136	; 0x88
 80015f4:	0064      	lsls	r4, r4, #1
        {
            reg |= PMSC_LEDC_BLINK_NOW_ALL;
        }
        dwt_write32bitoffsetreg(PMSC_ID, PMSC_LEDC_OFFSET, reg);
 80015f6:	0022      	movs	r2, r4
 80015f8:	2128      	movs	r1, #40	; 0x28
 80015fa:	2036      	movs	r0, #54	; 0x36
 80015fc:	f7ff fd67 	bl	80010ce <dwt_write32bitoffsetreg>
        // Clear force blink bits if needed.
        if(mode & DWT_LEDS_INIT_BLINK)
 8001600:	2d00      	cmp	r5, #0
 8001602:	d012      	beq.n	800162a <dwt_setleds+0x7a>
        {
            reg &= ~PMSC_LEDC_BLINK_NOW_ALL;
 8001604:	4a0a      	ldr	r2, [pc, #40]	; (8001630 <dwt_setleds+0x80>)
 8001606:	4022      	ands	r2, r4
            dwt_write32bitoffsetreg(PMSC_ID, PMSC_LEDC_OFFSET, reg);
 8001608:	2128      	movs	r1, #40	; 0x28
 800160a:	2036      	movs	r0, #54	; 0x36
 800160c:	f7ff fd5f 	bl	80010ce <dwt_write32bitoffsetreg>
 8001610:	e00b      	b.n	800162a <dwt_setleds+0x7a>
            reg |= PMSC_LEDC_BLINK_NOW_ALL;
 8001612:	4c08      	ldr	r4, [pc, #32]	; (8001634 <dwt_setleds+0x84>)
 8001614:	e7ef      	b.n	80015f6 <dwt_setleds+0x46>
        }
    }
    else
    {
        // Clear the GPIO bits that are used for LED control.
        reg = dwt_read32bitoffsetreg(GPIO_CTRL_ID, GPIO_MODE_OFFSET);
 8001616:	2100      	movs	r1, #0
 8001618:	2026      	movs	r0, #38	; 0x26
 800161a:	f7ff fcb7 	bl	8000f8c <dwt_read32bitoffsetreg>
        reg &= ~(GPIO_MSGP2_MASK | GPIO_MSGP3_MASK);
 800161e:	4a03      	ldr	r2, [pc, #12]	; (800162c <dwt_setleds+0x7c>)
 8001620:	4002      	ands	r2, r0
        dwt_write32bitoffsetreg(GPIO_CTRL_ID, GPIO_MODE_OFFSET, reg);
 8001622:	2100      	movs	r1, #0
 8001624:	2026      	movs	r0, #38	; 0x26
 8001626:	f7ff fd52 	bl	80010ce <dwt_write32bitoffsetreg>
    }
}
 800162a:	bd70      	pop	{r4, r5, r6, pc}
 800162c:	ffffc3ff 	.word	0xffffc3ff
 8001630:	fff0ffff 	.word	0xfff0ffff
 8001634:	000f0110 	.word	0x000f0110

08001638 <_dwt_enableclocks>:
 * output parameters none
 *
 * no return value
 */
void _dwt_enableclocks(int clocks)
{
 8001638:	b510      	push	{r4, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	0004      	movs	r4, r0
    uint8 reg[2];

    dwt_readfromdevice(PMSC_ID, PMSC_CTRL0_OFFSET, 2, reg);
 800163e:	ab01      	add	r3, sp, #4
 8001640:	2202      	movs	r2, #2
 8001642:	2100      	movs	r1, #0
 8001644:	2036      	movs	r0, #54	; 0x36
 8001646:	f7ff fc51 	bl	8000eec <dwt_readfromdevice>
    switch(clocks)
 800164a:	2c0e      	cmp	r4, #14
 800164c:	d80a      	bhi.n	8001664 <_dwt_enableclocks+0x2c>
 800164e:	00a4      	lsls	r4, r4, #2
 8001650:	4b2e      	ldr	r3, [pc, #184]	; (800170c <_dwt_enableclocks+0xd4>)
 8001652:	591b      	ldr	r3, [r3, r4]
 8001654:	469f      	mov	pc, r3
    {
        case ENABLE_ALL_SEQ:
        {
            reg[0] = 0x00 ;
 8001656:	ab01      	add	r3, sp, #4
 8001658:	2200      	movs	r2, #0
 800165a:	701a      	strb	r2, [r3, #0]
            reg[1] = reg[1] & 0xfe;
 800165c:	785a      	ldrb	r2, [r3, #1]
 800165e:	2101      	movs	r1, #1
 8001660:	438a      	bics	r2, r1
 8001662:	705a      	strb	r2, [r3, #1]
        break;
    }


    // Need to write lower byte separately before setting the higher byte(s)
    dwt_writetodevice(PMSC_ID, PMSC_CTRL0_OFFSET, 1, &reg[0]);
 8001664:	ab01      	add	r3, sp, #4
 8001666:	2201      	movs	r2, #1
 8001668:	2100      	movs	r1, #0
 800166a:	2036      	movs	r0, #54	; 0x36
 800166c:	f7ff fc0a 	bl	8000e84 <dwt_writetodevice>
    dwt_writetodevice(PMSC_ID, 0x1, 1, &reg[1]);
 8001670:	466b      	mov	r3, sp
 8001672:	3305      	adds	r3, #5
 8001674:	2201      	movs	r2, #1
 8001676:	2101      	movs	r1, #1
 8001678:	2036      	movs	r0, #54	; 0x36
 800167a:	f7ff fc03 	bl	8000e84 <dwt_writetodevice>

} // end _dwt_enableclocks()
 800167e:	b002      	add	sp, #8
 8001680:	bd10      	pop	{r4, pc}
            reg[0] = 0x01 | (reg[0] & 0xfc);
 8001682:	aa01      	add	r2, sp, #4
 8001684:	2300      	movs	r3, #0
 8001686:	56d3      	ldrsb	r3, [r2, r3]
 8001688:	2103      	movs	r1, #3
 800168a:	438b      	bics	r3, r1
 800168c:	2101      	movs	r1, #1
 800168e:	430b      	orrs	r3, r1
 8001690:	7013      	strb	r3, [r2, #0]
        break;
 8001692:	e7e7      	b.n	8001664 <_dwt_enableclocks+0x2c>
            reg[0] = 0x02 | (reg[0] & 0xfc);
 8001694:	aa01      	add	r2, sp, #4
 8001696:	2300      	movs	r3, #0
 8001698:	56d3      	ldrsb	r3, [r2, r3]
 800169a:	2103      	movs	r1, #3
 800169c:	438b      	bics	r3, r1
 800169e:	2102      	movs	r1, #2
 80016a0:	430b      	orrs	r3, r1
 80016a2:	7013      	strb	r3, [r2, #0]
        break;
 80016a4:	e7de      	b.n	8001664 <_dwt_enableclocks+0x2c>
            reg[0] = 0x48 | (reg[0] & 0xb3);
 80016a6:	aa01      	add	r2, sp, #4
 80016a8:	2300      	movs	r3, #0
 80016aa:	56d3      	ldrsb	r3, [r2, r3]
 80016ac:	214c      	movs	r1, #76	; 0x4c
 80016ae:	438b      	bics	r3, r1
 80016b0:	2148      	movs	r1, #72	; 0x48
 80016b2:	430b      	orrs	r3, r1
 80016b4:	7013      	strb	r3, [r2, #0]
            reg[1] = 0x80 | reg[1];
 80016b6:	7851      	ldrb	r1, [r2, #1]
 80016b8:	2380      	movs	r3, #128	; 0x80
 80016ba:	425b      	negs	r3, r3
 80016bc:	430b      	orrs	r3, r1
 80016be:	7053      	strb	r3, [r2, #1]
        break;
 80016c0:	e7d0      	b.n	8001664 <_dwt_enableclocks+0x2c>
            reg[0] = reg[0] & 0xb3;
 80016c2:	ab01      	add	r3, sp, #4
 80016c4:	781a      	ldrb	r2, [r3, #0]
 80016c6:	214c      	movs	r1, #76	; 0x4c
 80016c8:	438a      	bics	r2, r1
 80016ca:	701a      	strb	r2, [r3, #0]
            reg[1] = 0x7f & reg[1];
 80016cc:	7859      	ldrb	r1, [r3, #1]
 80016ce:	227f      	movs	r2, #127	; 0x7f
 80016d0:	400a      	ands	r2, r1
 80016d2:	705a      	strb	r2, [r3, #1]
        break;
 80016d4:	e7c6      	b.n	8001664 <_dwt_enableclocks+0x2c>
            reg[1] = 0x02 | reg[1];
 80016d6:	aa01      	add	r2, sp, #4
 80016d8:	7853      	ldrb	r3, [r2, #1]
 80016da:	2102      	movs	r1, #2
 80016dc:	430b      	orrs	r3, r1
 80016de:	7053      	strb	r3, [r2, #1]
        break;
 80016e0:	e7c0      	b.n	8001664 <_dwt_enableclocks+0x2c>
            reg[1] = reg[1] & 0xfd;
 80016e2:	aa01      	add	r2, sp, #4
 80016e4:	7853      	ldrb	r3, [r2, #1]
 80016e6:	2102      	movs	r1, #2
 80016e8:	438b      	bics	r3, r1
 80016ea:	7053      	strb	r3, [r2, #1]
        break;
 80016ec:	e7ba      	b.n	8001664 <_dwt_enableclocks+0x2c>
            reg[0] = 0x20 | (reg[0] & 0xcf);
 80016ee:	aa01      	add	r2, sp, #4
 80016f0:	2300      	movs	r3, #0
 80016f2:	56d3      	ldrsb	r3, [r2, r3]
 80016f4:	2130      	movs	r1, #48	; 0x30
 80016f6:	438b      	bics	r3, r1
 80016f8:	2120      	movs	r1, #32
 80016fa:	430b      	orrs	r3, r1
 80016fc:	7013      	strb	r3, [r2, #0]
        break;
 80016fe:	e7b1      	b.n	8001664 <_dwt_enableclocks+0x2c>
            reg[0] = 0x01;
 8001700:	ab01      	add	r3, sp, #4
 8001702:	2201      	movs	r2, #1
 8001704:	701a      	strb	r2, [r3, #0]
            reg[1] = 0x03;
 8001706:	3202      	adds	r2, #2
 8001708:	705a      	strb	r2, [r3, #1]
        break;
 800170a:	e7ab      	b.n	8001664 <_dwt_enableclocks+0x2c>
 800170c:	08004ddc 	.word	0x08004ddc

08001710 <_dwt_loaducodefromrom>:
{
 8001710:	b510      	push	{r4, lr}
    _dwt_enableclocks(FORCE_LDE);
 8001712:	200e      	movs	r0, #14
 8001714:	f7ff ff90 	bl	8001638 <_dwt_enableclocks>
    dwt_write16bitoffsetreg(OTP_IF_ID, OTP_CTRL, OTP_CTRL_LDELOAD); // Set load LDE kick bit
 8001718:	2280      	movs	r2, #128	; 0x80
 800171a:	0212      	lsls	r2, r2, #8
 800171c:	2106      	movs	r1, #6
 800171e:	202d      	movs	r0, #45	; 0x2d
 8001720:	f7ff fcb6 	bl	8001090 <dwt_write16bitoffsetreg>
    deca_sleep(1); // Allow time for code to upload (should take up to 120 us)
 8001724:	2001      	movs	r0, #1
 8001726:	f000 fab1 	bl	8001c8c <deca_sleep>
    _dwt_enableclocks(ENABLE_ALL_SEQ); // Enable clocks for sequencing
 800172a:	2001      	movs	r0, #1
 800172c:	f7ff ff84 	bl	8001638 <_dwt_enableclocks>
}
 8001730:	bd10      	pop	{r4, pc}

08001732 <_dwt_disablesequencing>:
 * output parameters none
 *
 * no return value
 */
void _dwt_disablesequencing(void) // Disable sequencing and go to state "INIT"
{
 8001732:	b510      	push	{r4, lr}
    _dwt_enableclocks(FORCE_SYS_XTI); // Set system clock to XTI
 8001734:	2000      	movs	r0, #0
 8001736:	f7ff ff7f 	bl	8001638 <_dwt_enableclocks>

    dwt_write16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET, PMSC_CTRL1_PKTSEQ_DISABLE); // Disable PMSC ctrl of RF and RX clk blocks
 800173a:	2200      	movs	r2, #0
 800173c:	2104      	movs	r1, #4
 800173e:	2036      	movs	r0, #54	; 0x36
 8001740:	f7ff fca6 	bl	8001090 <dwt_write16bitoffsetreg>
}
 8001744:	bd10      	pop	{r4, pc}

08001746 <dwt_setdelayedtrxtime>:
 * output parameters none
 *
 * no return value
 */
void dwt_setdelayedtrxtime(uint32 starttime)
{
 8001746:	b510      	push	{r4, lr}
 8001748:	0002      	movs	r2, r0
    dwt_write32bitoffsetreg(DX_TIME_ID, 1, starttime); // Write at offset 1 as the lower 9 bits of this register are ignored
 800174a:	2101      	movs	r1, #1
 800174c:	200a      	movs	r0, #10
 800174e:	f7ff fcbe 	bl	80010ce <dwt_write32bitoffsetreg>

} // end dwt_setdelayedtrxtime()
 8001752:	bd10      	pop	{r4, pc}

08001754 <dwt_starttx>:
 *
 * returns DWT_SUCCESS for success, or DWT_ERROR for error (e.g. a delayed transmission will be cancelled if the delayed time has passed)
 */

int dwt_starttx(uint8 mode)
{
 8001754:	b510      	push	{r4, lr}
    int retval = DWT_SUCCESS ;
    uint8 temp  = 0x00;
    uint16 checkTxOK = 0 ;

    if(mode & DWT_RESPONSE_EXPECTED)
 8001756:	2302      	movs	r3, #2
 8001758:	001a      	movs	r2, r3
 800175a:	4002      	ands	r2, r0
 800175c:	4203      	tst	r3, r0
 800175e:	d004      	beq.n	800176a <dwt_starttx+0x16>
    {
        temp = (uint8)SYS_CTRL_WAIT4RESP ; // Set wait4response bit
        pdw1000local->wait4resp = 1;
 8001760:	4b14      	ldr	r3, [pc, #80]	; (80017b4 <dwt_starttx+0x60>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	2201      	movs	r2, #1
 8001766:	755a      	strb	r2, [r3, #21]
        temp = (uint8)SYS_CTRL_WAIT4RESP ; // Set wait4response bit
 8001768:	327f      	adds	r2, #127	; 0x7f
    }

    if (mode & DWT_START_TX_DELAYED)
 800176a:	07c3      	lsls	r3, r0, #31
 800176c:	d518      	bpl.n	80017a0 <dwt_starttx+0x4c>
    {
        // Both SYS_CTRL_TXSTRT and SYS_CTRL_TXDLYS to correctly enable TX
        temp |= (uint8)(SYS_CTRL_TXDLYS | SYS_CTRL_TXSTRT) ;
 800176e:	2306      	movs	r3, #6
 8001770:	431a      	orrs	r2, r3
 8001772:	b2d2      	uxtb	r2, r2
        dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, temp);
 8001774:	2100      	movs	r1, #0
 8001776:	200d      	movs	r0, #13
 8001778:	f7ff fc69 	bl	800104e <dwt_write8bitoffsetreg>
        checkTxOK = dwt_read16bitoffsetreg(SYS_STATUS_ID, 3); // Read at offset 3 to get the upper 2 bytes out of 5
 800177c:	2103      	movs	r1, #3
 800177e:	200f      	movs	r0, #15
 8001780:	f7ff fc2a 	bl	8000fd8 <dwt_read16bitoffsetreg>
        if ((checkTxOK & SYS_STATUS_TXERR) == 0) // Transmit Delayed Send set over Half a Period away or Power Up error (there is enough time to send but not to power up individual blocks).
 8001784:	2381      	movs	r3, #129	; 0x81
 8001786:	00db      	lsls	r3, r3, #3
 8001788:	4218      	tst	r0, r3
 800178a:	d101      	bne.n	8001790 <dwt_starttx+0x3c>
        {
            retval = DWT_SUCCESS ; // All okay
 800178c:	2000      	movs	r0, #0
    {
        temp |= (uint8)SYS_CTRL_TXSTRT ;
        dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, temp);
    }

    return retval;
 800178e:	e00f      	b.n	80017b0 <dwt_starttx+0x5c>
            dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, (uint8)SYS_CTRL_TRXOFF);
 8001790:	2240      	movs	r2, #64	; 0x40
 8001792:	2100      	movs	r1, #0
 8001794:	200d      	movs	r0, #13
 8001796:	f7ff fc5a 	bl	800104e <dwt_write8bitoffsetreg>
            retval = DWT_ERROR ; // Failed !
 800179a:	2001      	movs	r0, #1
 800179c:	4240      	negs	r0, r0
 800179e:	e007      	b.n	80017b0 <dwt_starttx+0x5c>
        temp |= (uint8)SYS_CTRL_TXSTRT ;
 80017a0:	2302      	movs	r3, #2
 80017a2:	431a      	orrs	r2, r3
 80017a4:	b2d2      	uxtb	r2, r2
        dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, temp);
 80017a6:	2100      	movs	r1, #0
 80017a8:	200d      	movs	r0, #13
 80017aa:	f7ff fc50 	bl	800104e <dwt_write8bitoffsetreg>
    int retval = DWT_SUCCESS ;
 80017ae:	2000      	movs	r0, #0

} // end dwt_starttx()
 80017b0:	bd10      	pop	{r4, pc}
 80017b2:	46c0      	nop			; (mov r8, r8)
 80017b4:	20000000 	.word	0x20000000

080017b8 <dwt_syncrxbufptrs>:
 * output parameters
 *
 * no return value
 */
void dwt_syncrxbufptrs(void)
{
 80017b8:	b510      	push	{r4, lr}
    uint8  buff ;
    // Need to make sure that the host/IC buffer pointers are aligned before starting RX
    buff = dwt_read8bitoffsetreg(SYS_STATUS_ID, 3); // Read 1 byte at offset 3 to get the 4th byte out of 5
 80017ba:	2103      	movs	r1, #3
 80017bc:	200f      	movs	r0, #15
 80017be:	f7ff fc39 	bl	8001034 <dwt_read8bitoffsetreg>

    if((buff & (SYS_STATUS_ICRBP >> 24)) !=     // IC side Receive Buffer Pointer
       ((buff & (SYS_STATUS_HSRBP>>24)) << 1) ) // Host Side Receive Buffer Pointer
 80017c2:	0043      	lsls	r3, r0, #1
    if((buff & (SYS_STATUS_ICRBP >> 24)) !=     // IC side Receive Buffer Pointer
 80017c4:	4058      	eors	r0, r3
 80017c6:	0603      	lsls	r3, r0, #24
 80017c8:	d400      	bmi.n	80017cc <dwt_syncrxbufptrs+0x14>
    {
        dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_HRBT_OFFSET , 0x01) ; // We need to swap RX buffer status reg (write one to toggle internally)
    }
}
 80017ca:	bd10      	pop	{r4, pc}
        dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_HRBT_OFFSET , 0x01) ; // We need to swap RX buffer status reg (write one to toggle internally)
 80017cc:	2201      	movs	r2, #1
 80017ce:	2103      	movs	r1, #3
 80017d0:	200d      	movs	r0, #13
 80017d2:	f7ff fc3c 	bl	800104e <dwt_write8bitoffsetreg>
}
 80017d6:	e7f8      	b.n	80017ca <dwt_syncrxbufptrs+0x12>

080017d8 <dwt_forcetrxoff>:
{
 80017d8:	b570      	push	{r4, r5, r6, lr}
    mask = dwt_read32bitreg(SYS_MASK_ID) ; // Read set interrupt mask
 80017da:	2100      	movs	r1, #0
 80017dc:	200e      	movs	r0, #14
 80017de:	f7ff fbd5 	bl	8000f8c <dwt_read32bitoffsetreg>
 80017e2:	0005      	movs	r5, r0
    stat = decamutexon() ;
 80017e4:	f000 fbdc 	bl	8001fa0 <decamutexon>
 80017e8:	0004      	movs	r4, r0
    dwt_write32bitreg(SYS_MASK_ID, 0) ; // Clear interrupt mask - so we don't get any unwanted events
 80017ea:	2200      	movs	r2, #0
 80017ec:	2100      	movs	r1, #0
 80017ee:	200e      	movs	r0, #14
 80017f0:	f7ff fc6d 	bl	80010ce <dwt_write32bitoffsetreg>
    dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, (uint8)SYS_CTRL_TRXOFF) ; // Disable the radio
 80017f4:	2240      	movs	r2, #64	; 0x40
 80017f6:	2100      	movs	r1, #0
 80017f8:	200d      	movs	r0, #13
 80017fa:	f7ff fc28 	bl	800104e <dwt_write8bitoffsetreg>
    dwt_write32bitreg(SYS_STATUS_ID, (SYS_STATUS_ALL_TX | SYS_STATUS_ALL_RX_ERR | SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_GOOD));
 80017fe:	4a0a      	ldr	r2, [pc, #40]	; (8001828 <dwt_forcetrxoff+0x50>)
 8001800:	2100      	movs	r1, #0
 8001802:	200f      	movs	r0, #15
 8001804:	f7ff fc63 	bl	80010ce <dwt_write32bitoffsetreg>
    dwt_syncrxbufptrs();
 8001808:	f7ff ffd6 	bl	80017b8 <dwt_syncrxbufptrs>
    dwt_write32bitreg(SYS_MASK_ID, mask) ; // Set interrupt mask to what it was
 800180c:	002a      	movs	r2, r5
 800180e:	2100      	movs	r1, #0
 8001810:	200e      	movs	r0, #14
 8001812:	f7ff fc5c 	bl	80010ce <dwt_write32bitoffsetreg>
    decamutexoff(stat) ;
 8001816:	0020      	movs	r0, r4
 8001818:	f000 fbc4 	bl	8001fa4 <decamutexoff>
    pdw1000local->wait4resp = 0;
 800181c:	4b03      	ldr	r3, [pc, #12]	; (800182c <dwt_forcetrxoff+0x54>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	2200      	movs	r2, #0
 8001822:	755a      	strb	r2, [r3, #21]
} // end deviceforcetrxoff()
 8001824:	bd70      	pop	{r4, r5, r6, pc}
 8001826:	46c0      	nop			; (mov r8, r8)
 8001828:	2427fff8 	.word	0x2427fff8
 800182c:	20000000 	.word	0x20000000

08001830 <dwt_rxenable>:
 *                                               performing manual RX re-enabling in double buffering mode
 *
 * returns DWT_SUCCESS for success, or DWT_ERROR for error (e.g. a delayed receive enable will be too far in the future if delayed time has passed)
 */
int dwt_rxenable(int mode)
{
 8001830:	b570      	push	{r4, r5, r6, lr}
 8001832:	0004      	movs	r4, r0
    uint16 temp ;
    uint8 temp1 ;

    if ((mode & DWT_NO_SYNC_PTRS) == 0)
 8001834:	0743      	lsls	r3, r0, #29
 8001836:	d50e      	bpl.n	8001856 <dwt_rxenable+0x26>
        dwt_syncrxbufptrs();
    }

    temp = (uint16)SYS_CTRL_RXENAB ;

    if (mode & DWT_START_RX_DELAYED)
 8001838:	2301      	movs	r3, #1
 800183a:	001d      	movs	r5, r3
 800183c:	4025      	ands	r5, r4
 800183e:	4223      	tst	r3, r4
 8001840:	d10c      	bne.n	800185c <dwt_rxenable+0x2c>
    temp = (uint16)SYS_CTRL_RXENAB ;
 8001842:	2280      	movs	r2, #128	; 0x80
 8001844:	0052      	lsls	r2, r2, #1
    {
        temp |= (uint16)SYS_CTRL_RXDLYE ;
    }

    dwt_write16bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, temp);
 8001846:	2100      	movs	r1, #0
 8001848:	200d      	movs	r0, #13
 800184a:	f7ff fc21 	bl	8001090 <dwt_write16bitoffsetreg>

    if (mode & DWT_START_RX_DELAYED) // check for errors
 800184e:	2d00      	cmp	r5, #0
 8001850:	d107      	bne.n	8001862 <dwt_rxenable+0x32>
            return DWT_ERROR; // return warning indication
        }
    }

    return DWT_SUCCESS;
} // end dwt_rxenable()
 8001852:	0028      	movs	r0, r5
 8001854:	bd70      	pop	{r4, r5, r6, pc}
        dwt_syncrxbufptrs();
 8001856:	f7ff ffaf 	bl	80017b8 <dwt_syncrxbufptrs>
 800185a:	e7ed      	b.n	8001838 <dwt_rxenable+0x8>
        temp |= (uint16)SYS_CTRL_RXDLYE ;
 800185c:	22c0      	movs	r2, #192	; 0xc0
 800185e:	0092      	lsls	r2, r2, #2
 8001860:	e7f1      	b.n	8001846 <dwt_rxenable+0x16>
        temp1 = dwt_read8bitoffsetreg(SYS_STATUS_ID, 3); // Read 1 byte at offset 3 to get the 4th byte out of 5
 8001862:	2103      	movs	r1, #3
 8001864:	200f      	movs	r0, #15
 8001866:	f7ff fbe5 	bl	8001034 <dwt_read8bitoffsetreg>
        if ((temp1 & (SYS_STATUS_HPDWARN >> 24)) != 0) // if delay has passed do immediate RX on unless DWT_IDLE_ON_DLY_ERR is true
 800186a:	0703      	lsls	r3, r0, #28
 800186c:	d401      	bmi.n	8001872 <dwt_rxenable+0x42>
    return DWT_SUCCESS;
 800186e:	2500      	movs	r5, #0
 8001870:	e7ef      	b.n	8001852 <dwt_rxenable+0x22>
            dwt_forcetrxoff(); // turn the delayed receive off
 8001872:	f7ff ffb1 	bl	80017d8 <dwt_forcetrxoff>
            if((mode & DWT_IDLE_ON_DLY_ERR) == 0) // if DWT_IDLE_ON_DLY_ERR not set then re-enable receiver
 8001876:	07a3      	lsls	r3, r4, #30
 8001878:	d502      	bpl.n	8001880 <dwt_rxenable+0x50>
            return DWT_ERROR; // return warning indication
 800187a:	2501      	movs	r5, #1
 800187c:	426d      	negs	r5, r5
 800187e:	e7e8      	b.n	8001852 <dwt_rxenable+0x22>
                dwt_write16bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, SYS_CTRL_RXENAB);
 8001880:	2280      	movs	r2, #128	; 0x80
 8001882:	0052      	lsls	r2, r2, #1
 8001884:	2100      	movs	r1, #0
 8001886:	200d      	movs	r0, #13
 8001888:	f7ff fc02 	bl	8001090 <dwt_write16bitoffsetreg>
 800188c:	e7f5      	b.n	800187a <dwt_rxenable+0x4a>
	...

08001890 <dwt_setrxtimeout>:
 * output parameters
 *
 * no return value
 */
void dwt_setrxtimeout(uint16 time)
{
 8001890:	b570      	push	{r4, r5, r6, lr}
 8001892:	0005      	movs	r5, r0
    uint8 temp ;

    temp = dwt_read8bitoffsetreg(SYS_CFG_ID, 3); // Read at offset 3 to get the upper byte only
 8001894:	2103      	movs	r1, #3
 8001896:	2004      	movs	r0, #4
 8001898:	f7ff fbcc 	bl	8001034 <dwt_read8bitoffsetreg>
 800189c:	0004      	movs	r4, r0

    if(time > 0)
 800189e:	2d00      	cmp	r5, #0
 80018a0:	d013      	beq.n	80018ca <dwt_setrxtimeout+0x3a>
    {
        dwt_write16bitoffsetreg(RX_FWTO_ID, RX_FWTO_OFFSET, time) ;
 80018a2:	002a      	movs	r2, r5
 80018a4:	2100      	movs	r1, #0
 80018a6:	200c      	movs	r0, #12
 80018a8:	f7ff fbf2 	bl	8001090 <dwt_write16bitoffsetreg>

        temp |= (uint8)(SYS_CFG_RXWTOE>>24); // Shift RXWTOE mask as we read the upper byte only
 80018ac:	2210      	movs	r2, #16
 80018ae:	4322      	orrs	r2, r4
 80018b0:	b2d2      	uxtb	r2, r2
        // OR in 32bit value (1 bit set), I know this is in high byte.
        pdw1000local->sysCFGreg |= SYS_CFG_RXWTOE;
 80018b2:	4b0d      	ldr	r3, [pc, #52]	; (80018e8 <dwt_setrxtimeout+0x58>)
 80018b4:	6819      	ldr	r1, [r3, #0]
 80018b6:	2380      	movs	r3, #128	; 0x80
 80018b8:	055b      	lsls	r3, r3, #21
 80018ba:	6908      	ldr	r0, [r1, #16]
 80018bc:	4303      	orrs	r3, r0
 80018be:	610b      	str	r3, [r1, #16]

        dwt_write8bitoffsetreg(SYS_CFG_ID, 3, temp); // Write at offset 3 to write the upper byte only
 80018c0:	2103      	movs	r1, #3
 80018c2:	2004      	movs	r0, #4
 80018c4:	f7ff fbc3 	bl	800104e <dwt_write8bitoffsetreg>
        pdw1000local->sysCFGreg &= ~(SYS_CFG_RXWTOE);

        dwt_write8bitoffsetreg(SYS_CFG_ID, 3, temp); // Write at offset 3 to write the upper byte only
    }

} // end dwt_setrxtimeout()
 80018c8:	bd70      	pop	{r4, r5, r6, pc}
        temp &= ~((uint8)(SYS_CFG_RXWTOE>>24)); // Shift RXWTOE mask as we read the upper byte only
 80018ca:	2310      	movs	r3, #16
 80018cc:	439c      	bics	r4, r3
 80018ce:	b2e2      	uxtb	r2, r4
        pdw1000local->sysCFGreg &= ~(SYS_CFG_RXWTOE);
 80018d0:	4b05      	ldr	r3, [pc, #20]	; (80018e8 <dwt_setrxtimeout+0x58>)
 80018d2:	6819      	ldr	r1, [r3, #0]
 80018d4:	4b05      	ldr	r3, [pc, #20]	; (80018ec <dwt_setrxtimeout+0x5c>)
 80018d6:	6908      	ldr	r0, [r1, #16]
 80018d8:	4003      	ands	r3, r0
 80018da:	610b      	str	r3, [r1, #16]
        dwt_write8bitoffsetreg(SYS_CFG_ID, 3, temp); // Write at offset 3 to write the upper byte only
 80018dc:	2103      	movs	r1, #3
 80018de:	2004      	movs	r0, #4
 80018e0:	f7ff fbb5 	bl	800104e <dwt_write8bitoffsetreg>
} // end dwt_setrxtimeout()
 80018e4:	e7f0      	b.n	80018c8 <dwt_setrxtimeout+0x38>
 80018e6:	46c0      	nop			; (mov r8, r8)
 80018e8:	20000000 	.word	0x20000000
 80018ec:	efffffff 	.word	0xefffffff

080018f0 <dwt_rxreset>:
 * output parameters
 *
 * no return value
 */
void dwt_rxreset(void)
{
 80018f0:	b510      	push	{r4, lr}
    // Set RX reset
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_RX);
 80018f2:	22e0      	movs	r2, #224	; 0xe0
 80018f4:	2103      	movs	r1, #3
 80018f6:	2036      	movs	r0, #54	; 0x36
 80018f8:	f7ff fba9 	bl	800104e <dwt_write8bitoffsetreg>

    // Clear RX reset
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_CLEAR);
 80018fc:	22f0      	movs	r2, #240	; 0xf0
 80018fe:	2103      	movs	r1, #3
 8001900:	2036      	movs	r0, #54	; 0x36
 8001902:	f7ff fba4 	bl	800104e <dwt_write8bitoffsetreg>
}
 8001906:	bd10      	pop	{r4, pc}

08001908 <dwt_isr>:
{
 8001908:	b570      	push	{r4, r5, r6, lr}
    uint32 status = pdw1000local->cbData.status = dwt_read32bitreg(SYS_STATUS_ID); // Read status register low 32bits
 800190a:	4b54      	ldr	r3, [pc, #336]	; (8001a5c <dwt_isr+0x154>)
 800190c:	681d      	ldr	r5, [r3, #0]
 800190e:	2100      	movs	r1, #0
 8001910:	200f      	movs	r0, #15
 8001912:	f7ff fb3b 	bl	8000f8c <dwt_read32bitoffsetreg>
 8001916:	0004      	movs	r4, r0
 8001918:	61e8      	str	r0, [r5, #28]
    if(status & SYS_STATUS_RXFCG)
 800191a:	0443      	lsls	r3, r0, #17
 800191c:	d40b      	bmi.n	8001936 <dwt_isr+0x2e>
    if(status & SYS_STATUS_TXFRS)
 800191e:	0623      	lsls	r3, r4, #24
 8001920:	d457      	bmi.n	80019d2 <dwt_isr+0xca>
    if(status & SYS_STATUS_ALL_RX_TO)
 8001922:	2388      	movs	r3, #136	; 0x88
 8001924:	039b      	lsls	r3, r3, #14
 8001926:	421c      	tst	r4, r3
 8001928:	d000      	beq.n	800192c <dwt_isr+0x24>
 800192a:	e06b      	b.n	8001a04 <dwt_isr+0xfc>
    if(status & SYS_STATUS_ALL_RX_ERR)
 800192c:	4b4c      	ldr	r3, [pc, #304]	; (8001a60 <dwt_isr+0x158>)
 800192e:	421c      	tst	r4, r3
 8001930:	d000      	beq.n	8001934 <dwt_isr+0x2c>
 8001932:	e07d      	b.n	8001a30 <dwt_isr+0x128>
}
 8001934:	bd70      	pop	{r4, r5, r6, pc}
        dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_ALL_RX_GOOD); // Clear all receive status bits
 8001936:	22de      	movs	r2, #222	; 0xde
 8001938:	01d2      	lsls	r2, r2, #7
 800193a:	2100      	movs	r1, #0
 800193c:	200f      	movs	r0, #15
 800193e:	f7ff fbc6 	bl	80010ce <dwt_write32bitoffsetreg>
        pdw1000local->cbData.rx_flags = 0;
 8001942:	4d46      	ldr	r5, [pc, #280]	; (8001a5c <dwt_isr+0x154>)
 8001944:	2324      	movs	r3, #36	; 0x24
 8001946:	2200      	movs	r2, #0
 8001948:	6829      	ldr	r1, [r5, #0]
 800194a:	54ca      	strb	r2, [r1, r3]
        finfo16 = dwt_read16bitoffsetreg(RX_FINFO_ID, RX_FINFO_OFFSET);
 800194c:	2100      	movs	r1, #0
 800194e:	2010      	movs	r0, #16
 8001950:	f7ff fb42 	bl	8000fd8 <dwt_read16bitoffsetreg>
        len = finfo16 & RX_FINFO_RXFL_MASK_1023;
 8001954:	0582      	lsls	r2, r0, #22
 8001956:	0d92      	lsrs	r2, r2, #22
        if(pdw1000local->longFrames == 0)
 8001958:	682b      	ldr	r3, [r5, #0]
 800195a:	7a99      	ldrb	r1, [r3, #10]
 800195c:	2900      	cmp	r1, #0
 800195e:	d101      	bne.n	8001964 <dwt_isr+0x5c>
            len &= RX_FINFO_RXFLEN_MASK;
 8001960:	227f      	movs	r2, #127	; 0x7f
 8001962:	4002      	ands	r2, r0
        pdw1000local->cbData.datalength = len;
 8001964:	841a      	strh	r2, [r3, #32]
        if(finfo16 & RX_FINFO_RNG)
 8001966:	0402      	lsls	r2, r0, #16
 8001968:	d41f      	bmi.n	80019aa <dwt_isr+0xa2>
        dwt_readfromdevice(RX_BUFFER_ID, 0, FCTRL_LEN_MAX, pdw1000local->cbData.fctrl);
 800196a:	3322      	adds	r3, #34	; 0x22
 800196c:	2202      	movs	r2, #2
 800196e:	2100      	movs	r1, #0
 8001970:	2011      	movs	r0, #17
 8001972:	f7ff fabb 	bl	8000eec <dwt_readfromdevice>
        if((status & SYS_STATUS_AAT) && ((pdw1000local->cbData.fctrl[0] & FCTRL_ACK_REQ_MASK) == 0))
 8001976:	0723      	lsls	r3, r4, #28
 8001978:	d505      	bpl.n	8001986 <dwt_isr+0x7e>
 800197a:	4b38      	ldr	r3, [pc, #224]	; (8001a5c <dwt_isr+0x154>)
 800197c:	681a      	ldr	r2, [r3, #0]
 800197e:	2322      	movs	r3, #34	; 0x22
 8001980:	5cd3      	ldrb	r3, [r2, r3]
 8001982:	069b      	lsls	r3, r3, #26
 8001984:	d517      	bpl.n	80019b6 <dwt_isr+0xae>
        if(pdw1000local->cbRxOk != NULL)
 8001986:	4b35      	ldr	r3, [pc, #212]	; (8001a5c <dwt_isr+0x154>)
 8001988:	6818      	ldr	r0, [r3, #0]
 800198a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800198c:	2b00      	cmp	r3, #0
 800198e:	d001      	beq.n	8001994 <dwt_isr+0x8c>
            pdw1000local->cbRxOk(&pdw1000local->cbData);
 8001990:	301c      	adds	r0, #28
 8001992:	4798      	blx	r3
        if (pdw1000local->dblbuffon)
 8001994:	4b31      	ldr	r3, [pc, #196]	; (8001a5c <dwt_isr+0x154>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	7d1b      	ldrb	r3, [r3, #20]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d0bf      	beq.n	800191e <dwt_isr+0x16>
            dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_HRBT_OFFSET, 1);
 800199e:	2201      	movs	r2, #1
 80019a0:	2103      	movs	r1, #3
 80019a2:	200d      	movs	r0, #13
 80019a4:	f7ff fb53 	bl	800104e <dwt_write8bitoffsetreg>
 80019a8:	e7b9      	b.n	800191e <dwt_isr+0x16>
            pdw1000local->cbData.rx_flags |= DWT_CB_DATA_RX_FLAG_RNG;
 80019aa:	2124      	movs	r1, #36	; 0x24
 80019ac:	5c5a      	ldrb	r2, [r3, r1]
 80019ae:	2001      	movs	r0, #1
 80019b0:	4302      	orrs	r2, r0
 80019b2:	545a      	strb	r2, [r3, r1]
 80019b4:	e7d9      	b.n	800196a <dwt_isr+0x62>
            dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_AAT); // Clear AAT status bit in register
 80019b6:	2208      	movs	r2, #8
 80019b8:	2100      	movs	r1, #0
 80019ba:	200f      	movs	r0, #15
 80019bc:	f7ff fb87 	bl	80010ce <dwt_write32bitoffsetreg>
            pdw1000local->cbData.status &= ~SYS_STATUS_AAT; // Clear AAT status bit in callback data register copy
 80019c0:	4b26      	ldr	r3, [pc, #152]	; (8001a5c <dwt_isr+0x154>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	2208      	movs	r2, #8
 80019c6:	69d9      	ldr	r1, [r3, #28]
 80019c8:	4391      	bics	r1, r2
 80019ca:	61d9      	str	r1, [r3, #28]
            pdw1000local->wait4resp = 0;
 80019cc:	2200      	movs	r2, #0
 80019ce:	755a      	strb	r2, [r3, #21]
 80019d0:	e7d9      	b.n	8001986 <dwt_isr+0x7e>
        dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_ALL_TX); // Clear TX event bits
 80019d2:	22f8      	movs	r2, #248	; 0xf8
 80019d4:	2100      	movs	r1, #0
 80019d6:	200f      	movs	r0, #15
 80019d8:	f7ff fb79 	bl	80010ce <dwt_write32bitoffsetreg>
        if((status & SYS_STATUS_AAT) && pdw1000local->wait4resp)
 80019dc:	0723      	lsls	r3, r4, #28
 80019de:	d504      	bpl.n	80019ea <dwt_isr+0xe2>
 80019e0:	4b1e      	ldr	r3, [pc, #120]	; (8001a5c <dwt_isr+0x154>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	7d5b      	ldrb	r3, [r3, #21]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d107      	bne.n	80019fa <dwt_isr+0xf2>
        if(pdw1000local->cbTxDone != NULL)
 80019ea:	4b1c      	ldr	r3, [pc, #112]	; (8001a5c <dwt_isr+0x154>)
 80019ec:	6818      	ldr	r0, [r3, #0]
 80019ee:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d096      	beq.n	8001922 <dwt_isr+0x1a>
            pdw1000local->cbTxDone(&pdw1000local->cbData);
 80019f4:	301c      	adds	r0, #28
 80019f6:	4798      	blx	r3
 80019f8:	e793      	b.n	8001922 <dwt_isr+0x1a>
            dwt_forcetrxoff(); // Turn the RX off
 80019fa:	f7ff feed 	bl	80017d8 <dwt_forcetrxoff>
            dwt_rxreset(); // Reset in case we were late and a frame was already being received
 80019fe:	f7ff ff77 	bl	80018f0 <dwt_rxreset>
 8001a02:	e7f2      	b.n	80019ea <dwt_isr+0xe2>
        dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_RXRFTO); // Clear RX timeout event bits
 8001a04:	2280      	movs	r2, #128	; 0x80
 8001a06:	0292      	lsls	r2, r2, #10
 8001a08:	2100      	movs	r1, #0
 8001a0a:	200f      	movs	r0, #15
 8001a0c:	f7ff fb5f 	bl	80010ce <dwt_write32bitoffsetreg>
        pdw1000local->wait4resp = 0;
 8001a10:	4d12      	ldr	r5, [pc, #72]	; (8001a5c <dwt_isr+0x154>)
 8001a12:	2300      	movs	r3, #0
 8001a14:	682a      	ldr	r2, [r5, #0]
 8001a16:	7553      	strb	r3, [r2, #21]
        dwt_forcetrxoff();
 8001a18:	f7ff fede 	bl	80017d8 <dwt_forcetrxoff>
        dwt_rxreset();
 8001a1c:	f7ff ff68 	bl	80018f0 <dwt_rxreset>
        if(pdw1000local->cbRxTo != NULL)
 8001a20:	6828      	ldr	r0, [r5, #0]
 8001a22:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d100      	bne.n	8001a2a <dwt_isr+0x122>
 8001a28:	e780      	b.n	800192c <dwt_isr+0x24>
            pdw1000local->cbRxTo(&pdw1000local->cbData);
 8001a2a:	301c      	adds	r0, #28
 8001a2c:	4798      	blx	r3
 8001a2e:	e77d      	b.n	800192c <dwt_isr+0x24>
        dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_ALL_RX_ERR); // Clear RX error event bits
 8001a30:	001a      	movs	r2, r3
 8001a32:	2100      	movs	r1, #0
 8001a34:	200f      	movs	r0, #15
 8001a36:	f7ff fb4a 	bl	80010ce <dwt_write32bitoffsetreg>
        pdw1000local->wait4resp = 0;
 8001a3a:	4c08      	ldr	r4, [pc, #32]	; (8001a5c <dwt_isr+0x154>)
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	6822      	ldr	r2, [r4, #0]
 8001a40:	7553      	strb	r3, [r2, #21]
        dwt_forcetrxoff();
 8001a42:	f7ff fec9 	bl	80017d8 <dwt_forcetrxoff>
        dwt_rxreset();
 8001a46:	f7ff ff53 	bl	80018f0 <dwt_rxreset>
        if(pdw1000local->cbRxErr != NULL)
 8001a4a:	6820      	ldr	r0, [r4, #0]
 8001a4c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d100      	bne.n	8001a54 <dwt_isr+0x14c>
 8001a52:	e76f      	b.n	8001934 <dwt_isr+0x2c>
            pdw1000local->cbRxErr(&pdw1000local->cbData);
 8001a54:	301c      	adds	r0, #28
 8001a56:	4798      	blx	r3
}
 8001a58:	e76c      	b.n	8001934 <dwt_isr+0x2c>
 8001a5a:	46c0      	nop			; (mov r8, r8)
 8001a5c:	20000000 	.word	0x20000000
 8001a60:	24059000 	.word	0x24059000

08001a64 <dwt_softreset>:
 * output parameters
 *
 * no return value
 */
void dwt_softreset(void)
{
 8001a64:	b510      	push	{r4, lr}
    _dwt_disablesequencing();
 8001a66:	f7ff fe64 	bl	8001732 <_dwt_disablesequencing>

    // Clear any AON auto download bits (as reset will trigger AON download)
    dwt_write16bitoffsetreg(AON_ID, AON_WCFG_OFFSET, 0x00);
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	2100      	movs	r1, #0
 8001a6e:	202c      	movs	r0, #44	; 0x2c
 8001a70:	f7ff fb0e 	bl	8001090 <dwt_write16bitoffsetreg>
    // Clear the wake-up configuration
    dwt_write8bitoffsetreg(AON_ID, AON_CFG0_OFFSET, 0x00);
 8001a74:	2200      	movs	r2, #0
 8001a76:	2106      	movs	r1, #6
 8001a78:	202c      	movs	r0, #44	; 0x2c
 8001a7a:	f7ff fae8 	bl	800104e <dwt_write8bitoffsetreg>
    // Upload the new configuration
    _dwt_aonarrayupload();
 8001a7e:	f7ff fc37 	bl	80012f0 <_dwt_aonarrayupload>

    // Reset HIF, TX, RX and PMSC (set the reset bits)
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_ALL);
 8001a82:	2200      	movs	r2, #0
 8001a84:	2103      	movs	r1, #3
 8001a86:	2036      	movs	r0, #54	; 0x36
 8001a88:	f7ff fae1 	bl	800104e <dwt_write8bitoffsetreg>

    // DW1000 needs a 10us sleep to let clk PLL lock after reset - the PLL will automatically lock after the reset
    // Could also have polled the PLL lock flag, but then the SPI needs to be < 3MHz !! So a simple delay is easier
    deca_sleep(1);
 8001a8c:	2001      	movs	r0, #1
 8001a8e:	f000 f8fd 	bl	8001c8c <deca_sleep>

    // Clear the reset bits
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_CLEAR);
 8001a92:	22f0      	movs	r2, #240	; 0xf0
 8001a94:	2103      	movs	r1, #3
 8001a96:	2036      	movs	r0, #54	; 0x36
 8001a98:	f7ff fad9 	bl	800104e <dwt_write8bitoffsetreg>

    pdw1000local->wait4resp = 0;
 8001a9c:	4b02      	ldr	r3, [pc, #8]	; (8001aa8 <dwt_softreset+0x44>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	755a      	strb	r2, [r3, #21]
}
 8001aa4:	bd10      	pop	{r4, pc}
 8001aa6:	46c0      	nop			; (mov r8, r8)
 8001aa8:	20000000 	.word	0x20000000

08001aac <dwt_setxtaltrim>:
 * output parameters
 *
 * no return value
 */
void dwt_setxtaltrim(uint8 value)
{
 8001aac:	b510      	push	{r4, lr}
    // The 3 MSb in this 8-bit register must be kept to 0b011 to avoid any malfunction.
    uint8 reg_val = (3 << 5) | (value & FS_XTALT_MASK);
 8001aae:	221f      	movs	r2, #31
 8001ab0:	4002      	ands	r2, r0
 8001ab2:	2060      	movs	r0, #96	; 0x60
 8001ab4:	4302      	orrs	r2, r0
 8001ab6:	b252      	sxtb	r2, r2
 8001ab8:	b2d2      	uxtb	r2, r2
    dwt_write8bitoffsetreg(FS_CTRL_ID, FS_XTALT_OFFSET, reg_val);
 8001aba:	210e      	movs	r1, #14
 8001abc:	202b      	movs	r0, #43	; 0x2b
 8001abe:	f7ff fac6 	bl	800104e <dwt_write8bitoffsetreg>
}
 8001ac2:	bd10      	pop	{r4, pc}

08001ac4 <dwt_initialise>:
{
 8001ac4:	b570      	push	{r4, r5, r6, lr}
 8001ac6:	0004      	movs	r4, r0
    pdw1000local->dblbuffon = 0; // - set to 0 - meaning double buffer mode is off by default
 8001ac8:	4b6c      	ldr	r3, [pc, #432]	; (8001c7c <dwt_initialise+0x1b8>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	2200      	movs	r2, #0
 8001ace:	751a      	strb	r2, [r3, #20]
    pdw1000local->wait4resp = 0; // - set to 0 - meaning wait for response not active
 8001ad0:	755a      	strb	r2, [r3, #21]
    pdw1000local->sleep_mode = 0; // - set to 0 - meaning sleep mode has not been configured
 8001ad2:	82da      	strh	r2, [r3, #22]
    pdw1000local->cbTxDone = NULL;
 8001ad4:	629a      	str	r2, [r3, #40]	; 0x28
    pdw1000local->cbRxOk = NULL;
 8001ad6:	62da      	str	r2, [r3, #44]	; 0x2c
    pdw1000local->cbRxTo = NULL;
 8001ad8:	631a      	str	r2, [r3, #48]	; 0x30
    pdw1000local->cbRxErr = NULL;
 8001ada:	635a      	str	r2, [r3, #52]	; 0x34
    if (DWT_DEVICE_ID != dwt_readdevid()) // MP IC ONLY (i.e. DW1000) FOR THIS CODE
 8001adc:	f7ff fa6a 	bl	8000fb4 <dwt_readdevid>
 8001ae0:	4b67      	ldr	r3, [pc, #412]	; (8001c80 <dwt_initialise+0x1bc>)
 8001ae2:	4298      	cmp	r0, r3
 8001ae4:	d000      	beq.n	8001ae8 <dwt_initialise+0x24>
 8001ae6:	e0c6      	b.n	8001c76 <dwt_initialise+0x1b2>
    if(!(DWT_DW_WAKE_UP & config)) // Don't reset the device if DWT_DW_WAKE_UP bit is set, e.g. when calling this API after wake up
 8001ae8:	2302      	movs	r3, #2
 8001aea:	001d      	movs	r5, r3
 8001aec:	4025      	ands	r5, r4
 8001aee:	4223      	tst	r3, r4
 8001af0:	d020      	beq.n	8001b34 <dwt_initialise+0x70>
    if(!((DWT_DW_WAKE_UP & config) && ((DWT_READ_OTP_TMP | DWT_READ_OTP_BAT | DWT_READ_OTP_LID | DWT_READ_OTP_PID | DWT_DW_WUP_RD_OTPREV)& config)))
 8001af2:	2d00      	cmp	r5, #0
 8001af4:	d002      	beq.n	8001afc <dwt_initialise+0x38>
 8001af6:	23f8      	movs	r3, #248	; 0xf8
 8001af8:	4223      	tst	r3, r4
 8001afa:	d102      	bne.n	8001b02 <dwt_initialise+0x3e>
        _dwt_enableclocks(FORCE_SYS_XTI); // NOTE: set system clock to XTI - this is necessary to make sure the values read by _dwt_otpread are reliable
 8001afc:	2000      	movs	r0, #0
 8001afe:	f7ff fd9b 	bl	8001638 <_dwt_enableclocks>
    dwt_write8bitoffsetreg(EXT_SYNC_ID, EC_CTRL_OFFSET, EC_CTRL_PLLLCK);
 8001b02:	2204      	movs	r2, #4
 8001b04:	2100      	movs	r1, #0
 8001b06:	2024      	movs	r0, #36	; 0x24
 8001b08:	f7ff faa1 	bl	800104e <dwt_write8bitoffsetreg>
    if(!(DWT_DW_WAKE_UP & config))
 8001b0c:	2d00      	cmp	r5, #0
 8001b0e:	d121      	bne.n	8001b54 <dwt_initialise+0x90>
        ldo_tune = _dwt_otpread(LDOTUNE_ADDRESS);
 8001b10:	2004      	movs	r0, #4
 8001b12:	f7ff faff 	bl	8001114 <_dwt_otpread>
        if((ldo_tune & 0xFF) != 0)
 8001b16:	23ff      	movs	r3, #255	; 0xff
 8001b18:	4203      	tst	r3, r0
 8001b1a:	d10e      	bne.n	8001b3a <dwt_initialise+0x76>
    if((!(DWT_DW_WAKE_UP & config)) || ((DWT_DW_WAKE_UP & config) && (DWT_DW_WUP_RD_OTPREV & config)))
 8001b1c:	2d00      	cmp	r5, #0
 8001b1e:	d028      	beq.n	8001b72 <dwt_initialise+0xae>
 8001b20:	230a      	movs	r3, #10
 8001b22:	4023      	ands	r3, r4
 8001b24:	2b0a      	cmp	r3, #10
 8001b26:	d024      	beq.n	8001b72 <dwt_initialise+0xae>
        pdw1000local->otprev = 0; // If OTP valuse are not used, if this API is called after DW1000 IC has been woken up
 8001b28:	4b54      	ldr	r3, [pc, #336]	; (8001c7c <dwt_initialise+0x1b8>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	72da      	strb	r2, [r3, #11]
    uint16 otp_xtaltrim_and_rev = 0;
 8001b30:	2000      	movs	r0, #0
 8001b32:	e026      	b.n	8001b82 <dwt_initialise+0xbe>
        dwt_softreset(); // Make sure the device is completely reset before starting initialisation
 8001b34:	f7ff ff96 	bl	8001a64 <dwt_softreset>
 8001b38:	e7db      	b.n	8001af2 <dwt_initialise+0x2e>
            dwt_write8bitoffsetreg(OTP_IF_ID, OTP_SF, OTP_SF_LDO_KICK); // Set load LDO kick bit
 8001b3a:	2202      	movs	r2, #2
 8001b3c:	2112      	movs	r1, #18
 8001b3e:	202d      	movs	r0, #45	; 0x2d
 8001b40:	f7ff fa85 	bl	800104e <dwt_write8bitoffsetreg>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDO; // LDO tune must be kicked at wake-up
 8001b44:	4b4d      	ldr	r3, [pc, #308]	; (8001c7c <dwt_initialise+0x1b8>)
 8001b46:	681a      	ldr	r2, [r3, #0]
 8001b48:	8ad1      	ldrh	r1, [r2, #22]
 8001b4a:	2380      	movs	r3, #128	; 0x80
 8001b4c:	015b      	lsls	r3, r3, #5
 8001b4e:	430b      	orrs	r3, r1
 8001b50:	82d3      	strh	r3, [r2, #22]
 8001b52:	e7e3      	b.n	8001b1c <dwt_initialise+0x58>
        if(dwt_read32bitoffsetreg(RF_CONF_ID, LDOTUNE) != LDOTUNE_DEFAULT)
 8001b54:	2130      	movs	r1, #48	; 0x30
 8001b56:	2028      	movs	r0, #40	; 0x28
 8001b58:	f7ff fa18 	bl	8000f8c <dwt_read32bitoffsetreg>
 8001b5c:	4b49      	ldr	r3, [pc, #292]	; (8001c84 <dwt_initialise+0x1c0>)
 8001b5e:	4298      	cmp	r0, r3
 8001b60:	d0dc      	beq.n	8001b1c <dwt_initialise+0x58>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDO;
 8001b62:	4b46      	ldr	r3, [pc, #280]	; (8001c7c <dwt_initialise+0x1b8>)
 8001b64:	681a      	ldr	r2, [r3, #0]
 8001b66:	8ad1      	ldrh	r1, [r2, #22]
 8001b68:	2380      	movs	r3, #128	; 0x80
 8001b6a:	015b      	lsls	r3, r3, #5
 8001b6c:	430b      	orrs	r3, r1
 8001b6e:	82d3      	strh	r3, [r2, #22]
 8001b70:	e7d4      	b.n	8001b1c <dwt_initialise+0x58>
        otp_xtaltrim_and_rev = _dwt_otpread(XTRIM_ADDRESS) & 0xffff;        // Read 32 bit value, XTAL trim val is in low octet-0 (5 bits)
 8001b72:	201e      	movs	r0, #30
 8001b74:	f7ff face 	bl	8001114 <_dwt_otpread>
 8001b78:	b280      	uxth	r0, r0
        pdw1000local->otprev = (otp_xtaltrim_and_rev >> 8) & 0xff;          // OTP revision is the next byte
 8001b7a:	4b40      	ldr	r3, [pc, #256]	; (8001c7c <dwt_initialise+0x1b8>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	0a02      	lsrs	r2, r0, #8
 8001b80:	72da      	strb	r2, [r3, #11]
    if(!(DWT_DW_WAKE_UP & config))
 8001b82:	2d00      	cmp	r5, #0
 8001b84:	d105      	bne.n	8001b92 <dwt_initialise+0xce>
        if ((otp_xtaltrim_and_rev & 0x1F) == 0) // A value of 0 means that the crystal has not been trimmed
 8001b86:	06c3      	lsls	r3, r0, #27
 8001b88:	d100      	bne.n	8001b8c <dwt_initialise+0xc8>
            otp_xtaltrim_and_rev = FS_XTALT_MIDRANGE ; // Set to mid-range if no calibration value inside
 8001b8a:	2010      	movs	r0, #16
        dwt_setxtaltrim((uint8)otp_xtaltrim_and_rev);
 8001b8c:	b2c0      	uxtb	r0, r0
 8001b8e:	f7ff ff8d 	bl	8001aac <dwt_setxtaltrim>
    if(DWT_READ_OTP_PID & config)
 8001b92:	06e3      	lsls	r3, r4, #27
 8001b94:	d43d      	bmi.n	8001c12 <dwt_initialise+0x14e>
        pdw1000local->partID = 0;
 8001b96:	4b39      	ldr	r3, [pc, #228]	; (8001c7c <dwt_initialise+0x1b8>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	601a      	str	r2, [r3, #0]
    if(DWT_READ_OTP_LID & config)
 8001b9e:	06a3      	lsls	r3, r4, #26
 8001ba0:	d43e      	bmi.n	8001c20 <dwt_initialise+0x15c>
        pdw1000local->lotID = 0;
 8001ba2:	4b36      	ldr	r3, [pc, #216]	; (8001c7c <dwt_initialise+0x1b8>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	605a      	str	r2, [r3, #4]
    if(DWT_READ_OTP_BAT & config)
 8001baa:	0663      	lsls	r3, r4, #25
 8001bac:	d43f      	bmi.n	8001c2e <dwt_initialise+0x16a>
        pdw1000local->vBatP = 0;
 8001bae:	4b33      	ldr	r3, [pc, #204]	; (8001c7c <dwt_initialise+0x1b8>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	721a      	strb	r2, [r3, #8]
    if(DWT_READ_OTP_TMP & config)
 8001bb6:	0623      	lsls	r3, r4, #24
 8001bb8:	d440      	bmi.n	8001c3c <dwt_initialise+0x178>
        pdw1000local->tempP = 0;
 8001bba:	4b30      	ldr	r3, [pc, #192]	; (8001c7c <dwt_initialise+0x1b8>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	725a      	strb	r2, [r3, #9]
    if(!(DWT_DW_WAKE_UP & config))
 8001bc2:	2d00      	cmp	r5, #0
 8001bc4:	d14d      	bne.n	8001c62 <dwt_initialise+0x19e>
        if(DWT_LOADUCODE & config)
 8001bc6:	07e3      	lsls	r3, r4, #31
 8001bc8:	d53f      	bpl.n	8001c4a <dwt_initialise+0x186>
            _dwt_loaducodefromrom();
 8001bca:	f7ff fda1 	bl	8001710 <_dwt_loaducodefromrom>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDE; // microcode must be loaded at wake-up if loaded on initialisation
 8001bce:	4b2b      	ldr	r3, [pc, #172]	; (8001c7c <dwt_initialise+0x1b8>)
 8001bd0:	681a      	ldr	r2, [r3, #0]
 8001bd2:	8ad1      	ldrh	r1, [r2, #22]
 8001bd4:	2380      	movs	r3, #128	; 0x80
 8001bd6:	011b      	lsls	r3, r3, #4
 8001bd8:	430b      	orrs	r3, r1
 8001bda:	82d3      	strh	r3, [r2, #22]
    _dwt_enableclocks(ENABLE_ALL_SEQ); // Enable clocks for sequencing
 8001bdc:	2001      	movs	r0, #1
 8001bde:	f7ff fd2b 	bl	8001638 <_dwt_enableclocks>
    dwt_write8bitoffsetreg(AON_ID, AON_CFG1_OFFSET, 0x00);
 8001be2:	2200      	movs	r2, #0
 8001be4:	210a      	movs	r1, #10
 8001be6:	202c      	movs	r0, #44	; 0x2c
 8001be8:	f7ff fa31 	bl	800104e <dwt_write8bitoffsetreg>
    pdw1000local->sysCFGreg = dwt_read32bitreg(SYS_CFG_ID) ; // Read sysconfig register
 8001bec:	4c23      	ldr	r4, [pc, #140]	; (8001c7c <dwt_initialise+0x1b8>)
 8001bee:	6825      	ldr	r5, [r4, #0]
 8001bf0:	2100      	movs	r1, #0
 8001bf2:	2004      	movs	r0, #4
 8001bf4:	f7ff f9ca 	bl	8000f8c <dwt_read32bitoffsetreg>
 8001bf8:	6128      	str	r0, [r5, #16]
    pdw1000local->longFrames = (pdw1000local->sysCFGreg & SYS_CFG_PHR_MODE_11) >> SYS_CFG_PHR_MODE_SHFT ; //configure longFrames
 8001bfa:	6824      	ldr	r4, [r4, #0]
 8001bfc:	8a62      	ldrh	r2, [r4, #18]
 8001bfe:	2303      	movs	r3, #3
 8001c00:	4013      	ands	r3, r2
 8001c02:	72a3      	strb	r3, [r4, #10]
    pdw1000local->txFCTRL = dwt_read32bitreg(TX_FCTRL_ID) ;
 8001c04:	2100      	movs	r1, #0
 8001c06:	2008      	movs	r0, #8
 8001c08:	f7ff f9c0 	bl	8000f8c <dwt_read32bitoffsetreg>
 8001c0c:	60e0      	str	r0, [r4, #12]
    return DWT_SUCCESS ;
 8001c0e:	2000      	movs	r0, #0
} // end dwt_initialise()
 8001c10:	bd70      	pop	{r4, r5, r6, pc}
        pdw1000local->partID = _dwt_otpread(PARTID_ADDRESS);
 8001c12:	4b1a      	ldr	r3, [pc, #104]	; (8001c7c <dwt_initialise+0x1b8>)
 8001c14:	681e      	ldr	r6, [r3, #0]
 8001c16:	2006      	movs	r0, #6
 8001c18:	f7ff fa7c 	bl	8001114 <_dwt_otpread>
 8001c1c:	6030      	str	r0, [r6, #0]
 8001c1e:	e7be      	b.n	8001b9e <dwt_initialise+0xda>
        pdw1000local->lotID = _dwt_otpread(LOTID_ADDRESS);
 8001c20:	4b16      	ldr	r3, [pc, #88]	; (8001c7c <dwt_initialise+0x1b8>)
 8001c22:	681e      	ldr	r6, [r3, #0]
 8001c24:	2007      	movs	r0, #7
 8001c26:	f7ff fa75 	bl	8001114 <_dwt_otpread>
 8001c2a:	6070      	str	r0, [r6, #4]
 8001c2c:	e7bd      	b.n	8001baa <dwt_initialise+0xe6>
        pdw1000local->vBatP = _dwt_otpread(VBAT_ADDRESS) & 0xff;
 8001c2e:	2008      	movs	r0, #8
 8001c30:	f7ff fa70 	bl	8001114 <_dwt_otpread>
 8001c34:	4b11      	ldr	r3, [pc, #68]	; (8001c7c <dwt_initialise+0x1b8>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	7218      	strb	r0, [r3, #8]
 8001c3a:	e7bc      	b.n	8001bb6 <dwt_initialise+0xf2>
        pdw1000local->tempP = _dwt_otpread(VTEMP_ADDRESS) & 0xff;
 8001c3c:	2009      	movs	r0, #9
 8001c3e:	f7ff fa69 	bl	8001114 <_dwt_otpread>
 8001c42:	4b0e      	ldr	r3, [pc, #56]	; (8001c7c <dwt_initialise+0x1b8>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	7258      	strb	r0, [r3, #9]
 8001c48:	e7bb      	b.n	8001bc2 <dwt_initialise+0xfe>
            uint16 rega = dwt_read16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET+1) ;
 8001c4a:	2105      	movs	r1, #5
 8001c4c:	2036      	movs	r0, #54	; 0x36
 8001c4e:	f7ff f9c3 	bl	8000fd8 <dwt_read16bitoffsetreg>
            rega &= 0xFDFF ; // Clear LDERUN bit
 8001c52:	4a0d      	ldr	r2, [pc, #52]	; (8001c88 <dwt_initialise+0x1c4>)
 8001c54:	4002      	ands	r2, r0
 8001c56:	b292      	uxth	r2, r2
            dwt_write16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET+1, rega) ;
 8001c58:	2105      	movs	r1, #5
 8001c5a:	2036      	movs	r0, #54	; 0x36
 8001c5c:	f7ff fa18 	bl	8001090 <dwt_write16bitoffsetreg>
 8001c60:	e7bc      	b.n	8001bdc <dwt_initialise+0x118>
        if((DWT_DW_WUP_NO_UCODE & config) == 0)
 8001c62:	0763      	lsls	r3, r4, #29
 8001c64:	d4ba      	bmi.n	8001bdc <dwt_initialise+0x118>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDE;
 8001c66:	4b05      	ldr	r3, [pc, #20]	; (8001c7c <dwt_initialise+0x1b8>)
 8001c68:	681a      	ldr	r2, [r3, #0]
 8001c6a:	8ad1      	ldrh	r1, [r2, #22]
 8001c6c:	2380      	movs	r3, #128	; 0x80
 8001c6e:	011b      	lsls	r3, r3, #4
 8001c70:	430b      	orrs	r3, r1
 8001c72:	82d3      	strh	r3, [r2, #22]
 8001c74:	e7b2      	b.n	8001bdc <dwt_initialise+0x118>
        return DWT_ERROR ;
 8001c76:	2001      	movs	r0, #1
 8001c78:	4240      	negs	r0, r0
 8001c7a:	e7c9      	b.n	8001c10 <dwt_initialise+0x14c>
 8001c7c:	20000000 	.word	0x20000000
 8001c80:	deca0130 	.word	0xdeca0130
 8001c84:	88888888 	.word	0x88888888
 8001c88:	fffffdff 	.word	0xfffffdff

08001c8c <deca_sleep>:

#include <deca_device_api.h>
#include "port_platform.h"

void deca_sleep(unsigned int time_ms)
{
 8001c8c:	b510      	push	{r4, lr}
 8001c8e:	0004      	movs	r4, r0
    /* This assumes that the tick has a period of exactly one millisecond. See CLOCKS_PER_SEC define. */
    unsigned long end = portGetTickCount() + time_ms;
 8001c90:	f000 f94a 	bl	8001f28 <portGetTickCount>
 8001c94:	1904      	adds	r4, r0, r4
    while ((signed long)(portGetTickCount() - end) <= 0);
 8001c96:	f000 f947 	bl	8001f28 <portGetTickCount>
 8001c9a:	1b00      	subs	r0, r0, r4
 8001c9c:	2800      	cmp	r0, #0
 8001c9e:	ddfa      	ble.n	8001c96 <deca_sleep+0xa>
}
 8001ca0:	bd10      	pop	{r4, pc}
	...

08001ca4 <writetospi>:
 */
int writetospi(uint16       headerLength,
               const uint8  *headerBuffer,
               uint32       bodyLength,
               const uint8  *bodyBuffer)
{
 8001ca4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ca6:	46c6      	mov	lr, r8
 8001ca8:	b500      	push	{lr}
 8001caa:	0005      	movs	r5, r0
 8001cac:	4688      	mov	r8, r1
 8001cae:	0016      	movs	r6, r2
 8001cb0:	001f      	movs	r7, r3

    decaIrqStatus_t  stat ;
    stat = decamutexon() ;
 8001cb2:	f000 f975 	bl	8001fa0 <decamutexon>
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 8001cb6:	4b17      	ldr	r3, [pc, #92]	; (8001d14 <writetospi+0x70>)
 8001cb8:	2201      	movs	r2, #1
 8001cba:	629a      	str	r2, [r3, #40]	; 0x28

    LL_GPIO_ResetOutputPin(DW_NSS_GPIO_Port, DW_NSS_Pin ); /**< Put chip select line low */

    while(headerLength--){
 8001cbc:	1e6c      	subs	r4, r5, #1
 8001cbe:	b2a4      	uxth	r4, r4
 8001cc0:	2d00      	cmp	r5, #0
 8001cc2:	d011      	beq.n	8001ce8 <writetospi+0x44>
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(SPI_TypeDef *SPIx)
{
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8001cc4:	4d14      	ldr	r5, [pc, #80]	; (8001d18 <writetospi+0x74>)
 8001cc6:	68ad      	ldr	r5, [r5, #8]
 8001cc8:	07ab      	lsls	r3, r5, #30
 8001cca:	d5fb      	bpl.n	8001cc4 <writetospi+0x20>
        while ( LL_SPI_IsActiveFlag_TXE(SPI1) == 0 )
        {
        }
        LL_SPI_TransmitData8(SPI1, *headerBuffer++);
 8001ccc:	4643      	mov	r3, r8
 8001cce:	781a      	ldrb	r2, [r3, #0]
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
  *spidr = TxData;
 8001cd0:	4b11      	ldr	r3, [pc, #68]	; (8001d18 <writetospi+0x74>)
 8001cd2:	731a      	strb	r2, [r3, #12]
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	469c      	mov	ip, r3
 8001cd8:	44e0      	add	r8, ip
    while(headerLength--){
 8001cda:	0025      	movs	r5, r4
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 8001cdc:	e7ee      	b.n	8001cbc <writetospi+0x18>

    while(bodyLength--){
        while ( LL_SPI_IsActiveFlag_TXE(SPI1) == 0 )
        {
        }
        LL_SPI_TransmitData8(SPI1, *bodyBuffer++);
 8001cde:	7839      	ldrb	r1, [r7, #0]
  *spidr = TxData;
 8001ce0:	4a0d      	ldr	r2, [pc, #52]	; (8001d18 <writetospi+0x74>)
 8001ce2:	7311      	strb	r1, [r2, #12]
 8001ce4:	3701      	adds	r7, #1
    while(bodyLength--){
 8001ce6:	001e      	movs	r6, r3
 8001ce8:	1e73      	subs	r3, r6, #1
 8001cea:	2e00      	cmp	r6, #0
 8001cec:	d004      	beq.n	8001cf8 <writetospi+0x54>
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8001cee:	4a0a      	ldr	r2, [pc, #40]	; (8001d18 <writetospi+0x74>)
 8001cf0:	6892      	ldr	r2, [r2, #8]
 8001cf2:	0792      	lsls	r2, r2, #30
 8001cf4:	d5fb      	bpl.n	8001cee <writetospi+0x4a>
 8001cf6:	e7f2      	b.n	8001cde <writetospi+0x3a>
  return ((READ_BIT(SPIx->SR, SPI_SR_BSY) == (SPI_SR_BSY)) ? 1UL : 0UL);
 8001cf8:	4b07      	ldr	r3, [pc, #28]	; (8001d18 <writetospi+0x74>)
 8001cfa:	689b      	ldr	r3, [r3, #8]
 8001cfc:	061b      	lsls	r3, r3, #24
 8001cfe:	d4fb      	bmi.n	8001cf8 <writetospi+0x54>
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001d00:	4b04      	ldr	r3, [pc, #16]	; (8001d14 <writetospi+0x70>)
 8001d02:	2201      	movs	r2, #1
 8001d04:	619a      	str	r2, [r3, #24]
    {
    }

    LL_GPIO_SetOutputPin(DW_NSS_GPIO_Port, DW_NSS_Pin); /**< Put chip select line high */

    decamutexoff(stat);
 8001d06:	f000 f94d 	bl	8001fa4 <decamutexoff>
    return 0;
} // end writetospi()
 8001d0a:	2000      	movs	r0, #0
 8001d0c:	bc80      	pop	{r7}
 8001d0e:	46b8      	mov	r8, r7
 8001d10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d12:	46c0      	nop			; (mov r8, r8)
 8001d14:	50000400 	.word	0x50000400
 8001d18:	40013000 	.word	0x40013000

08001d1c <readfromspi>:
//#pragma GCC optimize ("O3")
int readfromspi(uint16      headerLength,
                const uint8 *headerBuffer,
                uint32      readlength,
                uint8       *readBuffer)
{
 8001d1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d1e:	46c6      	mov	lr, r8
 8001d20:	b500      	push	{lr}
 8001d22:	0005      	movs	r5, r0
 8001d24:	4688      	mov	r8, r1
 8001d26:	0017      	movs	r7, r2
 8001d28:	001e      	movs	r6, r3
 8001d2a:	4b1f      	ldr	r3, [pc, #124]	; (8001da8 <readfromspi+0x8c>)
 8001d2c:	689b      	ldr	r3, [r3, #8]
 8001d2e:	061b      	lsls	r3, r3, #24
 8001d30:	d4fb      	bmi.n	8001d2a <readfromspi+0xe>
    {
    }

    /* Process Locked */
    decaIrqStatus_t  stat ;
    stat = decamutexon() ;
 8001d32:	f000 f935 	bl	8001fa0 <decamutexon>
  WRITE_REG(GPIOx->BRR, PinMask);
 8001d36:	4b1d      	ldr	r3, [pc, #116]	; (8001dac <readfromspi+0x90>)
 8001d38:	2201      	movs	r2, #1
 8001d3a:	629a      	str	r2, [r3, #40]	; 0x28

    LL_GPIO_ResetOutputPin(DW_NSS_GPIO_Port, DW_NSS_Pin); /**< Put chip select line low */

    /* Send header */
    while(headerLength--){
 8001d3c:	1e6c      	subs	r4, r5, #1
 8001d3e:	b2a4      	uxth	r4, r4
 8001d40:	2d00      	cmp	r5, #0
 8001d42:	d00c      	beq.n	8001d5e <readfromspi+0x42>
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8001d44:	4b18      	ldr	r3, [pc, #96]	; (8001da8 <readfromspi+0x8c>)
 8001d46:	689d      	ldr	r5, [r3, #8]
 8001d48:	07ab      	lsls	r3, r5, #30
 8001d4a:	d5fb      	bpl.n	8001d44 <readfromspi+0x28>
        while ( LL_SPI_IsActiveFlag_TXE(SPI1) == 0 )
        {
        }
        LL_SPI_TransmitData8(SPI1, *headerBuffer++);
 8001d4c:	4643      	mov	r3, r8
 8001d4e:	781a      	ldrb	r2, [r3, #0]
  *spidr = TxData;
 8001d50:	4b15      	ldr	r3, [pc, #84]	; (8001da8 <readfromspi+0x8c>)
 8001d52:	731a      	strb	r2, [r3, #12]
 8001d54:	2301      	movs	r3, #1
 8001d56:	469c      	mov	ip, r3
 8001d58:	44e0      	add	r8, ip
    while(headerLength--){
 8001d5a:	0025      	movs	r5, r4
}
 8001d5c:	e7ee      	b.n	8001d3c <readfromspi+0x20>
  return ((READ_BIT(SPIx->SR, SPI_SR_BSY) == (SPI_SR_BSY)) ? 1UL : 0UL);
 8001d5e:	4b12      	ldr	r3, [pc, #72]	; (8001da8 <readfromspi+0x8c>)
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	061b      	lsls	r3, r3, #24
 8001d64:	d4fb      	bmi.n	8001d5e <readfromspi+0x42>
  return (uint8_t)(READ_REG(SPIx->DR));
 8001d66:	4b10      	ldr	r3, [pc, #64]	; (8001da8 <readfromspi+0x8c>)
 8001d68:	68db      	ldr	r3, [r3, #12]
 8001d6a:	e004      	b.n	8001d76 <readfromspi+0x5a>
 8001d6c:	4a0e      	ldr	r2, [pc, #56]	; (8001da8 <readfromspi+0x8c>)
 8001d6e:	68d2      	ldr	r2, [r2, #12]
        /* Wait until RXNE flag is set to read data */
        while ( LL_SPI_IsActiveFlag_RXNE(SPI1) == 0 )
        {
        }

        (*readBuffer++) = LL_SPI_ReceiveData8(SPI1);
 8001d70:	7032      	strb	r2, [r6, #0]
 8001d72:	3601      	adds	r6, #1
    while(readlength-- > 0)
 8001d74:	001f      	movs	r7, r3
 8001d76:	1e7b      	subs	r3, r7, #1
 8001d78:	2f00      	cmp	r7, #0
 8001d7a:	d00b      	beq.n	8001d94 <readfromspi+0x78>
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8001d7c:	4a0a      	ldr	r2, [pc, #40]	; (8001da8 <readfromspi+0x8c>)
 8001d7e:	6892      	ldr	r2, [r2, #8]
 8001d80:	0792      	lsls	r2, r2, #30
 8001d82:	d5fb      	bpl.n	8001d7c <readfromspi+0x60>
  *spidr = TxData;
 8001d84:	4a08      	ldr	r2, [pc, #32]	; (8001da8 <readfromspi+0x8c>)
 8001d86:	2100      	movs	r1, #0
 8001d88:	7311      	strb	r1, [r2, #12]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8001d8a:	4a07      	ldr	r2, [pc, #28]	; (8001da8 <readfromspi+0x8c>)
 8001d8c:	6892      	ldr	r2, [r2, #8]
 8001d8e:	07d2      	lsls	r2, r2, #31
 8001d90:	d5fb      	bpl.n	8001d8a <readfromspi+0x6e>
 8001d92:	e7eb      	b.n	8001d6c <readfromspi+0x50>
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001d94:	4b05      	ldr	r3, [pc, #20]	; (8001dac <readfromspi+0x90>)
 8001d96:	2201      	movs	r2, #1
 8001d98:	619a      	str	r2, [r3, #24]
    }

    LL_GPIO_SetOutputPin(DW_NSS_GPIO_Port, DW_NSS_Pin ); /**< Put chip select line high */

    /* Process Unlocked */
    decamutexoff(stat);
 8001d9a:	f000 f903 	bl	8001fa4 <decamutexoff>
    return 0;
} // end readfromspi()
 8001d9e:	2000      	movs	r0, #0
 8001da0:	bc80      	pop	{r7}
 8001da2:	46b8      	mov	r8, r7
 8001da4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001da6:	46c0      	nop			; (mov r8, r8)
 8001da8:	40013000 	.word	0x40013000
 8001dac:	50000400 	.word	0x50000400

08001db0 <__io_putchar>:
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 8001db0:	4b04      	ldr	r3, [pc, #16]	; (8001dc4 <__io_putchar+0x14>)
 8001db2:	69db      	ldr	r3, [r3, #28]
 8001db4:	061b      	lsls	r3, r3, #24
 8001db6:	d5fb      	bpl.n	8001db0 <__io_putchar>
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
  USARTx->TDR = Value;
 8001db8:	23ff      	movs	r3, #255	; 0xff
 8001dba:	4003      	ands	r3, r0
 8001dbc:	4a01      	ldr	r2, [pc, #4]	; (8001dc4 <__io_putchar+0x14>)
 8001dbe:	6293      	str	r3, [r2, #40]	; 0x28
    // TODO need to implement timeout
    // or may be not...
    while ( !LL_USART_IsActiveFlag_TXE( USART2 ) );
    LL_USART_TransmitData8(USART2, (uint8_t)ch);
    return ch;
}
 8001dc0:	4770      	bx	lr
 8001dc2:	46c0      	nop			; (mov r8, r8)
 8001dc4:	40004400 	.word	0x40004400

08001dc8 <_write>:

int _write(int file, char *ptr, int len)
{
 8001dc8:	b570      	push	{r4, r5, r6, lr}
 8001dca:	0016      	movs	r6, r2
    int DataIdx;
    for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dcc:	2400      	movs	r4, #0
 8001dce:	42b4      	cmp	r4, r6
 8001dd0:	da06      	bge.n	8001de0 <_write+0x18>
    {
        __io_putchar(*ptr++);
 8001dd2:	1c4d      	adds	r5, r1, #1
 8001dd4:	7808      	ldrb	r0, [r1, #0]
 8001dd6:	f7ff ffeb 	bl	8001db0 <__io_putchar>
    for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dda:	3401      	adds	r4, #1
        __io_putchar(*ptr++);
 8001ddc:	0029      	movs	r1, r5
 8001dde:	e7f6      	b.n	8001dce <_write+0x6>
    }
    return len;
}
 8001de0:	0030      	movs	r0, r6
 8001de2:	bd70      	pop	{r4, r5, r6, pc}

08001de4 <deca_uart_rx_data_ready>:

bool deca_uart_rx_data_ready(void)
{
    return uart_rx_data_ready;
 8001de4:	4b01      	ldr	r3, [pc, #4]	; (8001dec <deca_uart_rx_data_ready+0x8>)
 8001de6:	7818      	ldrb	r0, [r3, #0]
}
 8001de8:	4770      	bx	lr
 8001dea:	46c0      	nop			; (mov r8, r8)
 8001dec:	20000254 	.word	0x20000254

08001df0 <UART_RxCpltCallback>:

extern bool SerialData;

void UART_RxCpltCallback( uint8_t data )
{
 8001df0:	b510      	push	{r4, lr}
 8001df2:	0004      	movs	r4, r0

    /* Local echo*/
    __io_putchar((int)data);
 8001df4:	f7ff ffdc 	bl	8001db0 <__io_putchar>
  return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 8001df8:	4b1c      	ldr	r3, [pc, #112]	; (8001e6c <UART_RxCpltCallback+0x7c>)
 8001dfa:	69db      	ldr	r3, [r3, #28]
 8001dfc:	065b      	lsls	r3, r3, #25
 8001dfe:	d5fb      	bpl.n	8001df8 <UART_RxCpltCallback+0x8>
    // wait for transmission complete
    while ( !LL_USART_IsActiveFlag_TC( USART2 ) );

    SerialData = true;
 8001e00:	4b1b      	ldr	r3, [pc, #108]	; (8001e70 <UART_RxCpltCallback+0x80>)
 8001e02:	2201      	movs	r2, #1
 8001e04:	701a      	strb	r2, [r3, #0]

    if ( !uart_rx_data_ready  )
 8001e06:	4b1b      	ldr	r3, [pc, #108]	; (8001e74 <UART_RxCpltCallback+0x84>)
 8001e08:	781b      	ldrb	r3, [r3, #0]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d113      	bne.n	8001e36 <UART_RxCpltCallback+0x46>
    {
        /* to allow backspace in shell - thanks Yves, very useful feature */
        if( data == '\b')
 8001e0e:	2c08      	cmp	r4, #8
 8001e10:	d00d      	beq.n	8001e2e <UART_RxCpltCallback+0x3e>
                while ( !LL_USART_IsActiveFlag_TC( USART2 ) );
                rx_buf_index--;
                rx_buf[rx_buf_index] = 0;
            }
        }
        else if ( data == '\r' )
 8001e12:	2c0d      	cmp	r4, #13
 8001e14:	d022      	beq.n	8001e5c <UART_RxCpltCallback+0x6c>
            uart_rx_data_ready = true;
            rx_buf[rx_buf_index] = 0;
        }
        else
        {
            rx_buf[rx_buf_index++] = data;
 8001e16:	4917      	ldr	r1, [pc, #92]	; (8001e74 <UART_RxCpltCallback+0x84>)
 8001e18:	684a      	ldr	r2, [r1, #4]
 8001e1a:	1c53      	adds	r3, r2, #1
 8001e1c:	604b      	str	r3, [r1, #4]
 8001e1e:	4916      	ldr	r1, [pc, #88]	; (8001e78 <UART_RxCpltCallback+0x88>)
 8001e20:	548c      	strb	r4, [r1, r2]
            if ( rx_buf_index >= RX_BUF_SIZE )
 8001e22:	2bff      	cmp	r3, #255	; 0xff
 8001e24:	d907      	bls.n	8001e36 <UART_RxCpltCallback+0x46>
            {
                uart_rx_data_ready = true;           // buffer is full, signal to proceed it
 8001e26:	4b13      	ldr	r3, [pc, #76]	; (8001e74 <UART_RxCpltCallback+0x84>)
 8001e28:	2201      	movs	r2, #1
 8001e2a:	701a      	strb	r2, [r3, #0]
            }
        }
    }
}
 8001e2c:	e003      	b.n	8001e36 <UART_RxCpltCallback+0x46>
            if(rx_buf_index !=0)
 8001e2e:	4b11      	ldr	r3, [pc, #68]	; (8001e74 <UART_RxCpltCallback+0x84>)
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d100      	bne.n	8001e38 <UART_RxCpltCallback+0x48>
}
 8001e36:	bd10      	pop	{r4, pc}
                __io_putchar((int)' ');
 8001e38:	2020      	movs	r0, #32
 8001e3a:	f7ff ffb9 	bl	8001db0 <__io_putchar>
                __io_putchar((int)'\b');
 8001e3e:	2008      	movs	r0, #8
 8001e40:	f7ff ffb6 	bl	8001db0 <__io_putchar>
 8001e44:	4b09      	ldr	r3, [pc, #36]	; (8001e6c <UART_RxCpltCallback+0x7c>)
 8001e46:	69db      	ldr	r3, [r3, #28]
 8001e48:	065b      	lsls	r3, r3, #25
 8001e4a:	d5fb      	bpl.n	8001e44 <UART_RxCpltCallback+0x54>
                rx_buf_index--;
 8001e4c:	4a09      	ldr	r2, [pc, #36]	; (8001e74 <UART_RxCpltCallback+0x84>)
 8001e4e:	6853      	ldr	r3, [r2, #4]
 8001e50:	3b01      	subs	r3, #1
 8001e52:	6053      	str	r3, [r2, #4]
                rx_buf[rx_buf_index] = 0;
 8001e54:	4a08      	ldr	r2, [pc, #32]	; (8001e78 <UART_RxCpltCallback+0x88>)
 8001e56:	2100      	movs	r1, #0
 8001e58:	54d1      	strb	r1, [r2, r3]
 8001e5a:	e7ec      	b.n	8001e36 <UART_RxCpltCallback+0x46>
            uart_rx_data_ready = true;
 8001e5c:	4b05      	ldr	r3, [pc, #20]	; (8001e74 <UART_RxCpltCallback+0x84>)
 8001e5e:	2201      	movs	r2, #1
 8001e60:	701a      	strb	r2, [r3, #0]
            rx_buf[rx_buf_index] = 0;
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	4a04      	ldr	r2, [pc, #16]	; (8001e78 <UART_RxCpltCallback+0x88>)
 8001e66:	2100      	movs	r1, #0
 8001e68:	54d1      	strb	r1, [r2, r3]
 8001e6a:	e7e4      	b.n	8001e36 <UART_RxCpltCallback+0x46>
 8001e6c:	40004400 	.word	0x40004400
 8001e70:	20000378 	.word	0x20000378
 8001e74:	20000254 	.word	0x20000254
 8001e78:	2000025c 	.word	0x2000025c

08001e7c <port_tx_msg>:

void port_tx_msg(uint8_t *ptr, int len)
{
 8001e7c:	b510      	push	{r4, lr}
 8001e7e:	000a      	movs	r2, r1
    _write(0, (char *)ptr,len);
 8001e80:	0001      	movs	r1, r0
 8001e82:	2000      	movs	r0, #0
 8001e84:	f7ff ffa0 	bl	8001dc8 <_write>
}
 8001e88:	bd10      	pop	{r4, pc}
	...

08001e8c <dw_printf>:

#include <stdio.h>
#include <stdarg.h>

void dw_printf( const char * format, ... )
{
 8001e8c:	b40f      	push	{r0, r1, r2, r3}
 8001e8e:	b500      	push	{lr}
 8001e90:	b0c3      	sub	sp, #268	; 0x10c
 8001e92:	ab44      	add	r3, sp, #272	; 0x110
 8001e94:	cb04      	ldmia	r3!, {r2}
    char buffer[256];
    int sz;
    va_list args;
    va_start (args, format);
 8001e96:	9301      	str	r3, [sp, #4]
    sz = vsnprintf (buffer, sizeof(buffer) , format, args);
 8001e98:	2180      	movs	r1, #128	; 0x80
 8001e9a:	0049      	lsls	r1, r1, #1
 8001e9c:	a802      	add	r0, sp, #8
 8001e9e:	f001 ff4f 	bl	8003d40 <vsniprintf>
    if( ( sz >= 0 ) && ( sz <= sizeof(buffer) && ( rx_buf_index == 0 ) ) )
 8001ea2:	2800      	cmp	r0, #0
 8001ea4:	db07      	blt.n	8001eb6 <dw_printf+0x2a>
 8001ea6:	2380      	movs	r3, #128	; 0x80
 8001ea8:	005b      	lsls	r3, r3, #1
 8001eaa:	4298      	cmp	r0, r3
 8001eac:	d803      	bhi.n	8001eb6 <dw_printf+0x2a>
 8001eae:	4b06      	ldr	r3, [pc, #24]	; (8001ec8 <dw_printf+0x3c>)
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d003      	beq.n	8001ebe <dw_printf+0x32>
        port_tx_msg ((uint8_t *)buffer,sz);
    }
    va_end (args);

    return;
}
 8001eb6:	b043      	add	sp, #268	; 0x10c
 8001eb8:	bc08      	pop	{r3}
 8001eba:	b004      	add	sp, #16
 8001ebc:	4718      	bx	r3
        port_tx_msg ((uint8_t *)buffer,sz);
 8001ebe:	0001      	movs	r1, r0
 8001ec0:	a802      	add	r0, sp, #8
 8001ec2:	f7ff ffdb 	bl	8001e7c <port_tx_msg>
    return;
 8001ec6:	e7f6      	b.n	8001eb6 <dw_printf+0x2a>
 8001ec8:	20000254 	.word	0x20000254

08001ecc <deca_uart_receive>:
 *
 * @param[in] address to buffer, max buffer size
 * @param[out] actual number of bytes in buffer
 * */
uint32_t deca_uart_receive( uint8_t * buffer, size_t size)
{
 8001ecc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ece:	46c6      	mov	lr, r8
 8001ed0:	b500      	push	{lr}
 8001ed2:	0005      	movs	r5, r0
 8001ed4:	000c      	movs	r4, r1
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ed6:	b672      	cpsid	i
    __disable_irq();

    uint32_t count = rx_buf_index;
 8001ed8:	4b0d      	ldr	r3, [pc, #52]	; (8001f10 <deca_uart_receive+0x44>)
 8001eda:	685e      	ldr	r6, [r3, #4]
    memcpy(buffer, rx_buf, MIN(rx_buf_index, size));
 8001edc:	0032      	movs	r2, r6
 8001ede:	428e      	cmp	r6, r1
 8001ee0:	d900      	bls.n	8001ee4 <deca_uart_receive+0x18>
 8001ee2:	000a      	movs	r2, r1
 8001ee4:	490b      	ldr	r1, [pc, #44]	; (8001f14 <deca_uart_receive+0x48>)
 8001ee6:	0028      	movs	r0, r5
 8001ee8:	f001 fde0 	bl	8003aac <memcpy>
    rx_buf_index = 0;
 8001eec:	4b08      	ldr	r3, [pc, #32]	; (8001f10 <deca_uart_receive+0x44>)
 8001eee:	4698      	mov	r8, r3
 8001ef0:	2700      	movs	r7, #0
 8001ef2:	605f      	str	r7, [r3, #4]
    buffer[size-1] = 0;
 8001ef4:	3c01      	subs	r4, #1
 8001ef6:	192c      	adds	r4, r5, r4
 8001ef8:	7027      	strb	r7, [r4, #0]
    uint8_t data = '\n';

    __io_putchar(data);
 8001efa:	200a      	movs	r0, #10
 8001efc:	f7ff ff58 	bl	8001db0 <__io_putchar>
    uart_rx_data_ready = false;
 8001f00:	4643      	mov	r3, r8
 8001f02:	701f      	strb	r7, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001f04:	b662      	cpsie	i

    __enable_irq();

    return count;
}
 8001f06:	0030      	movs	r0, r6
 8001f08:	bc80      	pop	{r7}
 8001f0a:	46b8      	mov	r8, r7
 8001f0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f0e:	46c0      	nop			; (mov r8, r8)
 8001f10:	20000254 	.word	0x20000254
 8001f14:	2000025c 	.word	0x2000025c

08001f18 <IncSysTick>:
 *
 ******************************************************************************/

void IncSysTick()
{
    SysTickCount++;
 8001f18:	4a02      	ldr	r2, [pc, #8]	; (8001f24 <IncSysTick+0xc>)
 8001f1a:	6813      	ldr	r3, [r2, #0]
 8001f1c:	3301      	adds	r3, #1
 8001f1e:	6013      	str	r3, [r2, #0]
}
 8001f20:	4770      	bx	lr
 8001f22:	46c0      	nop			; (mov r8, r8)
 8001f24:	2000035c 	.word	0x2000035c

08001f28 <portGetTickCount>:
 *        The resolution of time32_incr is usually 1/1000 sec.
 * */
__INLINE uint32_t
portGetTickCount(void)
{
    return SysTickCount;
 8001f28:	4b01      	ldr	r3, [pc, #4]	; (8001f30 <portGetTickCount+0x8>)
 8001f2a:	6818      	ldr	r0, [r3, #0]
}
 8001f2c:	4770      	bx	lr
 8001f2e:	46c0      	nop			; (mov r8, r8)
 8001f30:	2000035c 	.word	0x2000035c

08001f34 <port_set_dw1000_slowrate>:
  return ((READ_BIT(SPIx->SR, SPI_SR_BSY) == (SPI_SR_BSY)) ? 1UL : 0UL);
 8001f34:	4b0c      	ldr	r3, [pc, #48]	; (8001f68 <port_set_dw1000_slowrate+0x34>)
 8001f36:	689b      	ldr	r3, [r3, #8]
 8001f38:	061b      	lsls	r3, r3, #24
 8001f3a:	d4fb      	bmi.n	8001f34 <port_set_dw1000_slowrate>
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8001f3c:	4b0a      	ldr	r3, [pc, #40]	; (8001f68 <port_set_dw1000_slowrate+0x34>)
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	07db      	lsls	r3, r3, #31
 8001f42:	d501      	bpl.n	8001f48 <port_set_dw1000_slowrate+0x14>
  return (uint8_t)(READ_REG(SPIx->DR));
 8001f44:	4b08      	ldr	r3, [pc, #32]	; (8001f68 <port_set_dw1000_slowrate+0x34>)
 8001f46:	68db      	ldr	r3, [r3, #12]
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 8001f48:	4b07      	ldr	r3, [pc, #28]	; (8001f68 <port_set_dw1000_slowrate+0x34>)
 8001f4a:	6819      	ldr	r1, [r3, #0]
 8001f4c:	2040      	movs	r0, #64	; 0x40
 8001f4e:	4381      	bics	r1, r0
 8001f50:	6019      	str	r1, [r3, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_BR, BaudRate);
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	2138      	movs	r1, #56	; 0x38
 8001f56:	438a      	bics	r2, r1
 8001f58:	3920      	subs	r1, #32
 8001f5a:	430a      	orrs	r2, r1
 8001f5c:	601a      	str	r2, [r3, #0]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8001f5e:	681a      	ldr	r2, [r3, #0]
 8001f60:	4302      	orrs	r2, r0
 8001f62:	601a      	str	r2, [r3, #0]
    }

    LL_SPI_Disable(SPI1);
    LL_SPI_SetBaudRatePrescaler(SPI1, LL_SPI_BAUDRATEPRESCALER_DIV16 );
    LL_SPI_Enable(SPI1);
}
 8001f64:	4770      	bx	lr
 8001f66:	46c0      	nop			; (mov r8, r8)
 8001f68:	40013000 	.word	0x40013000

08001f6c <port_set_dw1000_fastrate>:
  return ((READ_BIT(SPIx->SR, SPI_SR_BSY) == (SPI_SR_BSY)) ? 1UL : 0UL);
 8001f6c:	4b0b      	ldr	r3, [pc, #44]	; (8001f9c <port_set_dw1000_fastrate+0x30>)
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	061b      	lsls	r3, r3, #24
 8001f72:	d4fb      	bmi.n	8001f6c <port_set_dw1000_fastrate>
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8001f74:	4b09      	ldr	r3, [pc, #36]	; (8001f9c <port_set_dw1000_fastrate+0x30>)
 8001f76:	689b      	ldr	r3, [r3, #8]
 8001f78:	07db      	lsls	r3, r3, #31
 8001f7a:	d501      	bpl.n	8001f80 <port_set_dw1000_fastrate+0x14>
  return (uint8_t)(READ_REG(SPIx->DR));
 8001f7c:	4b07      	ldr	r3, [pc, #28]	; (8001f9c <port_set_dw1000_fastrate+0x30>)
 8001f7e:	68db      	ldr	r3, [r3, #12]
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 8001f80:	4b06      	ldr	r3, [pc, #24]	; (8001f9c <port_set_dw1000_fastrate+0x30>)
 8001f82:	6819      	ldr	r1, [r3, #0]
 8001f84:	2040      	movs	r0, #64	; 0x40
 8001f86:	4381      	bics	r1, r0
 8001f88:	6019      	str	r1, [r3, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_BR, BaudRate);
 8001f8a:	6819      	ldr	r1, [r3, #0]
 8001f8c:	2238      	movs	r2, #56	; 0x38
 8001f8e:	4391      	bics	r1, r2
 8001f90:	6019      	str	r1, [r3, #0]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	4302      	orrs	r2, r0
 8001f96:	601a      	str	r2, [r3, #0]
    }

    LL_SPI_Disable(SPI1);
    LL_SPI_SetBaudRatePrescaler(SPI1, LL_SPI_BAUDRATEPRESCALER_DIV2 );
    LL_SPI_Enable(SPI1);
}
 8001f98:	4770      	bx	lr
 8001f9a:	46c0      	nop			; (mov r8, r8)
 8001f9c:	40013000 	.word	0x40013000

08001fa0 <decamutexon>:

decaIrqStatus_t decamutexon(void)
{
    // not yet implemented
    return 0;
}
 8001fa0:	2000      	movs	r0, #0
 8001fa2:	4770      	bx	lr

08001fa4 <decamutexoff>:
 * returns the state of the DW1000 interrupt
 */
void decamutexoff(decaIrqStatus_t j)
{
    // not yet implemented
}
 8001fa4:	4770      	bx	lr
	...

08001fa8 <reset_DW1000>:
 *             In general it is output, but it also can be used to reset the digital
 *             part of DW1000 by driving this pin low.
 *             Note, the DW_RESET pin should not be driven high externally.
 * */
void reset_DW1000(void)
{
 8001fa8:	b570      	push	{r4, r5, r6, lr}
 8001faa:	b086      	sub	sp, #24
    LL_GPIO_InitTypeDef     GPIO_InitStruct;

    GPIO_InitStruct.Pin = DW_RST_Pin;
 8001fac:	2502      	movs	r5, #2
 8001fae:	9500      	str	r5, [sp, #0]
    GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001fb4:	2400      	movs	r4, #0
 8001fb6:	9402      	str	r4, [sp, #8]
    GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001fb8:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8001fba:	9504      	str	r5, [sp, #16]
    LL_GPIO_Init(DW_RST_GPIO_Port, &GPIO_InitStruct);
 8001fbc:	4e0a      	ldr	r6, [pc, #40]	; (8001fe8 <reset_DW1000+0x40>)
 8001fbe:	4669      	mov	r1, sp
 8001fc0:	0030      	movs	r0, r6
 8001fc2:	f7fe fcfd 	bl	80009c0 <LL_GPIO_Init>
  WRITE_REG(GPIOx->BRR, PinMask);
 8001fc6:	62b5      	str	r5, [r6, #40]	; 0x28

    LL_GPIO_ResetOutputPin( DW_RST_GPIO_Port, DW_RST_Pin );

    LL_mDelay(1);
 8001fc8:	2001      	movs	r0, #1
 8001fca:	f7fe ff41 	bl	8000e50 <LL_mDelay>

    GPIO_InitStruct.Pin = DW_RST_Pin;
 8001fce:	9500      	str	r5, [sp, #0]
    GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001fd0:	9401      	str	r4, [sp, #4]
    GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001fd2:	9404      	str	r4, [sp, #16]
    LL_GPIO_Init(DW_RST_GPIO_Port, &GPIO_InitStruct);
 8001fd4:	4669      	mov	r1, sp
 8001fd6:	0030      	movs	r0, r6
 8001fd8:	f7fe fcf2 	bl	80009c0 <LL_GPIO_Init>

    LL_mDelay(5);
 8001fdc:	2005      	movs	r0, #5
 8001fde:	f7fe ff37 	bl	8000e50 <LL_mDelay>
}
 8001fe2:	b006      	add	sp, #24
 8001fe4:	bd70      	pop	{r4, r5, r6, pc}
 8001fe6:	46c0      	nop			; (mov r8, r8)
 8001fe8:	50000400 	.word	0x50000400

08001fec <LEDS_OFF>:
    }
}

void LEDS_OFF(uint32_t LEDS_MASK)
{
    if ( LEDS_MASK & LED_GREEN_MASK ) {
 8001fec:	07c3      	lsls	r3, r0, #31
 8001fee:	d502      	bpl.n	8001ff6 <LEDS_OFF+0xa>
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001ff0:	4b08      	ldr	r3, [pc, #32]	; (8002014 <LEDS_OFF+0x28>)
 8001ff2:	2208      	movs	r2, #8
 8001ff4:	619a      	str	r2, [r3, #24]
        LL_GPIO_SetOutputPin( LED_Green_GPIO_Port, LED_Green_Pin );
    }
    if ( LEDS_MASK & LED_BLUE_MASK ) {
 8001ff6:	0783      	lsls	r3, r0, #30
 8001ff8:	d503      	bpl.n	8002002 <LEDS_OFF+0x16>
 8001ffa:	23a0      	movs	r3, #160	; 0xa0
 8001ffc:	05db      	lsls	r3, r3, #23
 8001ffe:	2202      	movs	r2, #2
 8002000:	619a      	str	r2, [r3, #24]
        LL_GPIO_SetOutputPin( LED_Blue_GPIO_Port, LED_Blue_Pin );
    }
    if ( LEDS_MASK & LED_RED_MASK ) {
 8002002:	0703      	lsls	r3, r0, #28
 8002004:	d504      	bpl.n	8002010 <LEDS_OFF+0x24>
 8002006:	23a0      	movs	r3, #160	; 0xa0
 8002008:	05db      	lsls	r3, r3, #23
 800200a:	2280      	movs	r2, #128	; 0x80
 800200c:	0052      	lsls	r2, r2, #1
 800200e:	619a      	str	r2, [r3, #24]
        LL_GPIO_SetOutputPin( LED_Red_GPIO_Port, LED_Red_Pin );
    }
}
 8002010:	4770      	bx	lr
 8002012:	46c0      	nop			; (mov r8, r8)
 8002014:	50000400 	.word	0x50000400

08002018 <LEDS_ON>:

void LEDS_ON(uint32_t LEDS_MASK)
{
    if ( LEDS_MASK & LED_GREEN_MASK ) {
 8002018:	07c3      	lsls	r3, r0, #31
 800201a:	d502      	bpl.n	8002022 <LEDS_ON+0xa>
  WRITE_REG(GPIOx->BRR, PinMask);
 800201c:	4b08      	ldr	r3, [pc, #32]	; (8002040 <LEDS_ON+0x28>)
 800201e:	2208      	movs	r2, #8
 8002020:	629a      	str	r2, [r3, #40]	; 0x28
        LL_GPIO_ResetOutputPin( LED_Green_GPIO_Port, LED_Green_Pin );
    }
    if ( LEDS_MASK & LED_BLUE_MASK ) {
 8002022:	0783      	lsls	r3, r0, #30
 8002024:	d503      	bpl.n	800202e <LEDS_ON+0x16>
 8002026:	23a0      	movs	r3, #160	; 0xa0
 8002028:	05db      	lsls	r3, r3, #23
 800202a:	2202      	movs	r2, #2
 800202c:	629a      	str	r2, [r3, #40]	; 0x28
        LL_GPIO_ResetOutputPin( LED_Blue_GPIO_Port, LED_Blue_Pin );
    }
    if ( LEDS_MASK & LED_RED_MASK ) {
 800202e:	0703      	lsls	r3, r0, #28
 8002030:	d504      	bpl.n	800203c <LEDS_ON+0x24>
 8002032:	23a0      	movs	r3, #160	; 0xa0
 8002034:	05db      	lsls	r3, r3, #23
 8002036:	2280      	movs	r2, #128	; 0x80
 8002038:	0052      	lsls	r2, r2, #1
 800203a:	629a      	str	r2, [r3, #40]	; 0x28
        LL_GPIO_ResetOutputPin( LED_Red_GPIO_Port, LED_Red_Pin );
    }
}
 800203c:	4770      	bx	lr
 800203e:	46c0      	nop			; (mov r8, r8)
 8002040:	50000400 	.word	0x50000400

08002044 <lis3dh_power_ON>:
  WRITE_REG(GPIOx->BSRR, PinMask);
 8002044:	23a0      	movs	r3, #160	; 0xa0
 8002046:	05db      	lsls	r3, r3, #23
 8002048:	2210      	movs	r2, #16
 800204a:	619a      	str	r2, [r3, #24]
 *
 */
void lis3dh_power_ON()
{
    LL_GPIO_SetOutputPin( LIS3DH_PWR_GPIO_Port, LIS3DH_PWR_Pin );
}
 800204c:	4770      	bx	lr
	...

08002050 <GPIO_EXTI3_Callback>:
 *
 ******************************************************************************/

void GPIO_EXTI3_Callback(void)
{
    gMotionDetInt = true;
 8002050:	4b01      	ldr	r3, [pc, #4]	; (8002058 <GPIO_EXTI3_Callback+0x8>)
 8002052:	2201      	movs	r2, #1
 8002054:	711a      	strb	r2, [r3, #4]
}
 8002056:	4770      	bx	lr
 8002058:	2000035c 	.word	0x2000035c

0800205c <GPIO_EXTI0_Callback>:
    return SysTickCount;
 800205c:	4b06      	ldr	r3, [pc, #24]	; (8002078 <GPIO_EXTI0_Callback+0x1c>)
 800205e:	681a      	ldr	r2, [r3, #0]
void GPIO_EXTI0_Callback( void )
{
    uint32_t ts;

    ts = portGetTickCount();
    if( ts - t_last_ev_user_button > 1000 )
 8002060:	689b      	ldr	r3, [r3, #8]
 8002062:	1ad3      	subs	r3, r2, r3
 8002064:	21fa      	movs	r1, #250	; 0xfa
 8002066:	0089      	lsls	r1, r1, #2
 8002068:	428b      	cmp	r3, r1
 800206a:	d904      	bls.n	8002076 <GPIO_EXTI0_Callback+0x1a>
    {
        t_last_ev_user_button = ts;
 800206c:	4b02      	ldr	r3, [pc, #8]	; (8002078 <GPIO_EXTI0_Callback+0x1c>)
 800206e:	609a      	str	r2, [r3, #8]
        b_user_button = 1;
 8002070:	4b02      	ldr	r3, [pc, #8]	; (800207c <GPIO_EXTI0_Callback+0x20>)
 8002072:	2201      	movs	r2, #1
 8002074:	701a      	strb	r2, [r3, #0]
    }
}
 8002076:	4770      	bx	lr
 8002078:	2000035c 	.word	0x2000035c
 800207c:	20000038 	.word	0x20000038

08002080 <HAL_UART_ErrorCallback>:
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback()
{
}
 8002080:	4770      	bx	lr
	...

08002084 <UART2_IRQHandler>:
  * @param huart UART handle.
  * @retval None
  */

void UART2_IRQHandler()
{
 8002084:	b570      	push	{r4, r5, r6, lr}
      uint32_t isrflags   = READ_REG(USART2->ISR);
 8002086:	4a41      	ldr	r2, [pc, #260]	; (800218c <UART2_IRQHandler+0x108>)
 8002088:	69d3      	ldr	r3, [r2, #28]
      uint32_t cr1its     = READ_REG(USART2->CR1);
 800208a:	6811      	ldr	r1, [r2, #0]
      uint32_t cr3its     = READ_REG(USART2->CR3);
 800208c:	6890      	ldr	r0, [r2, #8]

      uint32_t errorflags;
      uint32_t errorcode = HAL_UART_ERROR_NONE;

      /* If no error occurs */
      errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 800208e:	220f      	movs	r2, #15
 8002090:	0014      	movs	r4, r2
 8002092:	401c      	ands	r4, r3
      if (errorflags == 0U)
 8002094:	421a      	tst	r2, r3
 8002096:	d103      	bne.n	80020a0 <UART2_IRQHandler+0x1c>
      {
        /* UART in mode Receiver ---------------------------------------------------*/
        if (((isrflags & USART_ISR_RXNE) != 0U)
 8002098:	069a      	lsls	r2, r3, #26
 800209a:	d501      	bpl.n	80020a0 <UART2_IRQHandler+0x1c>
            && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800209c:	068a      	lsls	r2, r1, #26
 800209e:	d417      	bmi.n	80020d0 <UART2_IRQHandler+0x4c>
            return;
        }
      }

      /* If some errors occur */
      if ((errorflags != 0U)
 80020a0:	2c00      	cmp	r4, #0
 80020a2:	d008      	beq.n	80020b6 <UART2_IRQHandler+0x32>
          && (((cr3its & USART_CR3_EIE) != 0U)
 80020a4:	2201      	movs	r2, #1
 80020a6:	0015      	movs	r5, r2
 80020a8:	4005      	ands	r5, r0
 80020aa:	4202      	tst	r2, r0
 80020ac:	d116      	bne.n	80020dc <UART2_IRQHandler+0x58>
              || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 80020ae:	3220      	adds	r2, #32
 80020b0:	32ff      	adds	r2, #255	; 0xff
 80020b2:	4211      	tst	r1, r2
 80020b4:	d112      	bne.n	80020dc <UART2_IRQHandler+0x58>
        return;
      } /* End if some error occurs */

      // TODO check if this could be moved to the top of the function
      /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
      if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80020b6:	02da      	lsls	r2, r3, #11
 80020b8:	d501      	bpl.n	80020be <UART2_IRQHandler+0x3a>
 80020ba:	0242      	lsls	r2, r0, #9
 80020bc:	d45a      	bmi.n	8002174 <UART2_IRQHandler+0xf0>
          LL_USART_ClearFlag_WKUP( USART2 );
          return;
      }

      /* UART in mode Transmitter ------------------------------------------------*/
      if (((isrflags & USART_ISR_TXE) != 0U)
 80020be:	061a      	lsls	r2, r3, #24
 80020c0:	d501      	bpl.n	80020c6 <UART2_IRQHandler+0x42>
          && ((cr1its & USART_CR1_TXEIE) != 0U))
 80020c2:	060a      	lsls	r2, r1, #24
 80020c4:	d403      	bmi.n	80020ce <UART2_IRQHandler+0x4a>
        // Transmit callback placeholder
        return;
      }

      /* UART in mode Transmitter (transmission end) -----------------------------*/
      if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80020c6:	065b      	lsls	r3, r3, #25
 80020c8:	d501      	bpl.n	80020ce <UART2_IRQHandler+0x4a>
 80020ca:	064b      	lsls	r3, r1, #25
 80020cc:	d457      	bmi.n	800217e <UART2_IRQHandler+0xfa>
          LL_USART_DisableIT_TC( USART2 );

        return;
      }

}
 80020ce:	bd70      	pop	{r4, r5, r6, pc}
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 80020d0:	4b2e      	ldr	r3, [pc, #184]	; (800218c <UART2_IRQHandler+0x108>)
 80020d2:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80020d4:	b2c0      	uxtb	r0, r0
            UART_RxCpltCallback( LL_USART_ReceiveData8( USART2 ) );
 80020d6:	f7ff fe8b 	bl	8001df0 <UART_RxCpltCallback>
            return;
 80020da:	e7f8      	b.n	80020ce <UART2_IRQHandler+0x4a>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80020dc:	2201      	movs	r2, #1
 80020de:	0014      	movs	r4, r2
 80020e0:	401c      	ands	r4, r3
 80020e2:	421a      	tst	r2, r3
 80020e4:	d008      	beq.n	80020f8 <UART2_IRQHandler+0x74>
 80020e6:	32ff      	adds	r2, #255	; 0xff
 80020e8:	000c      	movs	r4, r1
 80020ea:	4014      	ands	r4, r2
 80020ec:	4211      	tst	r1, r2
 80020ee:	d003      	beq.n	80020f8 <UART2_IRQHandler+0x74>
  WRITE_REG(USARTx->ICR, USART_ICR_PECF);
 80020f0:	4a26      	ldr	r2, [pc, #152]	; (800218c <UART2_IRQHandler+0x108>)
 80020f2:	2001      	movs	r0, #1
 80020f4:	6210      	str	r0, [r2, #32]
            errorcode |= HAL_UART_ERROR_PE;
 80020f6:	2401      	movs	r4, #1
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80020f8:	079a      	lsls	r2, r3, #30
 80020fa:	d506      	bpl.n	800210a <UART2_IRQHandler+0x86>
 80020fc:	2d00      	cmp	r5, #0
 80020fe:	d004      	beq.n	800210a <UART2_IRQHandler+0x86>
  WRITE_REG(USARTx->ICR, USART_ICR_FECF);
 8002100:	4a22      	ldr	r2, [pc, #136]	; (800218c <UART2_IRQHandler+0x108>)
 8002102:	2002      	movs	r0, #2
 8002104:	6210      	str	r0, [r2, #32]
            errorcode |= HAL_UART_ERROR_FE;
 8002106:	2204      	movs	r2, #4
 8002108:	4314      	orrs	r4, r2
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800210a:	075a      	lsls	r2, r3, #29
 800210c:	d506      	bpl.n	800211c <UART2_IRQHandler+0x98>
 800210e:	2d00      	cmp	r5, #0
 8002110:	d004      	beq.n	800211c <UART2_IRQHandler+0x98>
  WRITE_REG(USARTx->ICR, USART_ICR_NCF);
 8002112:	4a1e      	ldr	r2, [pc, #120]	; (800218c <UART2_IRQHandler+0x108>)
 8002114:	2004      	movs	r0, #4
 8002116:	6210      	str	r0, [r2, #32]
            errorcode |= HAL_UART_ERROR_NE;
 8002118:	2202      	movs	r2, #2
 800211a:	4314      	orrs	r4, r2
        if (((isrflags & USART_ISR_ORE) != 0U)
 800211c:	071a      	lsls	r2, r3, #28
 800211e:	d507      	bpl.n	8002130 <UART2_IRQHandler+0xac>
            && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002120:	068a      	lsls	r2, r1, #26
 8002122:	d401      	bmi.n	8002128 <UART2_IRQHandler+0xa4>
 8002124:	2d00      	cmp	r5, #0
 8002126:	d003      	beq.n	8002130 <UART2_IRQHandler+0xac>
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 8002128:	2208      	movs	r2, #8
 800212a:	4818      	ldr	r0, [pc, #96]	; (800218c <UART2_IRQHandler+0x108>)
 800212c:	6202      	str	r2, [r0, #32]
            errorcode |= HAL_UART_ERROR_ORE;
 800212e:	4314      	orrs	r4, r2
        if ( errorcode != HAL_UART_ERROR_NONE)
 8002130:	2c00      	cmp	r4, #0
 8002132:	d0cc      	beq.n	80020ce <UART2_IRQHandler+0x4a>
          if (((isrflags & USART_ISR_RXNE) != 0U)
 8002134:	069b      	lsls	r3, r3, #26
 8002136:	d501      	bpl.n	800213c <UART2_IRQHandler+0xb8>
              && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002138:	068b      	lsls	r3, r1, #26
 800213a:	d40f      	bmi.n	800215c <UART2_IRQHandler+0xd8>
          if ((READ_BIT(USART2->CR3, USART_CR3_DMAR)) ||
 800213c:	4b13      	ldr	r3, [pc, #76]	; (800218c <UART2_IRQHandler+0x108>)
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	065b      	lsls	r3, r3, #25
 8002142:	d401      	bmi.n	8002148 <UART2_IRQHandler+0xc4>
 8002144:	0723      	lsls	r3, r4, #28
 8002146:	d512      	bpl.n	800216e <UART2_IRQHandler+0xea>
            if (READ_BIT(USART2->CR3, USART_CR3_DMAR))
 8002148:	4b10      	ldr	r3, [pc, #64]	; (800218c <UART2_IRQHandler+0x108>)
 800214a:	689b      	ldr	r3, [r3, #8]
 800214c:	065b      	lsls	r3, r3, #25
 800214e:	d50b      	bpl.n	8002168 <UART2_IRQHandler+0xe4>
              CLEAR_BIT(USART2->CR3, USART_CR3_DMAR);
 8002150:	4a0e      	ldr	r2, [pc, #56]	; (800218c <UART2_IRQHandler+0x108>)
 8002152:	6893      	ldr	r3, [r2, #8]
 8002154:	2140      	movs	r1, #64	; 0x40
 8002156:	438b      	bics	r3, r1
 8002158:	6093      	str	r3, [r2, #8]
 800215a:	e7b8      	b.n	80020ce <UART2_IRQHandler+0x4a>
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 800215c:	4b0b      	ldr	r3, [pc, #44]	; (800218c <UART2_IRQHandler+0x108>)
 800215e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8002160:	b2c0      	uxtb	r0, r0
                UART_RxCpltCallback( LL_USART_ReceiveData8( USART2 ) );
 8002162:	f7ff fe45 	bl	8001df0 <UART_RxCpltCallback>
 8002166:	e7e9      	b.n	800213c <UART2_IRQHandler+0xb8>
              HAL_UART_ErrorCallback();
 8002168:	f7ff ff8a 	bl	8002080 <HAL_UART_ErrorCallback>
 800216c:	e7af      	b.n	80020ce <UART2_IRQHandler+0x4a>
            HAL_UART_ErrorCallback();
 800216e:	f7ff ff87 	bl	8002080 <HAL_UART_ErrorCallback>
        return;
 8002172:	e7ac      	b.n	80020ce <UART2_IRQHandler+0x4a>
  WRITE_REG(USARTx->ICR, USART_ICR_WUCF);
 8002174:	4b05      	ldr	r3, [pc, #20]	; (800218c <UART2_IRQHandler+0x108>)
 8002176:	2280      	movs	r2, #128	; 0x80
 8002178:	0352      	lsls	r2, r2, #13
 800217a:	621a      	str	r2, [r3, #32]
          return;
 800217c:	e7a7      	b.n	80020ce <UART2_IRQHandler+0x4a>
  CLEAR_BIT(USARTx->CR1, USART_CR1_TCIE);
 800217e:	4a03      	ldr	r2, [pc, #12]	; (800218c <UART2_IRQHandler+0x108>)
 8002180:	6813      	ldr	r3, [r2, #0]
 8002182:	2140      	movs	r1, #64	; 0x40
 8002184:	438b      	bics	r3, r1
 8002186:	6013      	str	r3, [r2, #0]
        return;
 8002188:	e7a1      	b.n	80020ce <UART2_IRQHandler+0x4a>
 800218a:	46c0      	nop			; (mov r8, r8)
 800218c:	40004400 	.word	0x40004400

08002190 <cmd_onERROR>:

/*
 * @brief "error" will be sent if error during parser or command execution returned error
 * */
static void cmd_onERROR(const char *err, control_t *pcmd)
{
 8002190:	b511      	push	{r0, r4, lr}
 8002192:	b0ff      	sub	sp, #508	; 0x1fc
 8002194:	0004      	movs	r4, r0
    char str[MAX_STR_SIZE];

    strcpy(str, "error \r\n");
 8002196:	466a      	mov	r2, sp
 8002198:	4b11      	ldr	r3, [pc, #68]	; (80021e0 <cmd_onERROR+0x50>)
 800219a:	cb03      	ldmia	r3!, {r0, r1}
 800219c:	c203      	stmia	r2!, {r0, r1}
 800219e:	781b      	ldrb	r3, [r3, #0]
 80021a0:	7013      	strb	r3, [r2, #0]
    if ( strlen(err)< (sizeof(str)-6-3-1)) {
 80021a2:	0020      	movs	r0, r4
 80021a4:	f7fd ffba 	bl	800011c <strlen>
 80021a8:	23fb      	movs	r3, #251	; 0xfb
 80021aa:	005b      	lsls	r3, r3, #1
 80021ac:	4298      	cmp	r0, r3
 80021ae:	d308      	bcc.n	80021c2 <cmd_onERROR+0x32>
        strcpy(&str[6], err);
        strcpy(&str[6 + strlen(err)], "\r\n");
    }
    port_tx_msg(str, strlen(str));
 80021b0:	4668      	mov	r0, sp
 80021b2:	f7fd ffb3 	bl	800011c <strlen>
 80021b6:	0001      	movs	r1, r0
 80021b8:	4668      	mov	r0, sp
 80021ba:	f7ff fe5f 	bl	8001e7c <port_tx_msg>
}
 80021be:	b07f      	add	sp, #508	; 0x1fc
 80021c0:	bd11      	pop	{r0, r4, pc}
        strcpy(&str[6], err);
 80021c2:	0021      	movs	r1, r4
 80021c4:	466b      	mov	r3, sp
 80021c6:	1d98      	adds	r0, r3, #6
 80021c8:	f001 fd86 	bl	8003cd8 <strcpy>
        strcpy(&str[6 + strlen(err)], "\r\n");
 80021cc:	0020      	movs	r0, r4
 80021ce:	f7fd ffa5 	bl	800011c <strlen>
 80021d2:	3006      	adds	r0, #6
 80021d4:	4468      	add	r0, sp
 80021d6:	2203      	movs	r2, #3
 80021d8:	4902      	ldr	r1, [pc, #8]	; (80021e4 <cmd_onERROR+0x54>)
 80021da:	f001 fc67 	bl	8003aac <memcpy>
 80021de:	e7e7      	b.n	80021b0 <cmd_onERROR+0x20>
 80021e0:	080051c8 	.word	0x080051c8
 80021e4:	08005280 	.word	0x08005280

080021e8 <command_parser>:
 * @brief    checks if input "text" string in known "COMMAND" or "PARAMETER VALUE" format,
 *             checks their execution permissions, a VALUE range if restrictions and
 *             executes COMMAND or sets the PARAMETER to the VALUE
 * */
void command_parser(char *text)
{
 80021e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021ea:	46c6      	mov	lr, r8
 80021ec:	b500      	push	{lr}
 80021ee:	b08c      	sub	sp, #48	; 0x30
 80021f0:	0005      	movs	r5, r0
    control_t   mcmd_console;
    control_t   *pcmd = &mcmd_console;
    command_t   *pk = NULL;

    memset (&mcmd_console, 0 , sizeof(mcmd_console));
 80021f2:	221c      	movs	r2, #28
 80021f4:	2100      	movs	r1, #0
 80021f6:	a805      	add	r0, sp, #20
 80021f8:	f001 fc61 	bl	8003abe <memset>

    pcmd->equal = _NO_COMMAND;
 80021fc:	2300      	movs	r3, #0
 80021fe:	9304      	str	r3, [sp, #16]
    pcmd->indx = 0;
 8002200:	9303      	str	r3, [sp, #12]
 8002202:	e006      	b.n	8002212 <command_parser+0x2a>

    do{
        text[pcmd->indx]=(char)toupper((int)text[pcmd->indx]);
 8002204:	700a      	strb	r2, [r1, #0]
    }while(text[ ++pcmd->indx ]);
 8002206:	9b03      	ldr	r3, [sp, #12]
 8002208:	3301      	adds	r3, #1
 800220a:	9303      	str	r3, [sp, #12]
 800220c:	5ceb      	ldrb	r3, [r5, r3]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d00a      	beq.n	8002228 <command_parser+0x40>
        text[pcmd->indx]=(char)toupper((int)text[pcmd->indx]);
 8002212:	9b03      	ldr	r3, [sp, #12]
 8002214:	18e9      	adds	r1, r5, r3
 8002216:	5cea      	ldrb	r2, [r5, r3]
 8002218:	4b2d      	ldr	r3, [pc, #180]	; (80022d0 <command_parser+0xe8>)
 800221a:	5c98      	ldrb	r0, [r3, r2]
 800221c:	2303      	movs	r3, #3
 800221e:	4003      	ands	r3, r0
 8002220:	2b02      	cmp	r3, #2
 8002222:	d1ef      	bne.n	8002204 <command_parser+0x1c>
 8002224:	3a20      	subs	r2, #32
 8002226:	e7ed      	b.n	8002204 <command_parser+0x1c>

    sscanf(text ,"%10s %d", pcmd->cmd, &pcmd->val); //check MAX_COMMAND_SIZE if format will be changed
 8002228:	ab0a      	add	r3, sp, #40	; 0x28
 800222a:	aa05      	add	r2, sp, #20
 800222c:	4929      	ldr	r1, [pc, #164]	; (80022d4 <command_parser+0xec>)
 800222e:	0028      	movs	r0, r5
 8002230:	f001 fd28 	bl	8003c84 <siscanf>

    pcmd->indx = 0;
 8002234:	2300      	movs	r3, #0
 8002236:	9303      	str	r3, [sp, #12]
    command_t   *pk = NULL;
 8002238:	2600      	movs	r6, #0
    while (known_commands[pcmd->indx].name != NULL)
 800223a:	e001      	b.n	8002240 <command_parser+0x58>
                pcmd->equal = _COMMAND_ALLOWED;
                break;
            }
        }

        pcmd->indx++;
 800223c:	3401      	adds	r4, #1
 800223e:	9403      	str	r4, [sp, #12]
    while (known_commands[pcmd->indx].name != NULL)
 8002240:	9c03      	ldr	r4, [sp, #12]
 8002242:	0063      	lsls	r3, r4, #1
 8002244:	191b      	adds	r3, r3, r4
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	4a23      	ldr	r2, [pc, #140]	; (80022d8 <command_parser+0xf0>)
 800224a:	589f      	ldr	r7, [r3, r2]
 800224c:	2f00      	cmp	r7, #0
 800224e:	d01a      	beq.n	8002286 <command_parser+0x9e>
        pk = (command_t *) &known_commands[pcmd->indx];
 8002250:	0063      	lsls	r3, r4, #1
 8002252:	191b      	adds	r3, r3, r4
 8002254:	009b      	lsls	r3, r3, #2
 8002256:	4e20      	ldr	r6, [pc, #128]	; (80022d8 <command_parser+0xf0>)
 8002258:	199e      	adds	r6, r3, r6
        if (( strcmp(pcmd->cmd, pk->name) == 0 ) &&\
 800225a:	0039      	movs	r1, r7
 800225c:	a805      	add	r0, sp, #20
 800225e:	f7fd ff53 	bl	8000108 <strcmp>
 8002262:	2800      	cmp	r0, #0
 8002264:	d1ea      	bne.n	800223c <command_parser+0x54>
            ( strlen(pcmd->cmd) == strlen(pk->name)) )
 8002266:	a805      	add	r0, sp, #20
 8002268:	f7fd ff58 	bl	800011c <strlen>
 800226c:	4680      	mov	r8, r0
 800226e:	0038      	movs	r0, r7
 8002270:	f7fd ff54 	bl	800011c <strlen>
        if (( strcmp(pcmd->cmd, pk->name) == 0 ) &&\
 8002274:	4580      	cmp	r8, r0
 8002276:	d1e1      	bne.n	800223c <command_parser+0x54>
            pcmd->equal = _COMMAND_FOUND;
 8002278:	2301      	movs	r3, #1
 800227a:	9304      	str	r3, [sp, #16]
            if (/* pk->mode == app.mode ||*/ pk->mode == mANY)
 800227c:	6873      	ldr	r3, [r6, #4]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d1dc      	bne.n	800223c <command_parser+0x54>
                pcmd->equal = _COMMAND_ALLOWED;
 8002282:	3302      	adds	r3, #2
 8002284:	9304      	str	r3, [sp, #16]
    }


    switch (pcmd->equal)
 8002286:	9b04      	ldr	r3, [sp, #16]
 8002288:	2b01      	cmp	r3, #1
 800228a:	d005      	beq.n	8002298 <command_parser+0xb0>
 800228c:	2b02      	cmp	r3, #2
 800228e:	d008      	beq.n	80022a2 <command_parser+0xba>
            break;
        }
        default:
            break;
    }
}
 8002290:	b00c      	add	sp, #48	; 0x30
 8002292:	bc80      	pop	{r7}
 8002294:	46b8      	mov	r8, r7
 8002296:	bdf0      	pop	{r4, r5, r6, r7, pc}
            cmd_onERROR(" incompatible mode", pcmd);
 8002298:	a903      	add	r1, sp, #12
 800229a:	4810      	ldr	r0, [pc, #64]	; (80022dc <command_parser+0xf4>)
 800229c:	f7ff ff78 	bl	8002190 <cmd_onERROR>
            break;
 80022a0:	e7f6      	b.n	8002290 <command_parser+0xa8>
            param_block_t *pbss = get_pbssConfig();
 80022a2:	f000 fc37 	bl	8002b14 <get_pbssConfig>
 80022a6:	0001      	movs	r1, r0
            pcmd->ret = pk->fn(text, pbss, pcmd->val);
 80022a8:	68b3      	ldr	r3, [r6, #8]
 80022aa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80022ac:	9201      	str	r2, [sp, #4]
 80022ae:	0028      	movs	r0, r5
 80022b0:	4798      	blx	r3
 80022b2:	1e04      	subs	r4, r0, #0
 80022b4:	900b      	str	r0, [sp, #44]	; 0x2c
            if (pcmd->ret)
 80022b6:	d006      	beq.n	80022c6 <command_parser+0xde>
                port_tx_msg((char *)pcmd->ret, strlen(pcmd->ret));
 80022b8:	f7fd ff30 	bl	800011c <strlen>
 80022bc:	0001      	movs	r1, r0
 80022be:	0020      	movs	r0, r4
 80022c0:	f7ff fddc 	bl	8001e7c <port_tx_msg>
 80022c4:	e7e4      	b.n	8002290 <command_parser+0xa8>
                cmd_onERROR(" function", pcmd);
 80022c6:	a903      	add	r1, sp, #12
 80022c8:	4805      	ldr	r0, [pc, #20]	; (80022e0 <command_parser+0xf8>)
 80022ca:	f7ff ff61 	bl	8002190 <cmd_onERROR>
}
 80022ce:	e7df      	b.n	8002290 <command_parser+0xa8>
 80022d0:	0800561d 	.word	0x0800561d
 80022d4:	080051d4 	.word	0x080051d4
 80022d8:	08004ed4 	.word	0x08004ed4
 80022dc:	080051dc 	.word	0x080051dc
 80022e0:	080051f0 	.word	0x080051f0

080022e4 <f_txCode>:
    }
    return (ret);
}
REG_FN(f_txCode)
{
    pbss->dwt_config.txCode = (uint8_t)(val);
 80022e4:	b2d2      	uxtb	r2, r2
 80022e6:	710a      	strb	r2, [r1, #4]
    pbss->dwt_config.rxCode = (uint8_t)(val);
 80022e8:	714a      	strb	r2, [r1, #5]
    return (CMD_FN_RET_OK);
}
 80022ea:	4801      	ldr	r0, [pc, #4]	; (80022f0 <f_txCode+0xc>)
 80022ec:	4770      	bx	lr
 80022ee:	46c0      	nop			; (mov r8, r8)
 80022f0:	08004ecc 	.word	0x08004ecc

080022f4 <f_nsSFD>:
REG_FN(f_nsSFD)
{
    pbss->dwt_config.nsSFD = (val == 0)?(0):(1);
 80022f4:	1e53      	subs	r3, r2, #1
 80022f6:	419a      	sbcs	r2, r3
 80022f8:	718a      	strb	r2, [r1, #6]
    return (CMD_FN_RET_OK);
}     
 80022fa:	4801      	ldr	r0, [pc, #4]	; (8002300 <f_nsSFD+0xc>)
 80022fc:	4770      	bx	lr
 80022fe:	46c0      	nop			; (mov r8, r8)
 8002300:	08004ecc 	.word	0x08004ecc

08002304 <f_phrMode>:
    }
    return (ret);
}     
REG_FN(f_phrMode)
{
    pbss->dwt_config.phrMode = (val == 0)?(0):(1);
 8002304:	1e53      	subs	r3, r2, #1
 8002306:	419a      	sbcs	r2, r3
 8002308:	720a      	strb	r2, [r1, #8]
    return (CMD_FN_RET_OK);
}     
 800230a:	4801      	ldr	r0, [pc, #4]	; (8002310 <f_phrMode+0xc>)
 800230c:	4770      	bx	lr
 800230e:	46c0      	nop			; (mov r8, r8)
 8002310:	08004ecc 	.word	0x08004ecc

08002314 <f_sfdTO>:
REG_FN(f_sfdTO)
{
    pbss->dwt_config.sfdTO = (uint16_t)(val);
 8002314:	b293      	uxth	r3, r2
 8002316:	20ff      	movs	r0, #255	; 0xff
 8002318:	4002      	ands	r2, r0
 800231a:	728a      	strb	r2, [r1, #10]
 800231c:	0a1b      	lsrs	r3, r3, #8
 800231e:	72cb      	strb	r3, [r1, #11]
    return (CMD_FN_RET_OK);
}     
 8002320:	4800      	ldr	r0, [pc, #0]	; (8002324 <f_sfdTO+0x10>)
 8002322:	4770      	bx	lr
 8002324:	08004ecc 	.word	0x08004ecc

08002328 <f_smartPowerEn>:
REG_FN(f_smartPowerEn)
{
    pbss->smartPowerEn = (val == 0)?(0):(1);
 8002328:	1e53      	subs	r3, r2, #1
 800232a:	419a      	sbcs	r2, r3
 800232c:	760a      	strb	r2, [r1, #24]
 800232e:	2300      	movs	r3, #0
 8002330:	764b      	strb	r3, [r1, #25]
    return (CMD_FN_RET_OK);
}     
 8002332:	4801      	ldr	r0, [pc, #4]	; (8002338 <f_smartPowerEn+0x10>)
 8002334:	4770      	bx	lr
 8002336:	46c0      	nop			; (mov r8, r8)
 8002338:	08004ecc 	.word	0x08004ecc

0800233c <f_interval_in_ms>:
REG_FN(f_interval_in_ms)
{
    pbss->blink.interval_in_ms = (uint32_t)(val);
 800233c:	730a      	strb	r2, [r1, #12]
 800233e:	0a13      	lsrs	r3, r2, #8
 8002340:	734b      	strb	r3, [r1, #13]
 8002342:	0c13      	lsrs	r3, r2, #16
 8002344:	738b      	strb	r3, [r1, #14]
 8002346:	0e12      	lsrs	r2, r2, #24
 8002348:	73ca      	strb	r2, [r1, #15]
    return (CMD_FN_RET_OK);
}     
 800234a:	4801      	ldr	r0, [pc, #4]	; (8002350 <f_interval_in_ms+0x14>)
 800234c:	4770      	bx	lr
 800234e:	46c0      	nop			; (mov r8, r8)
 8002350:	08004ecc 	.word	0x08004ecc

08002354 <f_interval_slow_in_ms>:
REG_FN(f_interval_slow_in_ms)
{
    pbss->blink.interval_slow_in_ms = (uint32_t)(val);
 8002354:	740a      	strb	r2, [r1, #16]
 8002356:	0a13      	lsrs	r3, r2, #8
 8002358:	744b      	strb	r3, [r1, #17]
 800235a:	0c13      	lsrs	r3, r2, #16
 800235c:	748b      	strb	r3, [r1, #18]
 800235e:	0e12      	lsrs	r2, r2, #24
 8002360:	74ca      	strb	r2, [r1, #19]
    return (CMD_FN_RET_OK);
}     
 8002362:	4801      	ldr	r0, [pc, #4]	; (8002368 <f_interval_slow_in_ms+0x14>)
 8002364:	4770      	bx	lr
 8002366:	46c0      	nop			; (mov r8, r8)
 8002368:	08004ecc 	.word	0x08004ecc

0800236c <f_randomness>:
REG_FN(f_randomness)
{
    pbss->blink.randomness = (uint8_t)(val);
 800236c:	750a      	strb	r2, [r1, #20]
    return (CMD_FN_RET_OK);
}     
 800236e:	4801      	ldr	r0, [pc, #4]	; (8002374 <f_randomness+0x8>)
 8002370:	4770      	bx	lr
 8002372:	46c0      	nop			; (mov r8, r8)
 8002374:	08004ecc 	.word	0x08004ecc

08002378 <f_tagIDset>:
    
    return (CMD_FN_RET_OK);
}     
REG_FN(f_tagIDset)
{
    pbss->tagIDset = (val == 0)?(0):(1);
 8002378:	1e53      	subs	r3, r2, #1
 800237a:	419a      	sbcs	r2, r3
 800237c:	2322      	movs	r3, #34	; 0x22
 800237e:	54ca      	strb	r2, [r1, r3]
    return (CMD_FN_RET_OK);
}  
 8002380:	4800      	ldr	r0, [pc, #0]	; (8002384 <f_tagIDset+0xc>)
 8002382:	4770      	bx	lr
 8002384:	08004ecc 	.word	0x08004ecc

08002388 <f_TWRInitSet>:

REG_FN(f_TWRInitSet)
{
    pbss->twr_role = TWR_INIT;
 8002388:	2363      	movs	r3, #99	; 0x63
 800238a:	2201      	movs	r2, #1
 800238c:	54ca      	strb	r2, [r1, r3]
    return (CMD_FN_RET_OK);
}
 800238e:	4801      	ldr	r0, [pc, #4]	; (8002394 <f_TWRInitSet+0xc>)
 8002390:	4770      	bx	lr
 8002392:	46c0      	nop			; (mov r8, r8)
 8002394:	08004ecc 	.word	0x08004ecc

08002398 <f_TWRRespSet>:

REG_FN(f_TWRRespSet)
{
    pbss->twr_role = TWR_RESP;
 8002398:	2363      	movs	r3, #99	; 0x63
 800239a:	2200      	movs	r2, #0
 800239c:	54ca      	strb	r2, [r1, r3]
    return (CMD_FN_RET_OK);
}
 800239e:	4801      	ldr	r0, [pc, #4]	; (80023a4 <f_TWRRespSet+0xc>)
 80023a0:	4770      	bx	lr
 80023a2:	46c0      	nop			; (mov r8, r8)
 80023a4:	08004ecc 	.word	0x08004ecc

080023a8 <f_ForceReset>:
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80023a8:	f3bf 8f4f 	dsb	sy
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023ac:	4b03      	ldr	r3, [pc, #12]	; (80023bc <f_ForceReset+0x14>)
 80023ae:	4a04      	ldr	r2, [pc, #16]	; (80023c0 <f_ForceReset+0x18>)
 80023b0:	60da      	str	r2, [r3, #12]
 80023b2:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80023b6:	46c0      	nop			; (mov r8, r8)
  for(;;)                                                           /* wait until reset */
 80023b8:	e7fd      	b.n	80023b6 <f_ForceReset+0xe>
 80023ba:	46c0      	nop			; (mov r8, r8)
 80023bc:	e000ed00 	.word	0xe000ed00
 80023c0:	05fa0004 	.word	0x05fa0004

080023c4 <f_nlos>:
    return;
}

REG_FN(f_nlos)
{
    pbss->nlos = (val == 0)?(0):(1);
 80023c4:	1e53      	subs	r3, r2, #1
 80023c6:	419a      	sbcs	r2, r3
 80023c8:	2364      	movs	r3, #100	; 0x64
 80023ca:	54ca      	strb	r2, [r1, r3]
    return (CMD_FN_RET_OK);
}
 80023cc:	4800      	ldr	r0, [pc, #0]	; (80023d0 <f_nlos+0xc>)
 80023ce:	4770      	bx	lr
 80023d0:	08004ecc 	.word	0x08004ecc

080023d4 <f_tcwm>:
}

REG_FN(f_tcwm)
{
    return (CMD_FN_RET_OK);
}
 80023d4:	4800      	ldr	r0, [pc, #0]	; (80023d8 <f_tcwm+0x4>)
 80023d6:	4770      	bx	lr
 80023d8:	08004ecc 	.word	0x08004ecc

080023dc <f_tcfm>:

REG_FN(f_tcfm)
{
    return (CMD_FN_RET_OK);
}
 80023dc:	4800      	ldr	r0, [pc, #0]	; (80023e0 <f_tcfm+0x4>)
 80023de:	4770      	bx	lr
 80023e0:	08004ecc 	.word	0x08004ecc

080023e4 <f_chan>:
{
 80023e4:	b510      	push	{r4, lr}
 80023e6:	000c      	movs	r4, r1
 80023e8:	0010      	movs	r0, r2
    int tmp = chan_to_deca(val);
 80023ea:	f001 fa2b 	bl	8003844 <chan_to_deca>
    if(tmp>=0)
 80023ee:	2800      	cmp	r0, #0
 80023f0:	db02      	blt.n	80023f8 <f_chan+0x14>
      pbss->dwt_config.chan = tmp;
 80023f2:	7020      	strb	r0, [r4, #0]
      ret = CMD_FN_RET_OK;
 80023f4:	4801      	ldr	r0, [pc, #4]	; (80023fc <f_chan+0x18>)
}
 80023f6:	bd10      	pop	{r4, pc}
    const char * ret = NULL;
 80023f8:	2000      	movs	r0, #0
    return (ret);
 80023fa:	e7fc      	b.n	80023f6 <f_chan+0x12>
 80023fc:	08004ecc 	.word	0x08004ecc

08002400 <f_prf>:
{
 8002400:	b510      	push	{r4, lr}
 8002402:	000c      	movs	r4, r1
 8002404:	0010      	movs	r0, r2
    int tmp = prf_to_deca(val);
 8002406:	f001 fa57 	bl	80038b8 <prf_to_deca>
    if(tmp>=0)
 800240a:	2800      	cmp	r0, #0
 800240c:	db02      	blt.n	8002414 <f_prf+0x14>
      pbss->dwt_config.prf = (uint8_t)(tmp);
 800240e:	7060      	strb	r0, [r4, #1]
      ret = CMD_FN_RET_OK;
 8002410:	4801      	ldr	r0, [pc, #4]	; (8002418 <f_prf+0x18>)
}
 8002412:	bd10      	pop	{r4, pc}
    const char * ret = NULL;
 8002414:	2000      	movs	r0, #0
    return (ret);
 8002416:	e7fc      	b.n	8002412 <f_prf+0x12>
 8002418:	08004ecc 	.word	0x08004ecc

0800241c <f_plen>:
{
 800241c:	b510      	push	{r4, lr}
 800241e:	000c      	movs	r4, r1
 8002420:	0010      	movs	r0, r2
    int tmp = plen_to_deca(val);
 8002422:	f001 fa8d 	bl	8003940 <plen_to_deca>
    if(tmp>=0)
 8002426:	2800      	cmp	r0, #0
 8002428:	db02      	blt.n	8002430 <f_plen+0x14>
      pbss->dwt_config.txPreambLength = (uint16_t)(tmp);
 800242a:	70a0      	strb	r0, [r4, #2]
      ret = CMD_FN_RET_OK;
 800242c:	4801      	ldr	r0, [pc, #4]	; (8002434 <f_plen+0x18>)
}
 800242e:	bd10      	pop	{r4, pc}
    const char * ret = NULL;
 8002430:	2000      	movs	r0, #0
    return (ret);
 8002432:	e7fc      	b.n	800242e <f_plen+0x12>
 8002434:	08004ecc 	.word	0x08004ecc

08002438 <f_rxPAC>:
{
 8002438:	b510      	push	{r4, lr}
 800243a:	000c      	movs	r4, r1
 800243c:	0010      	movs	r0, r2
    int tmp = pac_to_deca(val);
 800243e:	f001 fa51 	bl	80038e4 <pac_to_deca>
    if(tmp>=0)
 8002442:	2800      	cmp	r0, #0
 8002444:	db02      	blt.n	800244c <f_rxPAC+0x14>
      pbss->dwt_config.rxPAC = (uint8_t)(tmp);
 8002446:	70e0      	strb	r0, [r4, #3]
      ret = CMD_FN_RET_OK;
 8002448:	4801      	ldr	r0, [pc, #4]	; (8002450 <f_rxPAC+0x18>)
}
 800244a:	bd10      	pop	{r4, pc}
    const char * ret = NULL;
 800244c:	2000      	movs	r0, #0
    return (ret);
 800244e:	e7fc      	b.n	800244a <f_rxPAC+0x12>
 8002450:	08004ecc 	.word	0x08004ecc

08002454 <f_dataRate>:
{
 8002454:	b510      	push	{r4, lr}
 8002456:	000c      	movs	r4, r1
 8002458:	0010      	movs	r0, r2
    int tmp = bitrate_to_deca(val);
 800245a:	f001 fa03 	bl	8003864 <bitrate_to_deca>
    if(tmp>=0)
 800245e:	2800      	cmp	r0, #0
 8002460:	db02      	blt.n	8002468 <f_dataRate+0x14>
      pbss->dwt_config.dataRate = (uint8_t)(tmp);
 8002462:	71e0      	strb	r0, [r4, #7]
      ret = CMD_FN_RET_OK;
 8002464:	4801      	ldr	r0, [pc, #4]	; (800246c <f_dataRate+0x18>)
}     
 8002466:	bd10      	pop	{r4, pc}
    const char * ret = NULL;
 8002468:	2000      	movs	r0, #0
    return (ret);
 800246a:	e7fc      	b.n	8002466 <f_dataRate+0x12>
 800246c:	08004ecc 	.word	0x08004ecc

08002470 <f_tagID>:
{
 8002470:	b510      	push	{r4, lr}
 8002472:	b084      	sub	sp, #16
 8002474:	000c      	movs	r4, r1
    sprintf("TAGID %s", tmp);
 8002476:	4669      	mov	r1, sp
 8002478:	4808      	ldr	r0, [pc, #32]	; (800249c <f_tagID+0x2c>)
 800247a:	f001 fbe3 	bl	8003c44 <siprintf>
    memcpy(pbss->tagID, tmp, MIN(sizeof(*pbss->tagID), strlen(tmp)));
 800247e:	341a      	adds	r4, #26
 8002480:	4668      	mov	r0, sp
 8002482:	f7fd fe4b 	bl	800011c <strlen>
 8002486:	0002      	movs	r2, r0
 8002488:	2801      	cmp	r0, #1
 800248a:	d900      	bls.n	800248e <f_tagID+0x1e>
 800248c:	2201      	movs	r2, #1
 800248e:	4669      	mov	r1, sp
 8002490:	0020      	movs	r0, r4
 8002492:	f001 fb0b 	bl	8003aac <memcpy>
}     
 8002496:	4802      	ldr	r0, [pc, #8]	; (80024a0 <f_tagID+0x30>)
 8002498:	b004      	add	sp, #16
 800249a:	bd10      	pop	{r4, pc}
 800249c:	080051fc 	.word	0x080051fc
 80024a0:	08004ecc 	.word	0x08004ecc

080024a4 <f_help_app>:
{
 80024a4:	b511      	push	{r0, r4, lr}
 80024a6:	b0ff      	sub	sp, #508	; 0x1fc
    int        indx = 0;
 80024a8:	2400      	movs	r4, #0
    while (known_commands[indx].name != NULL)
 80024aa:	0063      	lsls	r3, r4, #1
 80024ac:	191b      	adds	r3, r3, r4
 80024ae:	009b      	lsls	r3, r3, #2
 80024b0:	4a09      	ldr	r2, [pc, #36]	; (80024d8 <f_help_app+0x34>)
 80024b2:	589a      	ldr	r2, [r3, r2]
 80024b4:	2a00      	cmp	r2, #0
 80024b6:	d00c      	beq.n	80024d2 <f_help_app+0x2e>
        sprintf(str,"%s \r\n", known_commands[indx].name);
 80024b8:	4908      	ldr	r1, [pc, #32]	; (80024dc <f_help_app+0x38>)
 80024ba:	4668      	mov	r0, sp
 80024bc:	f001 fbc2 	bl	8003c44 <siprintf>
        port_tx_msg((char*)str, strlen(str));
 80024c0:	4668      	mov	r0, sp
 80024c2:	f7fd fe2b 	bl	800011c <strlen>
 80024c6:	0001      	movs	r1, r0
 80024c8:	4668      	mov	r0, sp
 80024ca:	f7ff fcd7 	bl	8001e7c <port_tx_msg>
        indx++;
 80024ce:	3401      	adds	r4, #1
 80024d0:	e7eb      	b.n	80024aa <f_help_app+0x6>
}
 80024d2:	4803      	ldr	r0, [pc, #12]	; (80024e0 <f_help_app+0x3c>)
 80024d4:	b07f      	add	sp, #508	; 0x1fc
 80024d6:	bd12      	pop	{r1, r4, pc}
 80024d8:	08004ed4 	.word	0x08004ed4
 80024dc:	08005208 	.word	0x08005208
 80024e0:	08004ecc 	.word	0x08004ecc

080024e4 <f_restore>:
/*
 * @brief restore NV configuration from defaults
 *
 * */
REG_FN(f_restore)
{
 80024e4:	b510      	push	{r4, lr}
    restore_nvm_fconfig();
 80024e6:	f000 fb1b 	bl	8002b20 <restore_nvm_fconfig>

    return (CMD_FN_RET_OK);
}
 80024ea:	4801      	ldr	r0, [pc, #4]	; (80024f0 <f_restore+0xc>)
 80024ec:	bd10      	pop	{r4, pc}
 80024ee:	46c0      	nop			; (mov r8, r8)
 80024f0:	08004ecc 	.word	0x08004ecc

080024f4 <f_save>:
/*
 * @brief save configuration
 *
 * */
REG_FN(f_save)
{
 80024f4:	b510      	push	{r4, lr}
 80024f6:	0008      	movs	r0, r1
    save_bssConfig(pbss);
 80024f8:	f000 fac0 	bl	8002a7c <save_bssConfig>

    return (CMD_FN_RET_OK);
}
 80024fc:	4800      	ldr	r0, [pc, #0]	; (8002500 <f_save+0xc>)
 80024fe:	bd10      	pop	{r4, pc}
 8002500:	08004ecc 	.word	0x08004ecc

08002504 <set_los_nlos_config>:
{
 8002504:	b510      	push	{r4, lr}
    if(nlos == 0)
 8002506:	2800      	cmp	r0, #0
 8002508:	d105      	bne.n	8002516 <set_los_nlos_config+0x12>
        dwt_write8bitoffsetreg(LDE_IF_ID, LDE_CFG1_OFFSET,lde_cfg1_u8);
 800250a:	226d      	movs	r2, #109	; 0x6d
 800250c:	4905      	ldr	r1, [pc, #20]	; (8002524 <set_los_nlos_config+0x20>)
 800250e:	302e      	adds	r0, #46	; 0x2e
 8002510:	f7fe fd9d 	bl	800104e <dwt_write8bitoffsetreg>
}
 8002514:	bd10      	pop	{r4, pc}
        dwt_write8bitoffsetreg(LDE_IF_ID, LDE_CFG1_OFFSET,lde_cfg1_u8);
 8002516:	2207      	movs	r2, #7
 8002518:	4902      	ldr	r1, [pc, #8]	; (8002524 <set_los_nlos_config+0x20>)
 800251a:	202e      	movs	r0, #46	; 0x2e
 800251c:	f7fe fd97 	bl	800104e <dwt_write8bitoffsetreg>
    return;
 8002520:	e7f8      	b.n	8002514 <set_los_nlos_config+0x10>
 8002522:	46c0      	nop			; (mov r8, r8)
 8002524:	00000806 	.word	0x00000806

08002528 <f_decaTDoATag>:
{
 8002528:	b510      	push	{r4, lr}
 800252a:	4c29      	ldr	r4, [pc, #164]	; (80025d0 <f_decaTDoATag+0xa8>)
 800252c:	44a5      	add	sp, r4
    const char ver[] = FULL_VERSION;
 800252e:	ac80      	add	r4, sp, #512	; 0x200
 8002530:	4b28      	ldr	r3, [pc, #160]	; (80025d4 <f_decaTDoATag+0xac>)
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	9280      	str	r2, [sp, #512]	; 0x200
 8002536:	889b      	ldrh	r3, [r3, #4]
 8002538:	80a3      	strh	r3, [r4, #4]
    hlen = sprintf(str,"JS%04X", 0x5A5A);    // reserve space for length of JS object
 800253a:	4a27      	ldr	r2, [pc, #156]	; (80025d8 <f_decaTDoATag+0xb0>)
 800253c:	4927      	ldr	r1, [pc, #156]	; (80025dc <f_decaTDoATag+0xb4>)
 800253e:	4668      	mov	r0, sp
 8002540:	f001 fb80 	bl	8003c44 <siprintf>
    sprintf(&str[strlen(str)],"{\"Info\":{\r\n");
 8002544:	4668      	mov	r0, sp
 8002546:	f7fd fde9 	bl	800011c <strlen>
 800254a:	4468      	add	r0, sp
 800254c:	220c      	movs	r2, #12
 800254e:	4924      	ldr	r1, [pc, #144]	; (80025e0 <f_decaTDoATag+0xb8>)
 8002550:	f001 faac 	bl	8003aac <memcpy>
    sprintf(&str[strlen(str)],"\"Device\":\"DWM1004C SS-TWR\",\r\n");
 8002554:	4668      	mov	r0, sp
 8002556:	f7fd fde1 	bl	800011c <strlen>
 800255a:	4468      	add	r0, sp
 800255c:	221e      	movs	r2, #30
 800255e:	4921      	ldr	r1, [pc, #132]	; (80025e4 <f_decaTDoATag+0xbc>)
 8002560:	f001 faa4 	bl	8003aac <memcpy>
    sprintf(&str[strlen(str)],"\"Version\":\"%s\",\r\n", ver);
 8002564:	4668      	mov	r0, sp
 8002566:	f7fd fdd9 	bl	800011c <strlen>
 800256a:	4468      	add	r0, sp
 800256c:	0022      	movs	r2, r4
 800256e:	491e      	ldr	r1, [pc, #120]	; (80025e8 <f_decaTDoATag+0xc0>)
 8002570:	f001 fb68 	bl	8003c44 <siprintf>
    sprintf(&str[strlen(str)],"\"Build\":\"%s %s\",\r\n", __DATE__, __TIME__ );
 8002574:	4668      	mov	r0, sp
 8002576:	f7fd fdd1 	bl	800011c <strlen>
 800257a:	4468      	add	r0, sp
 800257c:	4b1b      	ldr	r3, [pc, #108]	; (80025ec <f_decaTDoATag+0xc4>)
 800257e:	4a1c      	ldr	r2, [pc, #112]	; (80025f0 <f_decaTDoATag+0xc8>)
 8002580:	491c      	ldr	r1, [pc, #112]	; (80025f4 <f_decaTDoATag+0xcc>)
 8002582:	f001 fb5f 	bl	8003c44 <siprintf>
    sprintf(&str[strlen(str)],"\"Driver\":\"%s\"}}", DW1000_DEVICE_DRIVER_VER_STRING );
 8002586:	4668      	mov	r0, sp
 8002588:	f7fd fdc8 	bl	800011c <strlen>
 800258c:	4468      	add	r0, sp
 800258e:	4a1a      	ldr	r2, [pc, #104]	; (80025f8 <f_decaTDoATag+0xd0>)
 8002590:	491a      	ldr	r1, [pc, #104]	; (80025fc <f_decaTDoATag+0xd4>)
 8002592:	f001 fb57 	bl	8003c44 <siprintf>
    sprintf(&str[2],"%04X",strlen(str)-hlen);   //add formatted 4X of length, this will erase first '{'
 8002596:	4668      	mov	r0, sp
 8002598:	f7fd fdc0 	bl	800011c <strlen>
 800259c:	1f82      	subs	r2, r0, #6
 800259e:	4918      	ldr	r1, [pc, #96]	; (8002600 <f_decaTDoATag+0xd8>)
 80025a0:	466b      	mov	r3, sp
 80025a2:	1c98      	adds	r0, r3, #2
 80025a4:	f001 fb4e 	bl	8003c44 <siprintf>
    str[hlen]='{';                            //restore the start bracket
 80025a8:	237b      	movs	r3, #123	; 0x7b
 80025aa:	466a      	mov	r2, sp
 80025ac:	7193      	strb	r3, [r2, #6]
    port_tx_msg(str, strlen(str));
 80025ae:	4668      	mov	r0, sp
 80025b0:	f7fd fdb4 	bl	800011c <strlen>
 80025b4:	0001      	movs	r1, r0
 80025b6:	4668      	mov	r0, sp
 80025b8:	f7ff fc60 	bl	8001e7c <port_tx_msg>
    port_tx_msg("\r\n", 2);
 80025bc:	2102      	movs	r1, #2
 80025be:	4811      	ldr	r0, [pc, #68]	; (8002604 <f_decaTDoATag+0xdc>)
 80025c0:	f7ff fc5c 	bl	8001e7c <port_tx_msg>
}
 80025c4:	4810      	ldr	r0, [pc, #64]	; (8002608 <f_decaTDoATag+0xe0>)
 80025c6:	2382      	movs	r3, #130	; 0x82
 80025c8:	009b      	lsls	r3, r3, #2
 80025ca:	449d      	add	sp, r3
 80025cc:	bd10      	pop	{r4, pc}
 80025ce:	46c0      	nop			; (mov r8, r8)
 80025d0:	fffffdf8 	.word	0xfffffdf8
 80025d4:	080052c4 	.word	0x080052c4
 80025d8:	00005a5a 	.word	0x00005a5a
 80025dc:	08005210 	.word	0x08005210
 80025e0:	08005218 	.word	0x08005218
 80025e4:	08005224 	.word	0x08005224
 80025e8:	08005244 	.word	0x08005244
 80025ec:	08005258 	.word	0x08005258
 80025f0:	08005264 	.word	0x08005264
 80025f4:	08005270 	.word	0x08005270
 80025f8:	08005284 	.word	0x08005284
 80025fc:	080052ac 	.word	0x080052ac
 8002600:	080052bc 	.word	0x080052bc
 8002604:	08005280 	.word	0x08005280
 8002608:	08004ecc 	.word	0x08004ecc

0800260c <f_jstat>:
{
 800260c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800260e:	46d6      	mov	lr, sl
 8002610:	464f      	mov	r7, r9
 8002612:	4646      	mov	r6, r8
 8002614:	b5c0      	push	{r6, r7, lr}
 8002616:	4c8a      	ldr	r4, [pc, #552]	; (8002840 <f_jstat+0x234>)
 8002618:	44a5      	add	sp, r4
 800261a:	000c      	movs	r4, r1
    hlen = sprintf(str,"JS%04X", 0x5A5A);    // reserve space for length of JS object
 800261c:	4a89      	ldr	r2, [pc, #548]	; (8002844 <f_jstat+0x238>)
 800261e:	498a      	ldr	r1, [pc, #552]	; (8002848 <f_jstat+0x23c>)
 8002620:	a806      	add	r0, sp, #24
 8002622:	f001 fb0f 	bl	8003c44 <siprintf>
    sprintf(&str[strlen(str)],"{\"UWB PARAM\":{\r\n");
 8002626:	a806      	add	r0, sp, #24
 8002628:	f7fd fd78 	bl	800011c <strlen>
 800262c:	ab06      	add	r3, sp, #24
 800262e:	469c      	mov	ip, r3
 8002630:	4460      	add	r0, ip
 8002632:	2211      	movs	r2, #17
 8002634:	4985      	ldr	r1, [pc, #532]	; (800284c <f_jstat+0x240>)
 8002636:	f001 fa39 	bl	8003aac <memcpy>
    sprintf(&str[strlen(str)],"\"CHAN\":%d,\r\n",deca_to_chan(pbss->dwt_config.chan));
 800263a:	a806      	add	r0, sp, #24
 800263c:	f7fd fd6e 	bl	800011c <strlen>
 8002640:	0005      	movs	r5, r0
 8002642:	7820      	ldrb	r0, [r4, #0]
 8002644:	f001 f90a 	bl	800385c <deca_to_chan>
 8002648:	0002      	movs	r2, r0
 800264a:	ab06      	add	r3, sp, #24
 800264c:	1958      	adds	r0, r3, r5
 800264e:	4980      	ldr	r1, [pc, #512]	; (8002850 <f_jstat+0x244>)
 8002650:	f001 faf8 	bl	8003c44 <siprintf>
    sprintf(&str[strlen(str)],"\"PRF\":%d,\r\n", deca_to_prf (pbss->dwt_config.prf));
 8002654:	a806      	add	r0, sp, #24
 8002656:	f7fd fd61 	bl	800011c <strlen>
 800265a:	0005      	movs	r5, r0
 800265c:	7860      	ldrb	r0, [r4, #1]
 800265e:	f001 f936 	bl	80038ce <deca_to_prf>
 8002662:	0002      	movs	r2, r0
 8002664:	ab06      	add	r3, sp, #24
 8002666:	1958      	adds	r0, r3, r5
 8002668:	497a      	ldr	r1, [pc, #488]	; (8002854 <f_jstat+0x248>)
 800266a:	f001 faeb 	bl	8003c44 <siprintf>
    sprintf(&str[strlen(str)],"\"PLEN\":%d,\r\n",deca_to_plen(pbss->dwt_config.txPreambLength));
 800266e:	a806      	add	r0, sp, #24
 8002670:	f7fd fd54 	bl	800011c <strlen>
 8002674:	0005      	movs	r5, r0
 8002676:	78a0      	ldrb	r0, [r4, #2]
 8002678:	f001 f99a 	bl	80039b0 <deca_to_plen>
 800267c:	0002      	movs	r2, r0
 800267e:	ab06      	add	r3, sp, #24
 8002680:	1958      	adds	r0, r3, r5
 8002682:	4975      	ldr	r1, [pc, #468]	; (8002858 <f_jstat+0x24c>)
 8002684:	f001 fade 	bl	8003c44 <siprintf>
    sprintf(&str[strlen(str)],"\"DATARATE\":%d,\r\n",deca_to_bitrate(pbss->dwt_config.dataRate));
 8002688:	a806      	add	r0, sp, #24
 800268a:	f7fd fd47 	bl	800011c <strlen>
 800268e:	0005      	movs	r5, r0
 8002690:	79e0      	ldrb	r0, [r4, #7]
 8002692:	f001 f8fd 	bl	8003890 <deca_to_bitrate>
 8002696:	0002      	movs	r2, r0
 8002698:	ab06      	add	r3, sp, #24
 800269a:	1958      	adds	r0, r3, r5
 800269c:	496f      	ldr	r1, [pc, #444]	; (800285c <f_jstat+0x250>)
 800269e:	f001 fad1 	bl	8003c44 <siprintf>
    sprintf(&str[strlen(str)],"\"TXCODE\":%d,\r\n",pbss->dwt_config.txCode);
 80026a2:	a806      	add	r0, sp, #24
 80026a4:	f7fd fd3a 	bl	800011c <strlen>
 80026a8:	7922      	ldrb	r2, [r4, #4]
 80026aa:	ab06      	add	r3, sp, #24
 80026ac:	469c      	mov	ip, r3
 80026ae:	4460      	add	r0, ip
 80026b0:	496b      	ldr	r1, [pc, #428]	; (8002860 <f_jstat+0x254>)
 80026b2:	f001 fac7 	bl	8003c44 <siprintf>
    sprintf(&str[strlen(str)],"\"PAC\":%d,\r\n", deca_to_pac (pbss->dwt_config.rxPAC));
 80026b6:	a806      	add	r0, sp, #24
 80026b8:	f7fd fd30 	bl	800011c <strlen>
 80026bc:	0005      	movs	r5, r0
 80026be:	78e0      	ldrb	r0, [r4, #3]
 80026c0:	f001 f927 	bl	8003912 <deca_to_pac>
 80026c4:	0002      	movs	r2, r0
 80026c6:	ab06      	add	r3, sp, #24
 80026c8:	1958      	adds	r0, r3, r5
 80026ca:	4966      	ldr	r1, [pc, #408]	; (8002864 <f_jstat+0x258>)
 80026cc:	f001 faba 	bl	8003c44 <siprintf>
    sprintf(&str[strlen(str)],"\"NSSFD\":%d,\r\n",pbss->dwt_config.nsSFD);
 80026d0:	a806      	add	r0, sp, #24
 80026d2:	f7fd fd23 	bl	800011c <strlen>
 80026d6:	79a2      	ldrb	r2, [r4, #6]
 80026d8:	ab06      	add	r3, sp, #24
 80026da:	469c      	mov	ip, r3
 80026dc:	4460      	add	r0, ip
 80026de:	4962      	ldr	r1, [pc, #392]	; (8002868 <f_jstat+0x25c>)
 80026e0:	f001 fab0 	bl	8003c44 <siprintf>
    sprintf(&str[strlen(str)],"\"PHRMODE\":%d,\r\n",pbss->dwt_config.phrMode);
 80026e4:	a806      	add	r0, sp, #24
 80026e6:	f7fd fd19 	bl	800011c <strlen>
 80026ea:	7a22      	ldrb	r2, [r4, #8]
 80026ec:	ab06      	add	r3, sp, #24
 80026ee:	469c      	mov	ip, r3
 80026f0:	4460      	add	r0, ip
 80026f2:	495e      	ldr	r1, [pc, #376]	; (800286c <f_jstat+0x260>)
 80026f4:	f001 faa6 	bl	8003c44 <siprintf>
    sprintf(&str[strlen(str)],"\"SMARTPOWER\":%d,\r\n",pbss->smartPowerEn);
 80026f8:	a806      	add	r0, sp, #24
 80026fa:	f7fd fd0f 	bl	800011c <strlen>
 80026fe:	7e23      	ldrb	r3, [r4, #24]
 8002700:	7e62      	ldrb	r2, [r4, #25]
 8002702:	0212      	lsls	r2, r2, #8
 8002704:	431a      	orrs	r2, r3
 8002706:	ab06      	add	r3, sp, #24
 8002708:	469c      	mov	ip, r3
 800270a:	4460      	add	r0, ip
 800270c:	4958      	ldr	r1, [pc, #352]	; (8002870 <f_jstat+0x264>)
 800270e:	f001 fa99 	bl	8003c44 <siprintf>
    sprintf(&str[strlen(str)],"\"BLINKFAST\":%lu,\r\n",pbss->blink.interval_in_ms);
 8002712:	a806      	add	r0, sp, #24
 8002714:	f7fd fd02 	bl	800011c <strlen>
 8002718:	7b22      	ldrb	r2, [r4, #12]
 800271a:	7b63      	ldrb	r3, [r4, #13]
 800271c:	021b      	lsls	r3, r3, #8
 800271e:	4313      	orrs	r3, r2
 8002720:	7ba2      	ldrb	r2, [r4, #14]
 8002722:	0412      	lsls	r2, r2, #16
 8002724:	4313      	orrs	r3, r2
 8002726:	7be2      	ldrb	r2, [r4, #15]
 8002728:	0612      	lsls	r2, r2, #24
 800272a:	431a      	orrs	r2, r3
 800272c:	ab06      	add	r3, sp, #24
 800272e:	469c      	mov	ip, r3
 8002730:	4460      	add	r0, ip
 8002732:	4950      	ldr	r1, [pc, #320]	; (8002874 <f_jstat+0x268>)
 8002734:	f001 fa86 	bl	8003c44 <siprintf>
    sprintf(&str[strlen(str)],"\"BLINKSLOW\":%lu,\r\n",pbss->blink.interval_slow_in_ms);
 8002738:	a806      	add	r0, sp, #24
 800273a:	f7fd fcef 	bl	800011c <strlen>
 800273e:	7c22      	ldrb	r2, [r4, #16]
 8002740:	7c63      	ldrb	r3, [r4, #17]
 8002742:	021b      	lsls	r3, r3, #8
 8002744:	4313      	orrs	r3, r2
 8002746:	7ca2      	ldrb	r2, [r4, #18]
 8002748:	0412      	lsls	r2, r2, #16
 800274a:	4313      	orrs	r3, r2
 800274c:	7ce2      	ldrb	r2, [r4, #19]
 800274e:	0612      	lsls	r2, r2, #24
 8002750:	431a      	orrs	r2, r3
 8002752:	ab06      	add	r3, sp, #24
 8002754:	469c      	mov	ip, r3
 8002756:	4460      	add	r0, ip
 8002758:	4947      	ldr	r1, [pc, #284]	; (8002878 <f_jstat+0x26c>)
 800275a:	f001 fa73 	bl	8003c44 <siprintf>
    sprintf(&str[strlen(str)],"\"RANDOMNESS\":%d,\r\n",pbss->blink.randomness);
 800275e:	a806      	add	r0, sp, #24
 8002760:	f7fd fcdc 	bl	800011c <strlen>
 8002764:	7d22      	ldrb	r2, [r4, #20]
 8002766:	ab06      	add	r3, sp, #24
 8002768:	469c      	mov	ip, r3
 800276a:	4460      	add	r0, ip
 800276c:	4943      	ldr	r1, [pc, #268]	; (800287c <f_jstat+0x270>)
 800276e:	f001 fa69 	bl	8003c44 <siprintf>
    sprintf(&str[strlen(str)],"\"TAGIDSET\":%d,\r\n",pbss->tagIDset);
 8002772:	a806      	add	r0, sp, #24
 8002774:	f7fd fcd2 	bl	800011c <strlen>
 8002778:	2322      	movs	r3, #34	; 0x22
 800277a:	5ce2      	ldrb	r2, [r4, r3]
 800277c:	ab06      	add	r3, sp, #24
 800277e:	469c      	mov	ip, r3
 8002780:	4460      	add	r0, ip
 8002782:	493f      	ldr	r1, [pc, #252]	; (8002880 <f_jstat+0x274>)
 8002784:	f001 fa5e 	bl	8003c44 <siprintf>
    sprintf(&str[strlen(str)],"\"TAGID\":0x%02x%02x%02x%02x%02x%02x%02x%02x,\r\n",
 8002788:	a806      	add	r0, sp, #24
 800278a:	f7fd fcc7 	bl	800011c <strlen>
                                               pbss->tagID[7], pbss->tagID[6], pbss->tagID[5], pbss->tagID[4],
 800278e:	2321      	movs	r3, #33	; 0x21
 8002790:	5ce2      	ldrb	r2, [r4, r3]
 8002792:	3b01      	subs	r3, #1
 8002794:	5ce3      	ldrb	r3, [r4, r3]
 8002796:	469a      	mov	sl, r3
 8002798:	7fe1      	ldrb	r1, [r4, #31]
 800279a:	7fa5      	ldrb	r5, [r4, #30]
                                               pbss->tagID[3], pbss->tagID[2], pbss->tagID[1], pbss->tagID[0]);
 800279c:	7f66      	ldrb	r6, [r4, #29]
 800279e:	7f27      	ldrb	r7, [r4, #28]
 80027a0:	7ee3      	ldrb	r3, [r4, #27]
 80027a2:	469c      	mov	ip, r3
 80027a4:	7ea3      	ldrb	r3, [r4, #26]
 80027a6:	4698      	mov	r8, r3
    sprintf(&str[strlen(str)],"\"TAGID\":0x%02x%02x%02x%02x%02x%02x%02x%02x,\r\n",
 80027a8:	ab06      	add	r3, sp, #24
 80027aa:	4699      	mov	r9, r3
 80027ac:	4448      	add	r0, r9
 80027ae:	4643      	mov	r3, r8
 80027b0:	9305      	str	r3, [sp, #20]
 80027b2:	4663      	mov	r3, ip
 80027b4:	9304      	str	r3, [sp, #16]
 80027b6:	9703      	str	r7, [sp, #12]
 80027b8:	9602      	str	r6, [sp, #8]
 80027ba:	9501      	str	r5, [sp, #4]
 80027bc:	9100      	str	r1, [sp, #0]
 80027be:	4653      	mov	r3, sl
 80027c0:	4930      	ldr	r1, [pc, #192]	; (8002884 <f_jstat+0x278>)
 80027c2:	f001 fa3f 	bl	8003c44 <siprintf>
    sprintf(&str[strlen(str)],"\"TWR_ROLE\":%d\r\n",pbss->twr_role );
 80027c6:	a806      	add	r0, sp, #24
 80027c8:	f7fd fca8 	bl	800011c <strlen>
 80027cc:	2363      	movs	r3, #99	; 0x63
 80027ce:	5ce2      	ldrb	r2, [r4, r3]
 80027d0:	ab06      	add	r3, sp, #24
 80027d2:	469c      	mov	ip, r3
 80027d4:	4460      	add	r0, ip
 80027d6:	492c      	ldr	r1, [pc, #176]	; (8002888 <f_jstat+0x27c>)
 80027d8:	f001 fa34 	bl	8003c44 <siprintf>
    sprintf(&str[strlen(str)],"\"NLOS\":%d}}",pbss->nlos );
 80027dc:	a806      	add	r0, sp, #24
 80027de:	f7fd fc9d 	bl	800011c <strlen>
 80027e2:	2364      	movs	r3, #100	; 0x64
 80027e4:	5ce2      	ldrb	r2, [r4, r3]
 80027e6:	ab06      	add	r3, sp, #24
 80027e8:	469c      	mov	ip, r3
 80027ea:	4460      	add	r0, ip
 80027ec:	4927      	ldr	r1, [pc, #156]	; (800288c <f_jstat+0x280>)
 80027ee:	f001 fa29 	bl	8003c44 <siprintf>
    sprintf(&str[2],"%04X",strlen(str)-hlen);//add formatted 4X of length, this will erase first '{'
 80027f2:	a806      	add	r0, sp, #24
 80027f4:	f7fd fc92 	bl	800011c <strlen>
 80027f8:	1f82      	subs	r2, r0, #6
 80027fa:	4925      	ldr	r1, [pc, #148]	; (8002890 <f_jstat+0x284>)
 80027fc:	201a      	movs	r0, #26
 80027fe:	4468      	add	r0, sp
 8002800:	f001 fa20 	bl	8003c44 <siprintf>
    str[hlen]='{';                            //restore the start bracket
 8002804:	ab06      	add	r3, sp, #24
 8002806:	227b      	movs	r2, #123	; 0x7b
 8002808:	719a      	strb	r2, [r3, #6]
    sprintf(&str[strlen(str)],"\r\n");
 800280a:	0018      	movs	r0, r3
 800280c:	f7fd fc86 	bl	800011c <strlen>
 8002810:	ab06      	add	r3, sp, #24
 8002812:	469c      	mov	ip, r3
 8002814:	4460      	add	r0, ip
 8002816:	2203      	movs	r2, #3
 8002818:	491e      	ldr	r1, [pc, #120]	; (8002894 <f_jstat+0x288>)
 800281a:	f001 f947 	bl	8003aac <memcpy>
    port_tx_msg(str, strlen(str));
 800281e:	a806      	add	r0, sp, #24
 8002820:	f7fd fc7c 	bl	800011c <strlen>
 8002824:	0001      	movs	r1, r0
 8002826:	a806      	add	r0, sp, #24
 8002828:	f7ff fb28 	bl	8001e7c <port_tx_msg>
}
 800282c:	481a      	ldr	r0, [pc, #104]	; (8002898 <f_jstat+0x28c>)
 800282e:	2386      	movs	r3, #134	; 0x86
 8002830:	009b      	lsls	r3, r3, #2
 8002832:	449d      	add	sp, r3
 8002834:	bce0      	pop	{r5, r6, r7}
 8002836:	46ba      	mov	sl, r7
 8002838:	46b1      	mov	r9, r6
 800283a:	46a8      	mov	r8, r5
 800283c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800283e:	46c0      	nop			; (mov r8, r8)
 8002840:	fffffde8 	.word	0xfffffde8
 8002844:	00005a5a 	.word	0x00005a5a
 8002848:	08005210 	.word	0x08005210
 800284c:	080052cc 	.word	0x080052cc
 8002850:	080052e0 	.word	0x080052e0
 8002854:	080052f0 	.word	0x080052f0
 8002858:	080052fc 	.word	0x080052fc
 800285c:	0800530c 	.word	0x0800530c
 8002860:	08005320 	.word	0x08005320
 8002864:	08005330 	.word	0x08005330
 8002868:	0800533c 	.word	0x0800533c
 800286c:	0800534c 	.word	0x0800534c
 8002870:	0800535c 	.word	0x0800535c
 8002874:	08005370 	.word	0x08005370
 8002878:	08005384 	.word	0x08005384
 800287c:	08005398 	.word	0x08005398
 8002880:	080053ac 	.word	0x080053ac
 8002884:	080053c0 	.word	0x080053c0
 8002888:	080053f0 	.word	0x080053f0
 800288c:	08005400 	.word	0x08005400
 8002890:	080052bc 	.word	0x080052bc
 8002894:	08005280 	.word	0x08005280
 8002898:	08004ecc 	.word	0x08004ecc

0800289c <f_stat>:
{
 800289c:	b570      	push	{r4, r5, r6, lr}
 800289e:	0004      	movs	r4, r0
 80028a0:	000d      	movs	r5, r1
 80028a2:	0016      	movs	r6, r2
    f_decaTDoATag(text, pbss, val);
 80028a4:	f7ff fe40 	bl	8002528 <f_decaTDoATag>
    f_jstat(text, pbss, val);
 80028a8:	0032      	movs	r2, r6
 80028aa:	0029      	movs	r1, r5
 80028ac:	0020      	movs	r0, r4
 80028ae:	f7ff fead 	bl	800260c <f_jstat>
}
 80028b2:	4801      	ldr	r0, [pc, #4]	; (80028b8 <f_stat+0x1c>)
 80028b4:	bd70      	pop	{r4, r5, r6, pc}
 80028b6:	46c0      	nop			; (mov r8, r8)
 80028b8:	08004ecc 	.word	0x08004ecc

080028bc <waitForCommand>:
 *
 * @return  COMMAND_READY : the data for future processing can be found in app.local_buff : app.local_buff_len
 *          NO_DATA : no command yet
 */
uart_data_e waitForCommand(uint8_t *pBuf, uint16_t len)
{
 80028bc:	b570      	push	{r4, r5, r6, lr}
 80028be:	0005      	movs	r5, r0
 80028c0:	000c      	movs	r4, r1
    static uint8_t cmdLen = 0;
    static uint8_t cmdBuf[COM_RX_BUF_SIZE]; /**< slow command buffer : small size */

    ret = NO_DATA;

    if (len <= 2)
 80028c2:	2902      	cmp	r1, #2
 80028c4:	d844      	bhi.n	8002950 <waitForCommand+0x94>
    {/* "slow" command mode: Human interface. Wait until '\r' or '\n' */
        if (cmdLen == 0)
 80028c6:	4b30      	ldr	r3, [pc, #192]	; (8002988 <waitForCommand+0xcc>)
 80028c8:	781c      	ldrb	r4, [r3, #0]
 80028ca:	2c00      	cmp	r4, #0
 80028cc:	d00f      	beq.n	80028ee <waitForCommand+0x32>
        {
            memset(cmdBuf, 0, sizeof(cmdBuf));
        }

        if (cmdLen < (sizeof(local_buff) - 1))
 80028ce:	2c3e      	cmp	r4, #62	; 0x3e
 80028d0:	d835      	bhi.n	800293e <waitForCommand+0x82>
        {
            /*FIXME: YB current fix to avoid double print due to port_tx uart hack/current implementation*/
            //port_tx_msg((char *)pBuf, len);    //ECHO

            if (*pBuf == '\n' || *pBuf == '\r')
 80028d2:	782b      	ldrb	r3, [r5, #0]
 80028d4:	2b0a      	cmp	r3, #10
 80028d6:	d011      	beq.n	80028fc <waitForCommand+0x40>
 80028d8:	2b0d      	cmp	r3, #13
 80028da:	d00f      	beq.n	80028fc <waitForCommand+0x40>

                    ret = COMMAND_READY;
                    cmdLen = 0;
                }
            }
            else if (*pBuf == '\b') //erase of a char in the terminal
 80028dc:	2b08      	cmp	r3, #8
 80028de:	d01f      	beq.n	8002920 <waitForCommand+0x64>
                }

            }
            else
            {
                cmdBuf[cmdLen] = *pBuf;
 80028e0:	4a29      	ldr	r2, [pc, #164]	; (8002988 <waitForCommand+0xcc>)
 80028e2:	1911      	adds	r1, r2, r4
 80028e4:	710b      	strb	r3, [r1, #4]
                cmdLen++;
 80028e6:	3401      	adds	r4, #1
 80028e8:	7014      	strb	r4, [r2, #0]
    ret = NO_DATA;
 80028ea:	2400      	movs	r4, #0
 80028ec:	e041      	b.n	8002972 <waitForCommand+0xb6>
            memset(cmdBuf, 0, sizeof(cmdBuf));
 80028ee:	0018      	movs	r0, r3
 80028f0:	2240      	movs	r2, #64	; 0x40
 80028f2:	2100      	movs	r1, #0
 80028f4:	3004      	adds	r0, #4
 80028f6:	f001 f8e2 	bl	8003abe <memset>
 80028fa:	e7e8      	b.n	80028ce <waitForCommand+0x12>
                if (cmdLen > 0)
 80028fc:	2c00      	cmp	r4, #0
 80028fe:	d038      	beq.n	8002972 <waitForCommand+0xb6>
                    memcpy(local_buff, cmdBuf, cmdLen);
 8002900:	4d21      	ldr	r5, [pc, #132]	; (8002988 <waitForCommand+0xcc>)
 8002902:	0028      	movs	r0, r5
 8002904:	3044      	adds	r0, #68	; 0x44
 8002906:	1d29      	adds	r1, r5, #4
 8002908:	0022      	movs	r2, r4
 800290a:	f001 f8cf 	bl	8003aac <memcpy>
                    local_buff_length = cmdLen;
 800290e:	4b1f      	ldr	r3, [pc, #124]	; (800298c <waitForCommand+0xd0>)
 8002910:	809c      	strh	r4, [r3, #4]
                    local_buff[cmdLen] = 0;
 8002912:	192c      	adds	r4, r5, r4
 8002914:	2300      	movs	r3, #0
 8002916:	2244      	movs	r2, #68	; 0x44
 8002918:	54a3      	strb	r3, [r4, r2]
                    cmdLen = 0;
 800291a:	702b      	strb	r3, [r5, #0]
                    ret = COMMAND_READY;
 800291c:	2401      	movs	r4, #1
 800291e:	e028      	b.n	8002972 <waitForCommand+0xb6>
                if (cmdLen > 0)
 8002920:	2c00      	cmp	r4, #0
 8002922:	d026      	beq.n	8002972 <waitForCommand+0xb6>
                    --cmdLen;
 8002924:	3c01      	subs	r4, #1
 8002926:	b2e4      	uxtb	r4, r4
 8002928:	4b17      	ldr	r3, [pc, #92]	; (8002988 <waitForCommand+0xcc>)
 800292a:	701c      	strb	r4, [r3, #0]
                    cmdBuf[cmdLen] = 0;
 800292c:	191b      	adds	r3, r3, r4
 800292e:	2200      	movs	r2, #0
 8002930:	711a      	strb	r2, [r3, #4]
                    port_tx_msg("\033[K", 3);
 8002932:	2103      	movs	r1, #3
 8002934:	4816      	ldr	r0, [pc, #88]	; (8002990 <waitForCommand+0xd4>)
 8002936:	f7ff faa1 	bl	8001e7c <port_tx_msg>
    ret = NO_DATA;
 800293a:	2400      	movs	r4, #0
 800293c:	e019      	b.n	8002972 <waitForCommand+0xb6>
            }
        }
        else
        {
            /* error in command protocol : flush everything */
            port_tx_msg("\r\n", 2);
 800293e:	2102      	movs	r1, #2
 8002940:	4814      	ldr	r0, [pc, #80]	; (8002994 <waitForCommand+0xd8>)
 8002942:	f7ff fa9b 	bl	8001e7c <port_tx_msg>
            cmdLen = 0;
 8002946:	4b10      	ldr	r3, [pc, #64]	; (8002988 <waitForCommand+0xcc>)
 8002948:	2200      	movs	r2, #0
 800294a:	701a      	strb	r2, [r3, #0]
    ret = NO_DATA;
 800294c:	2400      	movs	r4, #0
 800294e:	e010      	b.n	8002972 <waitForCommand+0xb6>
        }
    }
    else
    {/* "fast" command mode : assume every data buffer is "COMMAND_READY" */

        if (len < (sizeof(local_buff) - 1))
 8002950:	293e      	cmp	r1, #62	; 0x3e
 8002952:	d810      	bhi.n	8002976 <waitForCommand+0xba>
        {
            memcpy(local_buff, pBuf, len);
 8002954:	4e0c      	ldr	r6, [pc, #48]	; (8002988 <waitForCommand+0xcc>)
 8002956:	0030      	movs	r0, r6
 8002958:	3044      	adds	r0, #68	; 0x44
 800295a:	000a      	movs	r2, r1
 800295c:	0029      	movs	r1, r5
 800295e:	f001 f8a5 	bl	8003aac <memcpy>

            local_buff_length = len;
 8002962:	4b0a      	ldr	r3, [pc, #40]	; (800298c <waitForCommand+0xd0>)
 8002964:	809c      	strh	r4, [r3, #4]
            local_buff[len] = 0;
 8002966:	1934      	adds	r4, r6, r4
 8002968:	2300      	movs	r3, #0
 800296a:	2244      	movs	r2, #68	; 0x44
 800296c:	54a3      	strb	r3, [r4, r2]
            cmdLen = 0;
 800296e:	7033      	strb	r3, [r6, #0]

            ret = COMMAND_READY;
 8002970:	2401      	movs	r4, #1
            cmdLen = 0;
        }
    }

    return (ret);
}
 8002972:	0020      	movs	r0, r4
 8002974:	bd70      	pop	{r4, r5, r6, pc}
            port_tx_msg( "Error: \r\n", 2);
 8002976:	2102      	movs	r1, #2
 8002978:	4807      	ldr	r0, [pc, #28]	; (8002998 <waitForCommand+0xdc>)
 800297a:	f7ff fa7f 	bl	8001e7c <port_tx_msg>
            cmdLen = 0;
 800297e:	4b02      	ldr	r3, [pc, #8]	; (8002988 <waitForCommand+0xcc>)
 8002980:	2200      	movs	r2, #0
 8002982:	701a      	strb	r2, [r3, #0]
    ret = NO_DATA;
 8002984:	2400      	movs	r4, #0
 8002986:	e7f4      	b.n	8002972 <waitForCommand+0xb6>
 8002988:	2000037c 	.word	0x2000037c
 800298c:	200003fc 	.word	0x200003fc
 8002990:	080054e8 	.word	0x080054e8
 8002994:	08005280 	.word	0x08005280
 8002998:	080054ec 	.word	0x080054ec

0800299c <process_uartmsg>:
 *        into UART_COMMAND mode and perform operation
 *        based on uart input.
 * @param[in] void
 * */
void process_uartmsg(void)
{
 800299c:	b500      	push	{lr}
 800299e:	b091      	sub	sp, #68	; 0x44
    uint8_t rx_buf[COM_RX_BUF_SIZE];
    int uartLen, res;

    memset(rx_buf,0,sizeof(rx_buf));
 80029a0:	2240      	movs	r2, #64	; 0x40
 80029a2:	2100      	movs	r1, #0
 80029a4:	4668      	mov	r0, sp
 80029a6:	f001 f88a 	bl	8003abe <memset>
    uartLen = deca_uart_receive( rx_buf, COM_RX_BUF_SIZE );
 80029aa:	2140      	movs	r1, #64	; 0x40
 80029ac:	4668      	mov	r0, sp
 80029ae:	f7ff fa8d 	bl	8001ecc <deca_uart_receive>
    
    if(uartLen > 0)
 80029b2:	2800      	cmp	r0, #0
 80029b4:	dc01      	bgt.n	80029ba <process_uartmsg+0x1e>
          int len = MIN((local_buff_length-1), (sizeof(local_buff)-1));
          local_buff[len+1] = 0;
          command_parser((char *)local_buff);            //parse and execute the command
      }
    }
}
 80029b6:	b011      	add	sp, #68	; 0x44
 80029b8:	bd00      	pop	{pc}
      res = waitForCommand(rx_buf, uartLen);
 80029ba:	b281      	uxth	r1, r0
 80029bc:	4668      	mov	r0, sp
 80029be:	f7ff ff7d 	bl	80028bc <waitForCommand>
      if (res == COMMAND_READY)
 80029c2:	2801      	cmp	r0, #1
 80029c4:	d1f7      	bne.n	80029b6 <process_uartmsg+0x1a>
          int len = MIN((local_buff_length-1), (sizeof(local_buff)-1));
 80029c6:	4b08      	ldr	r3, [pc, #32]	; (80029e8 <process_uartmsg+0x4c>)
 80029c8:	889b      	ldrh	r3, [r3, #4]
 80029ca:	3b01      	subs	r3, #1
 80029cc:	2b3f      	cmp	r3, #63	; 0x3f
 80029ce:	d900      	bls.n	80029d2 <process_uartmsg+0x36>
 80029d0:	233f      	movs	r3, #63	; 0x3f
          local_buff[len+1] = 0;
 80029d2:	3301      	adds	r3, #1
 80029d4:	4805      	ldr	r0, [pc, #20]	; (80029ec <process_uartmsg+0x50>)
 80029d6:	18c3      	adds	r3, r0, r3
 80029d8:	2244      	movs	r2, #68	; 0x44
 80029da:	2100      	movs	r1, #0
 80029dc:	5499      	strb	r1, [r3, r2]
          command_parser((char *)local_buff);            //parse and execute the command
 80029de:	3044      	adds	r0, #68	; 0x44
 80029e0:	f7ff fc02 	bl	80021e8 <command_parser>
}
 80029e4:	e7e7      	b.n	80029b6 <process_uartmsg+0x1a>
 80029e6:	46c0      	nop			; (mov r8, r8)
 80029e8:	200003fc 	.word	0x200003fc
 80029ec:	2000037c 	.word	0x2000037c

080029f0 <LockEeprom>:
/* Static functions */

/* Lock the EEPROM: */
static void LockEeprom(void)
{
   while ((FLASH->SR & FLASH_SR_BSY) != 0) /* Wait for FLASH to be free */
 80029f0:	4b06      	ldr	r3, [pc, #24]	; (8002a0c <LockEeprom+0x1c>)
 80029f2:	699b      	ldr	r3, [r3, #24]
 80029f4:	07db      	lsls	r3, r3, #31
 80029f6:	d4fb      	bmi.n	80029f0 <LockEeprom>
   {
   }

   FLASH->PECR = FLASH->PECR & ~(FLASH_PECR_ERRIE | FLASH_PECR_EOPIE); /* disable flash interrupts */
 80029f8:	4b04      	ldr	r3, [pc, #16]	; (8002a0c <LockEeprom+0x1c>)
 80029fa:	685a      	ldr	r2, [r3, #4]
 80029fc:	4904      	ldr	r1, [pc, #16]	; (8002a10 <LockEeprom+0x20>)
 80029fe:	400a      	ands	r2, r1
 8002a00:	605a      	str	r2, [r3, #4]
   FLASH->PECR = FLASH->PECR | FLASH_PECR_PELOCK; /* Lock memory with PELOCK */
 8002a02:	685a      	ldr	r2, [r3, #4]
 8002a04:	2101      	movs	r1, #1
 8002a06:	430a      	orrs	r2, r1
 8002a08:	605a      	str	r2, [r3, #4]
}
 8002a0a:	4770      	bx	lr
 8002a0c:	40022000 	.word	0x40022000
 8002a10:	fffcffff 	.word	0xfffcffff

08002a14 <UnlockEeprom>:
#define FLASH_OPTKEY2              ((uint32_t)0x24252627U) /*!< Flash option key2: used with FLASH_OPTKEY1 to
                                                                unlock the write access to the option byte block */

static void UnlockEeprom(void)
{
   while ((FLASH->SR & FLASH_SR_BSY) != 0) /* Wait for FLASH to be free */
 8002a14:	4b09      	ldr	r3, [pc, #36]	; (8002a3c <UnlockEeprom+0x28>)
 8002a16:	699b      	ldr	r3, [r3, #24]
 8002a18:	07db      	lsls	r3, r3, #31
 8002a1a:	d4fb      	bmi.n	8002a14 <UnlockEeprom>
   {
   }

   if ((FLASH->PECR & FLASH_PECR_PELOCK) != 0) /* If PELOCK is locked */
 8002a1c:	4b07      	ldr	r3, [pc, #28]	; (8002a3c <UnlockEeprom+0x28>)
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	07db      	lsls	r3, r3, #31
 8002a22:	d504      	bpl.n	8002a2e <UnlockEeprom+0x1a>
   {
      FLASH->PEKEYR = FLASH_PEKEY1; /* Unlock PELOCK */
 8002a24:	4b05      	ldr	r3, [pc, #20]	; (8002a3c <UnlockEeprom+0x28>)
 8002a26:	4a06      	ldr	r2, [pc, #24]	; (8002a40 <UnlockEeprom+0x2c>)
 8002a28:	60da      	str	r2, [r3, #12]
      FLASH->PEKEYR = FLASH_PEKEY2;
 8002a2a:	4a06      	ldr	r2, [pc, #24]	; (8002a44 <UnlockEeprom+0x30>)
 8002a2c:	60da      	str	r2, [r3, #12]
   }
   FLASH->PECR = FLASH->PECR | (FLASH_PECR_ERRIE | FLASH_PECR_EOPIE); /* enable flash interrupts */
 8002a2e:	4a03      	ldr	r2, [pc, #12]	; (8002a3c <UnlockEeprom+0x28>)
 8002a30:	6851      	ldr	r1, [r2, #4]
 8002a32:	23c0      	movs	r3, #192	; 0xc0
 8002a34:	029b      	lsls	r3, r3, #10
 8002a36:	430b      	orrs	r3, r1
 8002a38:	6053      	str	r3, [r2, #4]
}
 8002a3a:	4770      	bx	lr
 8002a3c:	40022000 	.word	0x40022000
 8002a40:	89abcdef 	.word	0x89abcdef
 8002a44:	02030405 	.word	0x02030405

08002a48 <EepromProgram>:
* Retval None
*/
static void EepromProgram(uint32_t * addr, const uint32_t ee_data)
{
/* NOTE: The EEPROM must be unlocked and the flash interrupts must have been enabled prior to calling this function.*/
   *addr = ee_data; /* write data to EEPROM */
 8002a48:	6001      	str	r1, [r0, #0]
   __WFI();
 8002a4a:	bf30      	wfi
   if (*addr != ee_data)
   {
   }
}
 8002a4c:	4770      	bx	lr
	...

08002a50 <CRC8_Calculate>:

static uint8_t CRC8_Calculate( uint8_t * pdata, uint32_t size)
{
 8002a50:	b510      	push	{r4, lr}
  * @param  CRCx CRC Instance
  * @retval None
  */
__STATIC_INLINE void LL_CRC_ResetCRCCalculationUnit(CRC_TypeDef *CRCx)
{
  SET_BIT(CRCx->CR, CRC_CR_RESET);
 8002a52:	4a09      	ldr	r2, [pc, #36]	; (8002a78 <CRC8_Calculate+0x28>)
 8002a54:	6893      	ldr	r3, [r2, #8]
 8002a56:	2401      	movs	r4, #1
 8002a58:	4323      	orrs	r3, r4
 8002a5a:	6093      	str	r3, [r2, #8]

    LL_CRC_ResetCRCCalculationUnit(CRC);
    while ( size-- > 0)
 8002a5c:	1e4b      	subs	r3, r1, #1
 8002a5e:	2900      	cmp	r1, #0
 8002a60:	d005      	beq.n	8002a6e <CRC8_Calculate+0x1e>
    {
        LL_CRC_FeedData8(CRC, *pdata++);
 8002a62:	7801      	ldrb	r1, [r0, #0]
  * @param  InData 8 bit value to be provided to CRC calculator between between Min_Data=0 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_CRC_FeedData8(CRC_TypeDef *CRCx, uint8_t InData)
{
  *(uint8_t __IO *)(&CRCx->DR) = (uint8_t) InData;
 8002a64:	4a04      	ldr	r2, [pc, #16]	; (8002a78 <CRC8_Calculate+0x28>)
 8002a66:	7011      	strb	r1, [r2, #0]
    while ( size-- > 0)
 8002a68:	0019      	movs	r1, r3
        LL_CRC_FeedData8(CRC, *pdata++);
 8002a6a:	3001      	adds	r0, #1
}
 8002a6c:	e7f6      	b.n	8002a5c <CRC8_Calculate+0xc>
  * @param  CRCx CRC Instance
  * @retval Current CRC calculation result as stored in CRC_DR register (8 bits).
  */
__STATIC_INLINE uint8_t LL_CRC_ReadData8(CRC_TypeDef *CRCx)
{
  return (uint8_t)READ_REG(CRCx->DR);
 8002a6e:	4b02      	ldr	r3, [pc, #8]	; (8002a78 <CRC8_Calculate+0x28>)
 8002a70:	6818      	ldr	r0, [r3, #0]
 8002a72:	b2c0      	uxtb	r0, r0
    }
    return LL_CRC_ReadData8(CRC);
}
 8002a74:	bd10      	pop	{r4, pc}
 8002a76:	46c0      	nop			; (mov r8, r8)
 8002a78:	40023000 	.word	0x40023000

08002a7c <save_bssConfig>:
/* @brief    Writes buffer to the nonvolatile config location &FConfig
 * assumes data fold to page
 *
 */
void save_bssConfig( const param_block_t * pbuf)
{
 8002a7c:	b510      	push	{r4, lr}
 8002a7e:	b0c0      	sub	sp, #256	; 0x100
 8002a80:	0004      	movs	r4, r0
    CRCprotected_param_t temp_protected_config;
    memset(&temp_protected_config.free, 0xFF, sizeof(temp_protected_config.free));
 8002a82:	229a      	movs	r2, #154	; 0x9a
 8002a84:	21ff      	movs	r1, #255	; 0xff
 8002a86:	2066      	movs	r0, #102	; 0x66
 8002a88:	4468      	add	r0, sp
 8002a8a:	f001 f818 	bl	8003abe <memset>
    memcpy(&temp_protected_config.params, pbuf, sizeof(temp_protected_config.params));
 8002a8e:	2265      	movs	r2, #101	; 0x65
 8002a90:	0021      	movs	r1, r4
 8002a92:	4668      	mov	r0, sp
 8002a94:	f001 f80a 	bl	8003aac <memcpy>

    temp_protected_config.CRC8 = CRC8_Calculate( (uint8_t *) &temp_protected_config.params, sizeof(temp_protected_config.params));
 8002a98:	2165      	movs	r1, #101	; 0x65
 8002a9a:	4668      	mov	r0, sp
 8002a9c:	f7ff ffd8 	bl	8002a50 <CRC8_Calculate>
 8002aa0:	2365      	movs	r3, #101	; 0x65
 8002aa2:	466a      	mov	r2, sp
 8002aa4:	54d0      	strb	r0, [r2, r3]
  __ASM volatile ("cpsid i" : : : "memory");
 8002aa6:	b672      	cpsid	i
        // extra dword to fit the rest of
        num_dwords++;
    }

    __disable_irq();
    UnlockEeprom();
 8002aa8:	f7ff ffb4 	bl	8002a14 <UnlockEeprom>
    for ( uint32_t i = 0; i<num_dwords; i++ )
 8002aac:	2400      	movs	r4, #0
 8002aae:	e007      	b.n	8002ac0 <save_bssConfig+0x44>
    {
        EepromProgram(FConfig_dword_pointer + i, current_dword_pointer[i] );
 8002ab0:	00a0      	lsls	r0, r4, #2
 8002ab2:	466b      	mov	r3, sp
 8002ab4:	5819      	ldr	r1, [r3, r0]
 8002ab6:	4b06      	ldr	r3, [pc, #24]	; (8002ad0 <save_bssConfig+0x54>)
 8002ab8:	18c0      	adds	r0, r0, r3
 8002aba:	f7ff ffc5 	bl	8002a48 <EepromProgram>
    for ( uint32_t i = 0; i<num_dwords; i++ )
 8002abe:	3401      	adds	r4, #1
 8002ac0:	2c3f      	cmp	r4, #63	; 0x3f
 8002ac2:	d9f5      	bls.n	8002ab0 <save_bssConfig+0x34>
    }
    LockEeprom();
 8002ac4:	f7ff ff94 	bl	80029f0 <LockEeprom>
  __ASM volatile ("cpsie i" : : : "memory");
 8002ac8:	b662      	cpsie	i
    __enable_irq();
}
 8002aca:	b040      	add	sp, #256	; 0x100
 8002acc:	bd10      	pop	{r4, pc}
 8002ace:	46c0      	nop			; (mov r8, r8)
 8002ad0:	20000100 	.word	0x20000100

08002ad4 <load_bssConfig>:

void load_bssConfig(void)
{
 8002ad4:	b510      	push	{r4, lr}
    uint8_t tempCRC = CRC8_Calculate( (uint8_t *) &FConfig.params, sizeof(FConfig.params));
 8002ad6:	4c0b      	ldr	r4, [pc, #44]	; (8002b04 <load_bssConfig+0x30>)
 8002ad8:	2165      	movs	r1, #101	; 0x65
 8002ada:	0020      	movs	r0, r4
 8002adc:	f7ff ffb8 	bl	8002a50 <CRC8_Calculate>

    if ( tempCRC != FConfig.CRC8 ) {
 8002ae0:	2365      	movs	r3, #101	; 0x65
 8002ae2:	5ce3      	ldrb	r3, [r4, r3]
 8002ae4:	4283      	cmp	r3, r0
 8002ae6:	d108      	bne.n	8002afa <load_bssConfig+0x26>
        save_bssConfig( &defaultFConfig);
    }

    memcpy(&tmpConfig, &FConfig.params, sizeof(tmpConfig));
 8002ae8:	4c07      	ldr	r4, [pc, #28]	; (8002b08 <load_bssConfig+0x34>)
 8002aea:	2265      	movs	r2, #101	; 0x65
 8002aec:	4905      	ldr	r1, [pc, #20]	; (8002b04 <load_bssConfig+0x30>)
 8002aee:	0020      	movs	r0, r4
 8002af0:	f000 ffdc 	bl	8003aac <memcpy>
    app.pConfig = &tmpConfig;
 8002af4:	4b05      	ldr	r3, [pc, #20]	; (8002b0c <load_bssConfig+0x38>)
 8002af6:	601c      	str	r4, [r3, #0]
}
 8002af8:	bd10      	pop	{r4, pc}
        save_bssConfig( &defaultFConfig);
 8002afa:	4805      	ldr	r0, [pc, #20]	; (8002b10 <load_bssConfig+0x3c>)
 8002afc:	f7ff ffbe 	bl	8002a7c <save_bssConfig>
 8002b00:	e7f2      	b.n	8002ae8 <load_bssConfig+0x14>
 8002b02:	46c0      	nop			; (mov r8, r8)
 8002b04:	20000100 	.word	0x20000100
 8002b08:	20000500 	.word	0x20000500
 8002b0c:	200005b8 	.word	0x200005b8
 8002b10:	08005800 	.word	0x08005800

08002b14 <get_pbssConfig>:


param_block_t *get_pbssConfig(void)
{
  return app.pConfig;
 8002b14:	4b01      	ldr	r3, [pc, #4]	; (8002b1c <get_pbssConfig+0x8>)
 8002b16:	6818      	ldr	r0, [r3, #0]
}
 8002b18:	4770      	bx	lr
 8002b1a:	46c0      	nop			; (mov r8, r8)
 8002b1c:	200005b8 	.word	0x200005b8

08002b20 <restore_nvm_fconfig>:
/* @fn       restore_nvm_fconfig
 * @brief    init main program run-time configuration parameters from NVM
 *           assumes that memory model .text and .bss the same
 * */
void restore_nvm_fconfig(void)
{    
 8002b20:	b510      	push	{r4, lr}
    save_bssConfig( &defaultFConfig);
 8002b22:	4803      	ldr	r0, [pc, #12]	; (8002b30 <restore_nvm_fconfig+0x10>)
 8002b24:	f7ff ffaa 	bl	8002a7c <save_bssConfig>
    load_bssConfig();
 8002b28:	f7ff ffd4 	bl	8002ad4 <load_bssConfig>
}
 8002b2c:	bd10      	pop	{r4, pc}
 8002b2e:	46c0      	nop			; (mov r8, r8)
 8002b30:	08005800 	.word	0x08005800

08002b34 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8002b34:	b082      	sub	sp, #8
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8002b36:	4a0f      	ldr	r2, [pc, #60]	; (8002b74 <MX_CRC_Init+0x40>)
 8002b38:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002b3a:	2080      	movs	r0, #128	; 0x80
 8002b3c:	0140      	lsls	r0, r0, #5
 8002b3e:	4301      	orrs	r1, r0
 8002b40:	6311      	str	r1, [r2, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8002b42:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002b44:	4003      	ands	r3, r0
 8002b46:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8002b48:	9b01      	ldr	r3, [sp, #4]
  MODIFY_REG(CRCx->CR, CRC_CR_REV_IN, ReverseMode);
 8002b4a:	4b0b      	ldr	r3, [pc, #44]	; (8002b78 <MX_CRC_Init+0x44>)
 8002b4c:	689a      	ldr	r2, [r3, #8]
 8002b4e:	2160      	movs	r1, #96	; 0x60
 8002b50:	438a      	bics	r2, r1
 8002b52:	609a      	str	r2, [r3, #8]
  MODIFY_REG(CRCx->CR, CRC_CR_REV_OUT, ReverseMode);
 8002b54:	689a      	ldr	r2, [r3, #8]
 8002b56:	3120      	adds	r1, #32
 8002b58:	438a      	bics	r2, r1
 8002b5a:	609a      	str	r2, [r3, #8]
  WRITE_REG(CRCx->POL, PolynomCoef);
 8002b5c:	4a07      	ldr	r2, [pc, #28]	; (8002b7c <MX_CRC_Init+0x48>)
 8002b5e:	615a      	str	r2, [r3, #20]
  MODIFY_REG(CRCx->CR, CRC_CR_POLYSIZE, PolySize);
 8002b60:	689a      	ldr	r2, [r3, #8]
 8002b62:	3968      	subs	r1, #104	; 0x68
 8002b64:	438a      	bics	r2, r1
 8002b66:	609a      	str	r2, [r3, #8]
  WRITE_REG(CRCx->INIT, InitCrc);
 8002b68:	2201      	movs	r2, #1
 8002b6a:	4252      	negs	r2, r2
 8002b6c:	611a      	str	r2, [r3, #16]
  LL_CRC_SetInitialData(CRC, LL_CRC_DEFAULT_CRC_INITVALUE);
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8002b6e:	b002      	add	sp, #8
 8002b70:	4770      	bx	lr
 8002b72:	46c0      	nop			; (mov r8, r8)
 8002b74:	40021000 	.word	0x40021000
 8002b78:	40023000 	.word	0x40023000
 8002b7c:	04c11db7 	.word	0x04c11db7

08002b80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002b80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b82:	46de      	mov	lr, fp
 8002b84:	4657      	mov	r7, sl
 8002b86:	464e      	mov	r6, r9
 8002b88:	4645      	mov	r5, r8
 8002b8a:	b5e0      	push	{r5, r6, r7, lr}
 8002b8c:	b08b      	sub	sp, #44	; 0x2c
  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8002b8e:	af08      	add	r7, sp, #32
 8002b90:	2308      	movs	r3, #8
 8002b92:	469b      	mov	fp, r3
 8002b94:	2208      	movs	r2, #8
 8002b96:	2100      	movs	r1, #0
 8002b98:	0038      	movs	r0, r7
 8002b9a:	f000 ff90 	bl	8003abe <memset>
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b9e:	2218      	movs	r2, #24
 8002ba0:	2100      	movs	r1, #0
 8002ba2:	a802      	add	r0, sp, #8
 8002ba4:	f000 ff8b 	bl	8003abe <memset>
  * @retval None
*/
__STATIC_INLINE void LL_IOP_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->IOPENR, Periphs);
 8002ba8:	4b64      	ldr	r3, [pc, #400]	; (8002d3c <MX_GPIO_Init+0x1bc>)
 8002baa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bac:	2501      	movs	r5, #1
 8002bae:	432a      	orrs	r2, r5
 8002bb0:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8002bb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bb4:	402a      	ands	r2, r5
 8002bb6:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8002bb8:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->IOPENR, Periphs);
 8002bba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bbc:	2102      	movs	r1, #2
 8002bbe:	4689      	mov	r9, r1
 8002bc0:	430a      	orrs	r2, r1
 8002bc2:	62da      	str	r2, [r3, #44]	; 0x2c
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8002bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bc6:	400b      	ands	r3, r1
 8002bc8:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8002bca:	9b00      	ldr	r3, [sp, #0]
 8002bcc:	26a0      	movs	r6, #160	; 0xa0
 8002bce:	05f6      	lsls	r6, r6, #23
 8002bd0:	000b      	movs	r3, r1
 8002bd2:	61b1      	str	r1, [r6, #24]
 8002bd4:	330e      	adds	r3, #14
 8002bd6:	469a      	mov	sl, r3
 8002bd8:	61b3      	str	r3, [r6, #24]
 8002bda:	4b59      	ldr	r3, [pc, #356]	; (8002d40 <MX_GPIO_Init+0x1c0>)
 8002bdc:	4698      	mov	r8, r3
 8002bde:	619d      	str	r5, [r3, #24]
 8002be0:	2380      	movs	r3, #128	; 0x80
 8002be2:	005b      	lsls	r3, r3, #1
 8002be4:	61b3      	str	r3, [r6, #24]
 8002be6:	2280      	movs	r2, #128	; 0x80
 8002be8:	0212      	lsls	r2, r2, #8
 8002bea:	61b2      	str	r2, [r6, #24]
 8002bec:	4641      	mov	r1, r8
 8002bee:	4658      	mov	r0, fp
 8002bf0:	6188      	str	r0, [r1, #24]
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFFU], SYSCFG_EXTICR1_EXTI0 << (Line >> 16U), Port << (Line >> 16U));
 8002bf2:	4b54      	ldr	r3, [pc, #336]	; (8002d44 <MX_GPIO_Init+0x1c4>)
 8002bf4:	689a      	ldr	r2, [r3, #8]
 8002bf6:	210f      	movs	r1, #15
 8002bf8:	438a      	bics	r2, r1
 8002bfa:	609a      	str	r2, [r3, #8]
 8002bfc:	689a      	ldr	r2, [r3, #8]
 8002bfe:	4952      	ldr	r1, [pc, #328]	; (8002d48 <MX_GPIO_Init+0x1c8>)
 8002c00:	400a      	ands	r2, r1
 8002c02:	609a      	str	r2, [r3, #8]
 8002c04:	689a      	ldr	r2, [r3, #8]
 8002c06:	4951      	ldr	r1, [pc, #324]	; (8002d4c <MX_GPIO_Init+0x1cc>)
 8002c08:	400a      	ands	r2, r1
 8002c0a:	609a      	str	r2, [r3, #8]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8002c0c:	68f3      	ldr	r3, [r6, #12]
 8002c0e:	2103      	movs	r1, #3
 8002c10:	438b      	bics	r3, r1
 8002c12:	432b      	orrs	r3, r5
 8002c14:	60f3      	str	r3, [r6, #12]
 8002c16:	68f3      	ldr	r3, [r6, #12]
 8002c18:	3028      	adds	r0, #40	; 0x28
 8002c1a:	4383      	bics	r3, r0
 8002c1c:	60f3      	str	r3, [r6, #12]
 8002c1e:	68f3      	ldr	r3, [r6, #12]
 8002c20:	22c0      	movs	r2, #192	; 0xc0
 8002c22:	4393      	bics	r3, r2
 8002c24:	60f3      	str	r3, [r6, #12]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8002c26:	6833      	ldr	r3, [r6, #0]
 8002c28:	438b      	bics	r3, r1
 8002c2a:	6033      	str	r3, [r6, #0]
 8002c2c:	6833      	ldr	r3, [r6, #0]
 8002c2e:	4383      	bics	r3, r0
 8002c30:	6033      	str	r3, [r6, #0]
 8002c32:	6833      	ldr	r3, [r6, #0]
 8002c34:	4393      	bics	r3, r2
 8002c36:	6033      	str	r3, [r6, #0]

  /**/
  LL_GPIO_SetPinMode(DW_IRQ_GPIO_Port, DW_IRQ_Pin, LL_GPIO_MODE_INPUT);

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_0;
 8002c38:	9508      	str	r5, [sp, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 8002c3a:	713d      	strb	r5, [r7, #4]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8002c3c:	2400      	movs	r4, #0
 8002c3e:	717c      	strb	r4, [r7, #5]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8002c40:	71bd      	strb	r5, [r7, #6]
  LL_EXTI_Init(&EXTI_InitStruct);
 8002c42:	0038      	movs	r0, r7
 8002c44:	f7fd fe58 	bl	80008f8 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_2;
 8002c48:	2304      	movs	r3, #4
 8002c4a:	9308      	str	r3, [sp, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 8002c4c:	713d      	strb	r5, [r7, #4]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8002c4e:	717c      	strb	r4, [r7, #5]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8002c50:	71bd      	strb	r5, [r7, #6]
  LL_EXTI_Init(&EXTI_InitStruct);
 8002c52:	0038      	movs	r0, r7
 8002c54:	f7fd fe50 	bl	80008f8 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_3;
 8002c58:	4659      	mov	r1, fp
 8002c5a:	9108      	str	r1, [sp, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 8002c5c:	713d      	strb	r5, [r7, #4]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8002c5e:	717c      	strb	r4, [r7, #5]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8002c60:	71bd      	strb	r5, [r7, #6]
  LL_EXTI_Init(&EXTI_InitStruct);
 8002c62:	0038      	movs	r0, r7
 8002c64:	f7fd fe48 	bl	80008f8 <LL_EXTI_Init>

  /**/
  GPIO_InitStruct.Pin = LED_Blue_Pin;
 8002c68:	4649      	mov	r1, r9
 8002c6a:	9102      	str	r1, [sp, #8]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002c6c:	9503      	str	r5, [sp, #12]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002c6e:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002c70:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002c72:	9406      	str	r4, [sp, #24]
  LL_GPIO_Init(LED_Blue_GPIO_Port, &GPIO_InitStruct);
 8002c74:	a902      	add	r1, sp, #8
 8002c76:	0030      	movs	r0, r6
 8002c78:	f7fd fea2 	bl	80009c0 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LIS3DH_PWR_Pin;
 8002c7c:	4651      	mov	r1, sl
 8002c7e:	9102      	str	r1, [sp, #8]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002c80:	9503      	str	r5, [sp, #12]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002c82:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002c84:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002c86:	9406      	str	r4, [sp, #24]
  LL_GPIO_Init(LIS3DH_PWR_GPIO_Port, &GPIO_InitStruct);
 8002c88:	a902      	add	r1, sp, #8
 8002c8a:	0030      	movs	r0, r6
 8002c8c:	f7fd fe98 	bl	80009c0 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DW_CS_Pin;
 8002c90:	9502      	str	r5, [sp, #8]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002c92:	9503      	str	r5, [sp, #12]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002c94:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002c96:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002c98:	9406      	str	r4, [sp, #24]
  LL_GPIO_Init(DW_CS_GPIO_Port, &GPIO_InitStruct);
 8002c9a:	a902      	add	r1, sp, #8
 8002c9c:	4640      	mov	r0, r8
 8002c9e:	f7fd fe8f 	bl	80009c0 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DW_RST_Pin;
 8002ca2:	4649      	mov	r1, r9
 8002ca4:	9102      	str	r1, [sp, #8]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8002ca6:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002ca8:	9406      	str	r4, [sp, #24]
  LL_GPIO_Init(DW_RST_GPIO_Port, &GPIO_InitStruct);
 8002caa:	a902      	add	r1, sp, #8
 8002cac:	4640      	mov	r0, r8
 8002cae:	f7fd fe87 	bl	80009c0 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED_Red_Pin;
 8002cb2:	2380      	movs	r3, #128	; 0x80
 8002cb4:	005b      	lsls	r3, r3, #1
 8002cb6:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002cb8:	9503      	str	r5, [sp, #12]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002cba:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002cbc:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002cbe:	9406      	str	r4, [sp, #24]
  LL_GPIO_Init(LED_Red_GPIO_Port, &GPIO_InitStruct);
 8002cc0:	a902      	add	r1, sp, #8
 8002cc2:	0030      	movs	r0, r6
 8002cc4:	f7fd fe7c 	bl	80009c0 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LIS3DH_CS_Pin;
 8002cc8:	2280      	movs	r2, #128	; 0x80
 8002cca:	0212      	lsls	r2, r2, #8
 8002ccc:	9202      	str	r2, [sp, #8]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002cce:	9503      	str	r5, [sp, #12]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002cd0:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002cd2:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002cd4:	9406      	str	r4, [sp, #24]
  LL_GPIO_Init(LIS3DH_CS_GPIO_Port, &GPIO_InitStruct);
 8002cd6:	a902      	add	r1, sp, #8
 8002cd8:	0030      	movs	r0, r6
 8002cda:	f7fd fe71 	bl	80009c0 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED_Green_Pin;
 8002cde:	465b      	mov	r3, fp
 8002ce0:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002ce2:	9503      	str	r5, [sp, #12]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002ce4:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002ce6:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002ce8:	9406      	str	r4, [sp, #24]
  LL_GPIO_Init(LED_Green_GPIO_Port, &GPIO_InitStruct);
 8002cea:	a902      	add	r1, sp, #8
 8002cec:	4640      	mov	r0, r8
 8002cee:	f7fd fe67 	bl	80009c0 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = M_PIN17_Pin;
 8002cf2:	4653      	mov	r3, sl
 8002cf4:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8002cf6:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8002cf8:	9506      	str	r5, [sp, #24]
  LL_GPIO_Init(M_PIN17_GPIO_Port, &GPIO_InitStruct);
 8002cfa:	a902      	add	r1, sp, #8
 8002cfc:	4640      	mov	r0, r8
 8002cfe:	f7fd fe5f 	bl	80009c0 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = M_PIN16_Pin;
 8002d02:	2620      	movs	r6, #32
 8002d04:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8002d06:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8002d08:	9506      	str	r5, [sp, #24]
  LL_GPIO_Init(M_PIN16_GPIO_Port, &GPIO_InitStruct);
 8002d0a:	a902      	add	r1, sp, #8
 8002d0c:	4640      	mov	r0, r8
 8002d0e:	f7fd fe57 	bl	80009c0 <LL_GPIO_Init>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002d12:	4b0f      	ldr	r3, [pc, #60]	; (8002d50 <MX_GPIO_Init+0x1d0>)
 8002d14:	22c1      	movs	r2, #193	; 0xc1
 8002d16:	0092      	lsls	r2, r2, #2
 8002d18:	5899      	ldr	r1, [r3, r2]
 8002d1a:	480e      	ldr	r0, [pc, #56]	; (8002d54 <MX_GPIO_Init+0x1d4>)
 8002d1c:	4001      	ands	r1, r0
 8002d1e:	5099      	str	r1, [r3, r2]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d20:	601e      	str	r6, [r3, #0]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002d22:	5899      	ldr	r1, [r3, r2]
 8002d24:	480c      	ldr	r0, [pc, #48]	; (8002d58 <MX_GPIO_Init+0x1d8>)
 8002d26:	4001      	ands	r1, r0
 8002d28:	5099      	str	r1, [r3, r2]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d2a:	2240      	movs	r2, #64	; 0x40
 8002d2c:	601a      	str	r2, [r3, #0]
  NVIC_SetPriority(EXTI0_1_IRQn, 0);
  NVIC_EnableIRQ(EXTI0_1_IRQn);
  NVIC_SetPriority(EXTI2_3_IRQn, 0);
  NVIC_EnableIRQ(EXTI2_3_IRQn);

}
 8002d2e:	b00b      	add	sp, #44	; 0x2c
 8002d30:	bcf0      	pop	{r4, r5, r6, r7}
 8002d32:	46bb      	mov	fp, r7
 8002d34:	46b2      	mov	sl, r6
 8002d36:	46a9      	mov	r9, r5
 8002d38:	46a0      	mov	r8, r4
 8002d3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d3c:	40021000 	.word	0x40021000
 8002d40:	50000400 	.word	0x50000400
 8002d44:	40010000 	.word	0x40010000
 8002d48:	fffff0ff 	.word	0xfffff0ff
 8002d4c:	ffff0fff 	.word	0xffff0fff
 8002d50:	e000e100 	.word	0xe000e100
 8002d54:	ffff00ff 	.word	0xffff00ff
 8002d58:	ff00ffff 	.word	0xff00ffff

08002d5c <MX_SPI1_Init>:
{
 8002d5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d5e:	46c6      	mov	lr, r8
 8002d60:	b500      	push	{lr}
 8002d62:	b092      	sub	sp, #72	; 0x48
  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8002d64:	2228      	movs	r2, #40	; 0x28
 8002d66:	2100      	movs	r1, #0
 8002d68:	a808      	add	r0, sp, #32
 8002d6a:	f000 fea8 	bl	8003abe <memset>
  SET_BIT(RCC->APB2ENR, Periphs);
 8002d6e:	4b2d      	ldr	r3, [pc, #180]	; (8002e24 <MX_SPI1_Init+0xc8>)
 8002d70:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002d72:	2080      	movs	r0, #128	; 0x80
 8002d74:	0140      	lsls	r0, r0, #5
 8002d76:	4301      	orrs	r1, r0
 8002d78:	6359      	str	r1, [r3, #52]	; 0x34
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002d7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d7c:	4002      	ands	r2, r0
 8002d7e:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8002d80:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->IOPENR, Periphs);
 8002d82:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002d84:	2201      	movs	r2, #1
 8002d86:	4311      	orrs	r1, r2
 8002d88:	62d9      	str	r1, [r3, #44]	; 0x2c
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8002d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d8c:	401a      	ands	r2, r3
 8002d8e:	9200      	str	r2, [sp, #0]
  (void)tmpreg;
 8002d90:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 8002d92:	2320      	movs	r3, #32
 8002d94:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002d96:	3b1e      	subs	r3, #30
 8002d98:	4698      	mov	r8, r3
 8002d9a:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002d9c:	2603      	movs	r6, #3
 8002d9e:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002da0:	2400      	movs	r4, #0
 8002da2:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002da4:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_0;
 8002da6:	9407      	str	r4, [sp, #28]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002da8:	25a0      	movs	r5, #160	; 0xa0
 8002daa:	05ed      	lsls	r5, r5, #23
 8002dac:	a902      	add	r1, sp, #8
 8002dae:	0028      	movs	r0, r5
 8002db0:	f7fd fe06 	bl	80009c0 <LL_GPIO_Init>
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 8002db4:	2740      	movs	r7, #64	; 0x40
 8002db6:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002db8:	4643      	mov	r3, r8
 8002dba:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002dbc:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002dbe:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002dc0:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_0;
 8002dc2:	9407      	str	r4, [sp, #28]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dc4:	a902      	add	r1, sp, #8
 8002dc6:	0028      	movs	r0, r5
 8002dc8:	f7fd fdfa 	bl	80009c0 <LL_GPIO_Init>
  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 8002dcc:	2380      	movs	r3, #128	; 0x80
 8002dce:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002dd0:	4643      	mov	r3, r8
 8002dd2:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002dd4:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002dd6:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002dd8:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_0;
 8002dda:	9407      	str	r4, [sp, #28]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ddc:	a902      	add	r1, sp, #8
 8002dde:	0028      	movs	r0, r5
 8002de0:	f7fd fdee 	bl	80009c0 <LL_GPIO_Init>
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8002de4:	9408      	str	r4, [sp, #32]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8002de6:	2382      	movs	r3, #130	; 0x82
 8002de8:	005b      	lsls	r3, r3, #1
 8002dea:	9309      	str	r3, [sp, #36]	; 0x24
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8002dec:	940a      	str	r4, [sp, #40]	; 0x28
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 8002dee:	940b      	str	r4, [sp, #44]	; 0x2c
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 8002df0:	940c      	str	r4, [sp, #48]	; 0x30
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8002df2:	33fc      	adds	r3, #252	; 0xfc
 8002df4:	930d      	str	r3, [sp, #52]	; 0x34
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV16;
 8002df6:	3be9      	subs	r3, #233	; 0xe9
 8002df8:	3bff      	subs	r3, #255	; 0xff
 8002dfa:	930e      	str	r3, [sp, #56]	; 0x38
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8002dfc:	940f      	str	r4, [sp, #60]	; 0x3c
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8002dfe:	9410      	str	r4, [sp, #64]	; 0x40
  SPI_InitStruct.CRCPoly = 7;
 8002e00:	3b11      	subs	r3, #17
 8002e02:	9311      	str	r3, [sp, #68]	; 0x44
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 8002e04:	4c08      	ldr	r4, [pc, #32]	; (8002e28 <MX_SPI1_Init+0xcc>)
 8002e06:	a908      	add	r1, sp, #32
 8002e08:	0020      	movs	r0, r4
 8002e0a:	f7fd ff87 	bl	8000d1c <LL_SPI_Init>
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8002e0e:	6863      	ldr	r3, [r4, #4]
 8002e10:	2210      	movs	r2, #16
 8002e12:	4393      	bics	r3, r2
 8002e14:	6063      	str	r3, [r4, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8002e16:	6823      	ldr	r3, [r4, #0]
 8002e18:	433b      	orrs	r3, r7
 8002e1a:	6023      	str	r3, [r4, #0]
}
 8002e1c:	b012      	add	sp, #72	; 0x48
 8002e1e:	bc80      	pop	{r7}
 8002e20:	46b8      	mov	r8, r7
 8002e22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e24:	40021000 	.word	0x40021000
 8002e28:	40013000 	.word	0x40013000

08002e2c <MX_USART2_UART_Init>:
{
 8002e2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e2e:	46c6      	mov	lr, r8
 8002e30:	b500      	push	{lr}
 8002e32:	b090      	sub	sp, #64	; 0x40
  WRITE_REG(GPIOx->BSRR, PinMask);
 8002e34:	4d46      	ldr	r5, [pc, #280]	; (8002f50 <MX_USART2_UART_Init+0x124>)
 8002e36:	2440      	movs	r4, #64	; 0x40
 8002e38:	61ac      	str	r4, [r5, #24]
 8002e3a:	2780      	movs	r7, #128	; 0x80
 8002e3c:	61af      	str	r7, [r5, #24]
  LL_USART_InitTypeDef USART_InitStruct = {0};
 8002e3e:	221c      	movs	r2, #28
 8002e40:	2100      	movs	r1, #0
 8002e42:	a809      	add	r0, sp, #36	; 0x24
 8002e44:	f000 fe3b 	bl	8003abe <memset>
  SET_BIT(RCC->APB1ENR, Periphs);
 8002e48:	4b42      	ldr	r3, [pc, #264]	; (8002f54 <MX_USART2_UART_Init+0x128>)
 8002e4a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002e4c:	2080      	movs	r0, #128	; 0x80
 8002e4e:	0280      	lsls	r0, r0, #10
 8002e50:	4301      	orrs	r1, r0
 8002e52:	6399      	str	r1, [r3, #56]	; 0x38
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8002e54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e56:	4002      	ands	r2, r0
 8002e58:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8002e5a:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->IOPENR, Periphs);
 8002e5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e5e:	2602      	movs	r6, #2
 8002e60:	4332      	orrs	r2, r6
 8002e62:	62da      	str	r2, [r3, #44]	; 0x2c
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8002e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e66:	4033      	ands	r3, r6
 8002e68:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8002e6a:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 8002e6c:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002e6e:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002e70:	2303      	movs	r3, #3
 8002e72:	4698      	mov	r8, r3
 8002e74:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002e76:	2400      	movs	r4, #0
 8002e78:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002e7a:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_0;
 8002e7c:	9408      	str	r4, [sp, #32]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e7e:	a903      	add	r1, sp, #12
 8002e80:	0028      	movs	r0, r5
 8002e82:	f7fd fd9d 	bl	80009c0 <LL_GPIO_Init>
  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 8002e86:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002e88:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002e8a:	4643      	mov	r3, r8
 8002e8c:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002e8e:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002e90:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_0;
 8002e92:	9408      	str	r4, [sp, #32]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e94:	a903      	add	r1, sp, #12
 8002e96:	0028      	movs	r0, r5
 8002e98:	f7fd fd92 	bl	80009c0 <LL_GPIO_Init>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002e9c:	4b2e      	ldr	r3, [pc, #184]	; (8002f58 <MX_USART2_UART_Init+0x12c>)
 8002e9e:	21c7      	movs	r1, #199	; 0xc7
 8002ea0:	0089      	lsls	r1, r1, #2
 8002ea2:	585a      	ldr	r2, [r3, r1]
 8002ea4:	20ff      	movs	r0, #255	; 0xff
 8002ea6:	4382      	bics	r2, r0
 8002ea8:	505a      	str	r2, [r3, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002eaa:	2280      	movs	r2, #128	; 0x80
 8002eac:	0552      	lsls	r2, r2, #21
 8002eae:	601a      	str	r2, [r3, #0]
  USART_InitStruct.BaudRate = 38400;
 8002eb0:	2396      	movs	r3, #150	; 0x96
 8002eb2:	021b      	lsls	r3, r3, #8
 8002eb4:	9309      	str	r3, [sp, #36]	; 0x24
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8002eb6:	940a      	str	r4, [sp, #40]	; 0x28
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8002eb8:	940b      	str	r4, [sp, #44]	; 0x2c
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8002eba:	940c      	str	r4, [sp, #48]	; 0x30
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8002ebc:	230c      	movs	r3, #12
 8002ebe:	930d      	str	r3, [sp, #52]	; 0x34
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8002ec0:	940e      	str	r4, [sp, #56]	; 0x38
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_8;
 8002ec2:	2380      	movs	r3, #128	; 0x80
 8002ec4:	021b      	lsls	r3, r3, #8
 8002ec6:	930f      	str	r3, [sp, #60]	; 0x3c
  LL_USART_Init(USART2, &USART_InitStruct);
 8002ec8:	4c24      	ldr	r4, [pc, #144]	; (8002f5c <MX_USART2_UART_Init+0x130>)
 8002eca:	a909      	add	r1, sp, #36	; 0x24
 8002ecc:	0020      	movs	r0, r4
 8002ece:	f7fd ff57 	bl	8000d80 <LL_USART_Init>
  SET_BIT(USARTx->CR3, USART_CR3_OVRDIS);
 8002ed2:	68a2      	ldr	r2, [r4, #8]
 8002ed4:	2380      	movs	r3, #128	; 0x80
 8002ed6:	015b      	lsls	r3, r3, #5
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	60a3      	str	r3, [r4, #8]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002edc:	6863      	ldr	r3, [r4, #4]
 8002ede:	4a20      	ldr	r2, [pc, #128]	; (8002f60 <MX_USART2_UART_Init+0x134>)
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	6063      	str	r3, [r4, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8002ee4:	68a3      	ldr	r3, [r4, #8]
 8002ee6:	222a      	movs	r2, #42	; 0x2a
 8002ee8:	4393      	bics	r3, r2
 8002eea:	60a3      	str	r3, [r4, #8]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8002eec:	6823      	ldr	r3, [r4, #0]
 8002eee:	3a29      	subs	r2, #41	; 0x29
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	6023      	str	r3, [r4, #0]
  return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_WUS));
 8002ef4:	68a3      	ldr	r3, [r4, #8]
 8002ef6:	22c0      	movs	r2, #192	; 0xc0
 8002ef8:	0392      	lsls	r2, r2, #14
 8002efa:	4013      	ands	r3, r2
  if ( WakeUpType != USART_CR3_WUS_1 ) {
 8002efc:	2280      	movs	r2, #128	; 0x80
 8002efe:	0392      	lsls	r2, r2, #14
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d00d      	beq.n	8002f20 <MX_USART2_UART_Init+0xf4>
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 8002f04:	6821      	ldr	r1, [r4, #0]
 8002f06:	2201      	movs	r2, #1
 8002f08:	4391      	bics	r1, r2
 8002f0a:	6021      	str	r1, [r4, #0]
      MODIFY_REG(USART2->CR3, USART_CR3_WUS, USART_CR3_WUS_1);
 8002f0c:	68a1      	ldr	r1, [r4, #8]
 8002f0e:	4815      	ldr	r0, [pc, #84]	; (8002f64 <MX_USART2_UART_Init+0x138>)
 8002f10:	4008      	ands	r0, r1
 8002f12:	2180      	movs	r1, #128	; 0x80
 8002f14:	0389      	lsls	r1, r1, #14
 8002f16:	4301      	orrs	r1, r0
 8002f18:	60a1      	str	r1, [r4, #8]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8002f1a:	6821      	ldr	r1, [r4, #0]
 8002f1c:	430a      	orrs	r2, r1
 8002f1e:	6022      	str	r2, [r4, #0]
  SET_BIT(USARTx->CR1, USART_CR1_PEIE);
 8002f20:	4b0e      	ldr	r3, [pc, #56]	; (8002f5c <MX_USART2_UART_Init+0x130>)
 8002f22:	6819      	ldr	r1, [r3, #0]
 8002f24:	2280      	movs	r2, #128	; 0x80
 8002f26:	0052      	lsls	r2, r2, #1
 8002f28:	430a      	orrs	r2, r1
 8002f2a:	601a      	str	r2, [r3, #0]
  SET_BIT(USARTx->CR3, USART_CR3_EIE);
 8002f2c:	689a      	ldr	r2, [r3, #8]
 8002f2e:	2101      	movs	r1, #1
 8002f30:	430a      	orrs	r2, r1
 8002f32:	609a      	str	r2, [r3, #8]
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8002f34:	681a      	ldr	r2, [r3, #0]
 8002f36:	311f      	adds	r1, #31
 8002f38:	430a      	orrs	r2, r1
 8002f3a:	601a      	str	r2, [r3, #0]
 8002f3c:	4b04      	ldr	r3, [pc, #16]	; (8002f50 <MX_USART2_UART_Init+0x124>)
 8002f3e:	2240      	movs	r2, #64	; 0x40
 8002f40:	619a      	str	r2, [r3, #24]
 8002f42:	3240      	adds	r2, #64	; 0x40
 8002f44:	619a      	str	r2, [r3, #24]
}
 8002f46:	b010      	add	sp, #64	; 0x40
 8002f48:	bc80      	pop	{r7}
 8002f4a:	46b8      	mov	r8, r7
 8002f4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f4e:	46c0      	nop			; (mov r8, r8)
 8002f50:	50000400 	.word	0x50000400
 8002f54:	40021000 	.word	0x40021000
 8002f58:	e000e100 	.word	0xe000e100
 8002f5c:	40004400 	.word	0x40004400
 8002f60:	ffffb7ff 	.word	0xffffb7ff
 8002f64:	ffcfffff 	.word	0xffcfffff

08002f68 <MX_I2C1_Init>:
{
 8002f68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f6a:	46c6      	mov	lr, r8
 8002f6c:	b500      	push	{lr}
 8002f6e:	b090      	sub	sp, #64	; 0x40
  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 8002f70:	221c      	movs	r2, #28
 8002f72:	2100      	movs	r1, #0
 8002f74:	a809      	add	r0, sp, #36	; 0x24
 8002f76:	f000 fda2 	bl	8003abe <memset>
  SET_BIT(RCC->IOPENR, Periphs);
 8002f7a:	4d2c      	ldr	r5, [pc, #176]	; (800302c <MX_I2C1_Init+0xc4>)
 8002f7c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8002f7e:	2401      	movs	r4, #1
 8002f80:	4323      	orrs	r3, r4
 8002f82:	62eb      	str	r3, [r5, #44]	; 0x2c
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8002f84:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8002f86:	4023      	ands	r3, r4
 8002f88:	9302      	str	r3, [sp, #8]
  (void)tmpreg;
 8002f8a:	9b02      	ldr	r3, [sp, #8]
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 8002f8c:	2380      	movs	r3, #128	; 0x80
 8002f8e:	009b      	lsls	r3, r3, #2
 8002f90:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002f92:	3bff      	subs	r3, #255	; 0xff
 8002f94:	3bff      	subs	r3, #255	; 0xff
 8002f96:	4698      	mov	r8, r3
 8002f98:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002f9a:	2703      	movs	r7, #3
 8002f9c:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8002f9e:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8002fa0:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8002fa2:	9408      	str	r4, [sp, #32]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fa4:	26a0      	movs	r6, #160	; 0xa0
 8002fa6:	05f6      	lsls	r6, r6, #23
 8002fa8:	a903      	add	r1, sp, #12
 8002faa:	0030      	movs	r0, r6
 8002fac:	f7fd fd08 	bl	80009c0 <LL_GPIO_Init>
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 8002fb0:	2380      	movs	r3, #128	; 0x80
 8002fb2:	00db      	lsls	r3, r3, #3
 8002fb4:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002fb6:	4643      	mov	r3, r8
 8002fb8:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002fba:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8002fbc:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8002fbe:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8002fc0:	9408      	str	r4, [sp, #32]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fc2:	a903      	add	r1, sp, #12
 8002fc4:	0030      	movs	r0, r6
 8002fc6:	f7fd fcfb 	bl	80009c0 <LL_GPIO_Init>
  SET_BIT(RCC->APB1ENR, Periphs);
 8002fca:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8002fcc:	2180      	movs	r1, #128	; 0x80
 8002fce:	0389      	lsls	r1, r1, #14
 8002fd0:	430a      	orrs	r2, r1
 8002fd2:	63aa      	str	r2, [r5, #56]	; 0x38
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8002fd4:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8002fd6:	400b      	ands	r3, r1
 8002fd8:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8002fda:	9b01      	ldr	r3, [sp, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
 8002fdc:	4c14      	ldr	r4, [pc, #80]	; (8003030 <MX_I2C1_Init+0xc8>)
 8002fde:	6862      	ldr	r2, [r4, #4]
 8002fe0:	2380      	movs	r3, #128	; 0x80
 8002fe2:	049b      	lsls	r3, r3, #18
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	6063      	str	r3, [r4, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_OA2EN);
 8002fe8:	68e3      	ldr	r3, [r4, #12]
 8002fea:	4a12      	ldr	r2, [pc, #72]	; (8003034 <MX_I2C1_Init+0xcc>)
 8002fec:	4013      	ands	r3, r2
 8002fee:	60e3      	str	r3, [r4, #12]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_GCEN);
 8002ff0:	6823      	ldr	r3, [r4, #0]
 8002ff2:	4a11      	ldr	r2, [pc, #68]	; (8003038 <MX_I2C1_Init+0xd0>)
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	6023      	str	r3, [r4, #0]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 8002ff8:	6823      	ldr	r3, [r4, #0]
 8002ffa:	4a10      	ldr	r2, [pc, #64]	; (800303c <MX_I2C1_Init+0xd4>)
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	6023      	str	r3, [r4, #0]
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 8003000:	2300      	movs	r3, #0
 8003002:	9309      	str	r3, [sp, #36]	; 0x24
  I2C_InitStruct.Timing = 0x0010061A;
 8003004:	4a0e      	ldr	r2, [pc, #56]	; (8003040 <MX_I2C1_Init+0xd8>)
 8003006:	920a      	str	r2, [sp, #40]	; 0x28
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 8003008:	930b      	str	r3, [sp, #44]	; 0x2c
  I2C_InitStruct.DigitalFilter = 0;
 800300a:	930c      	str	r3, [sp, #48]	; 0x30
  I2C_InitStruct.OwnAddress1 = 0;
 800300c:	930d      	str	r3, [sp, #52]	; 0x34
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 800300e:	930e      	str	r3, [sp, #56]	; 0x38
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 8003010:	930f      	str	r3, [sp, #60]	; 0x3c
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 8003012:	a909      	add	r1, sp, #36	; 0x24
 8003014:	0020      	movs	r0, r4
 8003016:	f7fd fd2b 	bl	8000a70 <LL_I2C_Init>
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_OA2 | I2C_OAR2_OA2MSK, OwnAddress2 | OwnAddrMask);
 800301a:	68e3      	ldr	r3, [r4, #12]
 800301c:	4a09      	ldr	r2, [pc, #36]	; (8003044 <MX_I2C1_Init+0xdc>)
 800301e:	4013      	ands	r3, r2
 8003020:	60e3      	str	r3, [r4, #12]
}
 8003022:	b010      	add	sp, #64	; 0x40
 8003024:	bc80      	pop	{r7}
 8003026:	46b8      	mov	r8, r7
 8003028:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800302a:	46c0      	nop			; (mov r8, r8)
 800302c:	40021000 	.word	0x40021000
 8003030:	40005400 	.word	0x40005400
 8003034:	ffff7fff 	.word	0xffff7fff
 8003038:	fff7ffff 	.word	0xfff7ffff
 800303c:	fffdffff 	.word	0xfffdffff
 8003040:	0010061a 	.word	0x0010061a
 8003044:	fffff801 	.word	0xfffff801

08003048 <MX_RTC_Init>:
{
 8003048:	b500      	push	{lr}
 800304a:	b085      	sub	sp, #20
  SET_BIT(RCC->CSR, RCC_CSR_RTCEN);
 800304c:	4a08      	ldr	r2, [pc, #32]	; (8003070 <MX_RTC_Init+0x28>)
 800304e:	6d11      	ldr	r1, [r2, #80]	; 0x50
 8003050:	2380      	movs	r3, #128	; 0x80
 8003052:	02db      	lsls	r3, r3, #11
 8003054:	430b      	orrs	r3, r1
 8003056:	6513      	str	r3, [r2, #80]	; 0x50
  RTC_InitStruct.HourFormat = LL_RTC_HOURFORMAT_24HOUR;
 8003058:	2300      	movs	r3, #0
 800305a:	9301      	str	r3, [sp, #4]
  RTC_InitStruct.AsynchPrescaler = 127;
 800305c:	337f      	adds	r3, #127	; 0x7f
 800305e:	9302      	str	r3, [sp, #8]
  RTC_InitStruct.SynchPrescaler = 255;
 8003060:	3380      	adds	r3, #128	; 0x80
 8003062:	9303      	str	r3, [sp, #12]
  LL_RTC_Init(RTC, &RTC_InitStruct);
 8003064:	a901      	add	r1, sp, #4
 8003066:	4803      	ldr	r0, [pc, #12]	; (8003074 <MX_RTC_Init+0x2c>)
 8003068:	f7fd fe30 	bl	8000ccc <LL_RTC_Init>
}
 800306c:	b005      	add	sp, #20
 800306e:	bd00      	pop	{pc}
 8003070:	40021000 	.word	0x40021000
 8003074:	40002800 	.word	0x40002800

08003078 <get_msb>:
    for (i = 1; i < 32; i++)
 8003078:	2301      	movs	r3, #1
 800307a:	2b1f      	cmp	r3, #31
 800307c:	d806      	bhi.n	800308c <get_msb+0x14>
        if (x < (1UL << i))
 800307e:	2201      	movs	r2, #1
 8003080:	409a      	lsls	r2, r3
 8003082:	4282      	cmp	r2, r0
 8003084:	d802      	bhi.n	800308c <get_msb+0x14>
    for (i = 1; i < 32; i++)
 8003086:	3301      	adds	r3, #1
 8003088:	b2db      	uxtb	r3, r3
 800308a:	e7f6      	b.n	800307a <get_msb+0x2>
    return(i - 1);
 800308c:	3b01      	subs	r3, #1
 800308e:	b2d8      	uxtb	r0, r3
}
 8003090:	4770      	bx	lr
	...

08003094 <dB_x100>:
{
 8003094:	b510      	push	{r4, lr}
 8003096:	0004      	movs	r4, r0
    msb = get_msb(x);
 8003098:	f7ff ffee 	bl	8003078 <get_msb>
 800309c:	0002      	movs	r2, r0
    pow2_low_bound = (1UL << msb); // pow2_low_bound <= x < 2 x pow2_low_bound
 800309e:	2001      	movs	r0, #1
 80030a0:	4090      	lsls	r0, r2
    log_tab_idx = ((x - pow2_low_bound)*LOG_TAB_SZ) / pow2_low_bound; // 0<= log_tab_idx < LOG_TAB_SZ
 80030a2:	1a24      	subs	r4, r4, r0
 80030a4:	0164      	lsls	r4, r4, #5
 80030a6:	40d4      	lsrs	r4, r2
    res = (uint32_t)log10_tab_1_2_int[log_tab_idx] + msb * LOG10_2_x1000;
 80030a8:	0064      	lsls	r4, r4, #1
 80030aa:	4b05      	ldr	r3, [pc, #20]	; (80030c0 <dB_x100+0x2c>)
 80030ac:	5ae4      	ldrh	r4, [r4, r3]
 80030ae:	0090      	lsls	r0, r2, #2
 80030b0:	1880      	adds	r0, r0, r2
 80030b2:	0103      	lsls	r3, r0, #4
 80030b4:	1a18      	subs	r0, r3, r0
 80030b6:	0080      	lsls	r0, r0, #2
 80030b8:	1880      	adds	r0, r0, r2
 80030ba:	1820      	adds	r0, r4, r0
}
 80030bc:	bd10      	pop	{r4, pc}
 80030be:	46c0      	nop			; (mov r8, r8)
 80030c0:	0800502c 	.word	0x0800502c

080030c4 <get_ext_diag_info>:
{
 80030c4:	b570      	push	{r4, r5, r6, lr}
 80030c6:	0005      	movs	r5, r0
 80030c8:	000e      	movs	r6, r1
    dwt_readdiagnostics( p_diagnostics );
 80030ca:	f7fd ff95 	bl	8000ff8 <dwt_readdiagnostics>
    n_rxpacc        = p_diagnostics->rxPreamCount; // was read from  = (dwt_read32bitreg(RX_FINFO_ID) & RX_FINFO_RXPACC_MASK) >> RX_FINFO_RXPACC_SHIFT  ;
 80030ce:	89ac      	ldrh	r4, [r5, #12]
    n_rxpacc_nosat  = dwt_read16bitoffsetreg(DRX_CONF_ID, 0x2C ); 
 80030d0:	212c      	movs	r1, #44	; 0x2c
 80030d2:	2027      	movs	r0, #39	; 0x27
 80030d4:	f7fd ff80 	bl	8000fd8 <dwt_read16bitoffsetreg>
    if( n_rxpacc == n_rxpacc_nosat )
 80030d8:	4284      	cmp	r4, r0
 80030da:	d012      	beq.n	8003102 <get_ext_diag_info+0x3e>
    rxprf = (dwt_read32bitreg(RX_FINFO_ID) & RX_FINFO_RXPRF_MASK) >> RX_FINFO_RXPRF_SHIFT  ;
 80030dc:	2100      	movs	r1, #0
 80030de:	2010      	movs	r0, #16
 80030e0:	f7fd ff54 	bl	8000f8c <dwt_read32bitoffsetreg>
    div = dB_x100( n_rxpacc*n_rxpacc ) ;
 80030e4:	0020      	movs	r0, r4
 80030e6:	4360      	muls	r0, r4
 80030e8:	f7ff ffd4 	bl	8003094 <dB_x100>
 80030ec:	0004      	movs	r4, r0
    *p_rx_lvl = ( dB_x100( (uint32_t) (p_diagnostics->maxGrowthCIR) << 17 ) - div ) -  A_dBm_x100  ;
 80030ee:	8968      	ldrh	r0, [r5, #10]
 80030f0:	0440      	lsls	r0, r0, #17
 80030f2:	f7ff ffcf 	bl	8003094 <dB_x100>
 80030f6:	1b00      	subs	r0, r0, r4
 80030f8:	4b07      	ldr	r3, [pc, #28]	; (8003118 <get_ext_diag_info+0x54>)
 80030fa:	469c      	mov	ip, r3
 80030fc:	4460      	add	r0, ip
 80030fe:	6030      	str	r0, [r6, #0]
}
 8003100:	bd70      	pop	{r4, r5, r6, pc}
        br = (dwt_read32bitreg(RX_FINFO_ID) & RX_FINFO_RXBR_MASK) >> RX_FINFO_RXBR_SHIFT  ;
 8003102:	2100      	movs	r1, #0
 8003104:	2010      	movs	r0, #16
 8003106:	f7fd ff41 	bl	8000f8c <dwt_read32bitoffsetreg>
 800310a:	0b40      	lsrs	r0, r0, #13
        if( br == RX_FINFO_RXBR_110k )
 800310c:	0783      	lsls	r3, r0, #30
 800310e:	d101      	bne.n	8003114 <get_ext_diag_info+0x50>
            n_rxpacc -= 64; // We assume standard SFD - see table 18 of dw1000_user_manual_2.12
 8003110:	3c40      	subs	r4, #64	; 0x40
 8003112:	e7e3      	b.n	80030dc <get_ext_diag_info+0x18>
            n_rxpacc -= 5;  //  We assume standard SFD - see table 18 of dw1000_user_manual_2.12
 8003114:	3c05      	subs	r4, #5
 8003116:	e7e1      	b.n	80030dc <get_ext_diag_info+0x18>
 8003118:	ffffd072 	.word	0xffffd072

0800311c <resp_to_poll>:
{
 800311c:	b530      	push	{r4, r5, lr}
 800311e:	b085      	sub	sp, #20
    tx_poll_msg[ ALL_MSG_SN_IDX ] = 0;
 8003120:	4937      	ldr	r1, [pc, #220]	; (8003200 <resp_to_poll+0xe4>)
 8003122:	2300      	movs	r3, #0
 8003124:	708b      	strb	r3, [r1, #2]
    if (memcmp(p_rx_buffer, tx_poll_msg, ALL_MSG_COMMON_LEN) == 0)
 8003126:	220a      	movs	r2, #10
 8003128:	f000 fcb2 	bl	8003a90 <memcmp>
 800312c:	2800      	cmp	r0, #0
 800312e:	d001      	beq.n	8003134 <resp_to_poll+0x18>
}
 8003130:	b005      	add	sp, #20
 8003132:	bd30      	pop	{r4, r5, pc}
        poll_rx_ts = 0;
 8003134:	2200      	movs	r2, #0
 8003136:	2300      	movs	r3, #0
 8003138:	9200      	str	r2, [sp, #0]
 800313a:	9301      	str	r3, [sp, #4]
        dwt_readrxtimestamp( (uint8_t*)&poll_rx_ts );
 800313c:	4668      	mov	r0, sp
 800313e:	f7fd ff1d 	bl	8000f7c <dwt_readrxtimestamp>
        pream_len = deca_to_plen( app.pConfig->dwt_config.txPreambLength );
 8003142:	4d30      	ldr	r5, [pc, #192]	; (8003204 <resp_to_poll+0xe8>)
 8003144:	682b      	ldr	r3, [r5, #0]
 8003146:	7898      	ldrb	r0, [r3, #2]
 8003148:	f000 fc32 	bl	80039b0 <deca_to_plen>
 800314c:	0004      	movs	r4, r0
        bitrate_kbps    = deca_to_bitrate( app.pConfig->dwt_config.dataRate );
 800314e:	682b      	ldr	r3, [r5, #0]
 8003150:	79d8      	ldrb	r0, [r3, #7]
 8003152:	f000 fb9d 	bl	8003890 <deca_to_bitrate>
        resp_tx_time = (poll_rx_ts + ((POLL_RX_TO_RESP_TX_DLY_UUS + pream_len) * UUS_TO_DWT_TIME)) >> 8;
 8003156:	23fa      	movs	r3, #250	; 0xfa
 8003158:	009b      	lsls	r3, r3, #2
 800315a:	18e0      	adds	r0, r4, r3
 800315c:	0404      	lsls	r4, r0, #16
 800315e:	2500      	movs	r5, #0
 8003160:	9a00      	ldr	r2, [sp, #0]
 8003162:	9b01      	ldr	r3, [sp, #4]
 8003164:	18a4      	adds	r4, r4, r2
 8003166:	415d      	adcs	r5, r3
 8003168:	062b      	lsls	r3, r5, #24
 800316a:	0a20      	lsrs	r0, r4, #8
 800316c:	4318      	orrs	r0, r3
        dwt_setdelayedtrxtime(resp_tx_time);
 800316e:	f7fe faea 	bl	8001746 <dwt_setdelayedtrxtime>
        resp_tx_ts = (((uint64_t)(resp_tx_time & 0xFFFFFFFEUL)) << 8) + TX_ANT_DLY;
 8003172:	0a61      	lsrs	r1, r4, #9
 8003174:	024a      	lsls	r2, r1, #9
 8003176:	21ff      	movs	r1, #255	; 0xff
 8003178:	4029      	ands	r1, r5
 800317a:	000b      	movs	r3, r1
 800317c:	4822      	ldr	r0, [pc, #136]	; (8003208 <resp_to_poll+0xec>)
 800317e:	2100      	movs	r1, #0
 8003180:	1812      	adds	r2, r2, r0
 8003182:	414b      	adcs	r3, r1
 8003184:	9202      	str	r2, [sp, #8]
 8003186:	9303      	str	r3, [sp, #12]
        memset( &tx_resp_msg[RESP_MSG_POLL_RX_TS_IDX   ], 0 , 2*5 ); // currently 5 bytes per timestamp in the payload
 8003188:	4c1d      	ldr	r4, [pc, #116]	; (8003200 <resp_to_poll+0xe4>)
 800318a:	0025      	movs	r5, r4
 800318c:	350c      	adds	r5, #12
 800318e:	0020      	movs	r0, r4
 8003190:	301a      	adds	r0, #26
 8003192:	2206      	movs	r2, #6
 8003194:	2100      	movs	r1, #0
 8003196:	f000 fc92 	bl	8003abe <memset>
        memcpy( &tx_resp_msg[RESP_MSG_POLL_RX_TS_IDX   ], &poll_rx_ts , sizeof(uint32_t) );
 800319a:	0020      	movs	r0, r4
 800319c:	3016      	adds	r0, #22
 800319e:	2204      	movs	r2, #4
 80031a0:	4669      	mov	r1, sp
 80031a2:	f000 fc83 	bl	8003aac <memcpy>
        memcpy( &tx_resp_msg[RESP_MSG_POLL_RX_TS_IDX +5], &resp_tx_ts , sizeof(uint32_t) );
 80031a6:	0020      	movs	r0, r4
 80031a8:	301b      	adds	r0, #27
 80031aa:	2204      	movs	r2, #4
 80031ac:	a902      	add	r1, sp, #8
 80031ae:	f000 fc7d 	bl	8003aac <memcpy>
        tx_resp_msg[ALL_MSG_SN_IDX] = frame_seq_nb;
 80031b2:	4b16      	ldr	r3, [pc, #88]	; (800320c <resp_to_poll+0xf0>)
 80031b4:	781b      	ldrb	r3, [r3, #0]
 80031b6:	73a3      	strb	r3, [r4, #14]
        dwt_writetxdata( RESP_MSG_POLL_RX_TS_IDX + 2*5 + 2 , tx_resp_msg, 0); /* Zero offset in TX buffer. */
 80031b8:	2200      	movs	r2, #0
 80031ba:	0029      	movs	r1, r5
 80031bc:	2016      	movs	r0, #22
 80031be:	f7fd fe84 	bl	8000eca <dwt_writetxdata>
        dwt_writetxfctrl(RESP_MSG_POLL_RX_TS_IDX + 2*5 + 2 , 0, 1); /* Zero offset in TX buffer, ranging. */
 80031c2:	2201      	movs	r2, #1
 80031c4:	2100      	movs	r1, #0
 80031c6:	2016      	movs	r0, #22
 80031c8:	f7fd ff94 	bl	80010f4 <dwt_writetxfctrl>
        ret = dwt_starttx(DWT_START_TX_DELAYED);
 80031cc:	2001      	movs	r0, #1
 80031ce:	f7fe fac1 	bl	8001754 <dwt_starttx>
        if (ret == DWT_SUCCESS)
 80031d2:	2800      	cmp	r0, #0
 80031d4:	d10f      	bne.n	80031f6 <resp_to_poll+0xda>
            while (!(dwt_read32bitreg(SYS_STATUS_ID) & SYS_STATUS_TXFRS))
 80031d6:	2100      	movs	r1, #0
 80031d8:	200f      	movs	r0, #15
 80031da:	f7fd fed7 	bl	8000f8c <dwt_read32bitoffsetreg>
 80031de:	0603      	lsls	r3, r0, #24
 80031e0:	d5f9      	bpl.n	80031d6 <resp_to_poll+0xba>
            dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_TXFRS);
 80031e2:	2280      	movs	r2, #128	; 0x80
 80031e4:	2100      	movs	r1, #0
 80031e6:	200f      	movs	r0, #15
 80031e8:	f7fd ff71 	bl	80010ce <dwt_write32bitoffsetreg>
            frame_seq_nb++;
 80031ec:	4a07      	ldr	r2, [pc, #28]	; (800320c <resp_to_poll+0xf0>)
 80031ee:	7813      	ldrb	r3, [r2, #0]
 80031f0:	3301      	adds	r3, #1
 80031f2:	7013      	strb	r3, [r2, #0]
 80031f4:	e79c      	b.n	8003130 <resp_to_poll+0x14>
            dw_printf("ERR TX_DLYED\n");
 80031f6:	4806      	ldr	r0, [pc, #24]	; (8003210 <resp_to_poll+0xf4>)
 80031f8:	f7fe fe48 	bl	8001e8c <dw_printf>
    return;
 80031fc:	e798      	b.n	8003130 <resp_to_poll+0x14>
 80031fe:	46c0      	nop			; (mov r8, r8)
 8003200:	20000004 	.word	0x20000004
 8003204:	200005b8 	.word	0x200005b8
 8003208:	00004034 	.word	0x00004034
 800320c:	20000568 	.word	0x20000568
 8003210:	080054f8 	.word	0x080054f8

08003214 <calc_tof_from_rcved_resp>:
{
 8003214:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003216:	46ce      	mov	lr, r9
 8003218:	4647      	mov	r7, r8
 800321a:	b580      	push	{r7, lr}
 800321c:	b089      	sub	sp, #36	; 0x24
 800321e:	0004      	movs	r4, r0
    if (memcmp(p_rx_buffer, rx_resp_msg, ALL_MSG_COMMON_LEN) == 0)
 8003220:	494d      	ldr	r1, [pc, #308]	; (8003358 <calc_tof_from_rcved_resp+0x144>)
 8003222:	220a      	movs	r2, #10
 8003224:	3120      	adds	r1, #32
 8003226:	f000 fc33 	bl	8003a90 <memcmp>
 800322a:	2800      	cmp	r0, #0
 800322c:	d004      	beq.n	8003238 <calc_tof_from_rcved_resp+0x24>
}
 800322e:	b009      	add	sp, #36	; 0x24
 8003230:	bcc0      	pop	{r6, r7}
 8003232:	46b9      	mov	r9, r7
 8003234:	46b0      	mov	r8, r6
 8003236:	bdf0      	pop	{r4, r5, r6, r7, pc}
        poll_tx_ts = dwt_readtxtimestamplo32();
 8003238:	f7fd fec2 	bl	8000fc0 <dwt_readtxtimestamplo32>
 800323c:	0005      	movs	r5, r0
        resp_rx_ts = dwt_readrxtimestamplo32();
 800323e:	f7fd fec5 	bl	8000fcc <dwt_readrxtimestamplo32>
 8003242:	0006      	movs	r6, r0
        memcpy(&poll_rx_ts , &p_rx_buffer[RESP_MSG_POLL_RX_TS_IDX    ] , sizeof(uint32_t) );
 8003244:	0021      	movs	r1, r4
 8003246:	310a      	adds	r1, #10
 8003248:	2204      	movs	r2, #4
 800324a:	a807      	add	r0, sp, #28
 800324c:	f000 fc2e 	bl	8003aac <memcpy>
        memcpy(&resp_tx_ts , &p_rx_buffer[RESP_MSG_POLL_RX_TS_IDX + 5] , sizeof(uint32_t) );
 8003250:	0021      	movs	r1, r4
 8003252:	310f      	adds	r1, #15
 8003254:	2204      	movs	r2, #4
 8003256:	a806      	add	r0, sp, #24
 8003258:	f000 fc28 	bl	8003aac <memcpy>
        rtd_init = resp_rx_ts - poll_tx_ts;
 800325c:	1b76      	subs	r6, r6, r5
        rtd_resp = resp_tx_ts - poll_rx_ts;
 800325e:	9b06      	ldr	r3, [sp, #24]
 8003260:	9a07      	ldr	r2, [sp, #28]
 8003262:	1a9b      	subs	r3, r3, r2
 8003264:	4699      	mov	r9, r3
        switch( app.pConfig->dwt_config.chan) // config.chan )
 8003266:	4b3d      	ldr	r3, [pc, #244]	; (800335c <calc_tof_from_rcved_resp+0x148>)
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	7813      	ldrb	r3, [r2, #0]
 800326c:	2b07      	cmp	r3, #7
 800326e:	d80c      	bhi.n	800328a <calc_tof_from_rcved_resp+0x76>
 8003270:	009b      	lsls	r3, r3, #2
 8003272:	493b      	ldr	r1, [pc, #236]	; (8003360 <calc_tof_from_rcved_resp+0x14c>)
 8003274:	58cb      	ldr	r3, [r1, r3]
 8003276:	469f      	mov	pc, r3
 8003278:	4c3a      	ldr	r4, [pc, #232]	; (8003364 <calc_tof_from_rcved_resp+0x150>)
 800327a:	2500      	movs	r5, #0
 800327c:	e00a      	b.n	8003294 <calc_tof_from_rcved_resp+0x80>
            case 3:       c_hz2ppm_mult_chan = C_x_FREQ_OFFS_MULT_x_HZ2PPM_CH3;break;
 800327e:	4c3a      	ldr	r4, [pc, #232]	; (8003368 <calc_tof_from_rcved_resp+0x154>)
 8003280:	2500      	movs	r5, #0
 8003282:	e007      	b.n	8003294 <calc_tof_from_rcved_resp+0x80>
            case 5:case 7:c_hz2ppm_mult_chan = C_x_FREQ_OFFS_MULT_x_HZ2PPM_CH5;break;
 8003284:	4c39      	ldr	r4, [pc, #228]	; (800336c <calc_tof_from_rcved_resp+0x158>)
 8003286:	2500      	movs	r5, #0
 8003288:	e004      	b.n	8003294 <calc_tof_from_rcved_resp+0x80>
            default:      c_hz2ppm_mult_chan = C_x_FREQ_OFFS_MULT_x_HZ2PPM_CH5;break;
 800328a:	4c38      	ldr	r4, [pc, #224]	; (800336c <calc_tof_from_rcved_resp+0x158>)
 800328c:	2500      	movs	r5, #0
 800328e:	e001      	b.n	8003294 <calc_tof_from_rcved_resp+0x80>
            case 2:case 4:c_hz2ppm_mult_chan = C_x_FREQ_OFFS_MULT_x_HZ2PPM_CH2;break;
 8003290:	4c37      	ldr	r4, [pc, #220]	; (8003370 <calc_tof_from_rcved_resp+0x15c>)
 8003292:	2500      	movs	r5, #0
        if( app.pConfig->dwt_config.dataRate == DWT_BR_110K )
 8003294:	79d3      	ldrb	r3, [r2, #7]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d103      	bne.n	80032a2 <calc_tof_from_rcved_resp+0x8e>
            c_hz2ppm_mult_chan /= 8;
 800329a:	076b      	lsls	r3, r5, #29
 800329c:	08e4      	lsrs	r4, r4, #3
 800329e:	431c      	orrs	r4, r3
 80032a0:	08ed      	lsrs	r5, r5, #3
        clk_offs = (int64_t)dwt_readcarrierintegrator() * c_hz2ppm_mult_chan;
 80032a2:	f7fd fe4d 	bl	8000f40 <dwt_readcarrierintegrator>
 80032a6:	17c1      	asrs	r1, r0, #31
 80032a8:	0022      	movs	r2, r4
 80032aa:	002b      	movs	r3, r5
 80032ac:	f7fd f902 	bl	80004b4 <__aeabi_lmul>
 80032b0:	0004      	movs	r4, r0
 80032b2:	000d      	movs	r5, r1
        clk_offs_ppm_x100 = (int32_t)( ( clk_offs * 100 ) / (int64_t)SPEED_OF_LIGHT );
 80032b4:	2264      	movs	r2, #100	; 0x64
 80032b6:	2300      	movs	r3, #0
 80032b8:	f7fd f8fc 	bl	80004b4 <__aeabi_lmul>
 80032bc:	4a2d      	ldr	r2, [pc, #180]	; (8003374 <calc_tof_from_rcved_resp+0x160>)
 80032be:	2300      	movs	r3, #0
 80032c0:	f7fd f8b4 	bl	800042c <__aeabi_ldivmod>
 80032c4:	4680      	mov	r8, r0
        dist_cm   = (uint64_t)1000000*(uint64_t)SPEED_OF_LIGHT*(uint64_t)rtd_init;
 80032c6:	17f1      	asrs	r1, r6, #31
 80032c8:	4a2b      	ldr	r2, [pc, #172]	; (8003378 <calc_tof_from_rcved_resp+0x164>)
 80032ca:	4b2c      	ldr	r3, [pc, #176]	; (800337c <calc_tof_from_rcved_resp+0x168>)
 80032cc:	0030      	movs	r0, r6
 80032ce:	f7fd f8f1 	bl	80004b4 <__aeabi_lmul>
 80032d2:	0006      	movs	r6, r0
 80032d4:	000f      	movs	r7, r1
        dist_cm  -= (uint64_t)rtd_resp * ((uint64_t)1000000*(uint64_t)SPEED_OF_LIGHT + clk_offs );
 80032d6:	464b      	mov	r3, r9
 80032d8:	17d9      	asrs	r1, r3, #31
 80032da:	4a27      	ldr	r2, [pc, #156]	; (8003378 <calc_tof_from_rcved_resp+0x164>)
 80032dc:	4b27      	ldr	r3, [pc, #156]	; (800337c <calc_tof_from_rcved_resp+0x168>)
 80032de:	1912      	adds	r2, r2, r4
 80032e0:	416b      	adcs	r3, r5
 80032e2:	4648      	mov	r0, r9
 80032e4:	f7fd f8e6 	bl	80004b4 <__aeabi_lmul>
 80032e8:	1a36      	subs	r6, r6, r0
 80032ea:	418f      	sbcs	r7, r1
 80032ec:	0030      	movs	r0, r6
 80032ee:	0039      	movs	r1, r7
        dist_cm /= 10000; // if expressed in meters, would be 1000000 (i.e the scale factor used 5 lines above)
 80032f0:	22c6      	movs	r2, #198	; 0xc6
 80032f2:	05d2      	lsls	r2, r2, #23
 80032f4:	4b22      	ldr	r3, [pc, #136]	; (8003380 <calc_tof_from_rcved_resp+0x16c>)
 80032f6:	f7fd f8bd 	bl	8000474 <__aeabi_uldivmod>
 80032fa:	0004      	movs	r4, r0
        get_ext_diag_info( &diagnostics, &rx_lvl );
 80032fc:	a905      	add	r1, sp, #20
 80032fe:	a801      	add	r0, sp, #4
 8003300:	f7ff fee0 	bl	80030c4 <get_ext_diag_info>
        dw_printf("Dist_cm: %4d " , (uint32_t)dist_cm );
 8003304:	0021      	movs	r1, r4
 8003306:	481f      	ldr	r0, [pc, #124]	; (8003384 <calc_tof_from_rcved_resp+0x170>)
 8003308:	f7fe fdc0 	bl	8001e8c <dw_printf>
        dw_printf("RX: %4d.%2d " ,    rx_lvl/100 , (-rx_lvl)%100 );
 800330c:	9d05      	ldr	r5, [sp, #20]
 800330e:	4268      	negs	r0, r5
 8003310:	2164      	movs	r1, #100	; 0x64
 8003312:	f7fd f885 	bl	8000420 <__aeabi_idivmod>
 8003316:	000c      	movs	r4, r1
 8003318:	2164      	movs	r1, #100	; 0x64
 800331a:	0028      	movs	r0, r5
 800331c:	f7fc ff9a 	bl	8000254 <__divsi3>
 8003320:	0001      	movs	r1, r0
 8003322:	0022      	movs	r2, r4
 8003324:	4818      	ldr	r0, [pc, #96]	; (8003388 <calc_tof_from_rcved_resp+0x174>)
 8003326:	f7fe fdb1 	bl	8001e8c <dw_printf>
        dw_printf("ClkPPM: %2d.%2d " , clk_offs_ppm_x100 / 100 , abs(clk_offs_ppm_x100) % 100 );
 800332a:	4643      	mov	r3, r8
 800332c:	17da      	asrs	r2, r3, #31
 800332e:	1898      	adds	r0, r3, r2
 8003330:	4050      	eors	r0, r2
 8003332:	2164      	movs	r1, #100	; 0x64
 8003334:	f7fd f874 	bl	8000420 <__aeabi_idivmod>
 8003338:	000c      	movs	r4, r1
 800333a:	2164      	movs	r1, #100	; 0x64
 800333c:	4640      	mov	r0, r8
 800333e:	f7fc ff89 	bl	8000254 <__divsi3>
 8003342:	0001      	movs	r1, r0
 8003344:	0022      	movs	r2, r4
 8003346:	4811      	ldr	r0, [pc, #68]	; (800338c <calc_tof_from_rcved_resp+0x178>)
 8003348:	f7fe fda0 	bl	8001e8c <dw_printf>
        dw_printf("SeqN: %3d\r\n" , (uint32_t)seq_number );
 800334c:	4b10      	ldr	r3, [pc, #64]	; (8003390 <calc_tof_from_rcved_resp+0x17c>)
 800334e:	7859      	ldrb	r1, [r3, #1]
 8003350:	4810      	ldr	r0, [pc, #64]	; (8003394 <calc_tof_from_rcved_resp+0x180>)
 8003352:	f7fe fd9b 	bl	8001e8c <dw_printf>
    return;
 8003356:	e76a      	b.n	800322e <calc_tof_from_rcved_resp+0x1a>
 8003358:	20000004 	.word	0x20000004
 800335c:	200005b8 	.word	0x200005b8
 8003360:	0800500c 	.word	0x0800500c
 8003364:	0004de12 	.word	0x0004de12
 8003368:	0003c92a 	.word	0x0003c92a
 800336c:	00029ef6 	.word	0x00029ef6
 8003370:	00044250 	.word	0x00044250
 8003374:	11dd1913 	.word	0x11dd1913
 8003378:	efda2ac0 	.word	0xefda2ac0
 800337c:	00011093 	.word	0x00011093
 8003380:	00048a4a 	.word	0x00048a4a
 8003384:	08005508 	.word	0x08005508
 8003388:	08005518 	.word	0x08005518
 800338c:	08005528 	.word	0x08005528
 8003390:	20000568 	.word	0x20000568
 8003394:	0800553c 	.word	0x0800553c

08003398 <SystemClock_Config>:
{
 8003398:	b510      	push	{r4, lr}
  *         @arg @ref LL_FLASH_LATENCY_1
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 800339a:	4a3d      	ldr	r2, [pc, #244]	; (8003490 <SystemClock_Config+0xf8>)
 800339c:	6813      	ldr	r3, [r2, #0]
 800339e:	2101      	movs	r1, #1
 80033a0:	438b      	bics	r3, r1
 80033a2:	6013      	str	r3, [r2, #0]
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80033a4:	4b3a      	ldr	r3, [pc, #232]	; (8003490 <SystemClock_Config+0xf8>)
 80033a6:	681b      	ldr	r3, [r3, #0]
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_0)
 80033a8:	07db      	lsls	r3, r3, #31
 80033aa:	d4fb      	bmi.n	80033a4 <SystemClock_Config+0xc>
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 80033ac:	4939      	ldr	r1, [pc, #228]	; (8003494 <SystemClock_Config+0xfc>)
 80033ae:	680b      	ldr	r3, [r1, #0]
 80033b0:	4a39      	ldr	r2, [pc, #228]	; (8003498 <SystemClock_Config+0x100>)
 80033b2:	401a      	ands	r2, r3
 80033b4:	2380      	movs	r3, #128	; 0x80
 80033b6:	011b      	lsls	r3, r3, #4
 80033b8:	4313      	orrs	r3, r2
 80033ba:	600b      	str	r3, [r1, #0]
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80033bc:	4a37      	ldr	r2, [pc, #220]	; (800349c <SystemClock_Config+0x104>)
 80033be:	6813      	ldr	r3, [r2, #0]
 80033c0:	2101      	movs	r1, #1
 80033c2:	430b      	orrs	r3, r1
 80033c4:	6013      	str	r3, [r2, #0]
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 80033c6:	4b35      	ldr	r3, [pc, #212]	; (800349c <SystemClock_Config+0x104>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	075b      	lsls	r3, r3, #29
 80033cc:	d5fb      	bpl.n	80033c6 <SystemClock_Config+0x2e>
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80033ce:	4b33      	ldr	r3, [pc, #204]	; (800349c <SystemClock_Config+0x104>)
 80033d0:	685a      	ldr	r2, [r3, #4]
 80033d2:	4933      	ldr	r1, [pc, #204]	; (80034a0 <SystemClock_Config+0x108>)
 80033d4:	4011      	ands	r1, r2
 80033d6:	2280      	movs	r2, #128	; 0x80
 80033d8:	0152      	lsls	r2, r2, #5
 80033da:	430a      	orrs	r2, r1
 80033dc:	605a      	str	r2, [r3, #4]
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 80033de:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80033e0:	2101      	movs	r1, #1
 80033e2:	430a      	orrs	r2, r1
 80033e4:	651a      	str	r2, [r3, #80]	; 0x50
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) ? 1UL : 0UL);
 80033e6:	4b2d      	ldr	r3, [pc, #180]	; (800349c <SystemClock_Config+0x104>)
 80033e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033ea:	079b      	lsls	r3, r3, #30
 80033ec:	d5fb      	bpl.n	80033e6 <SystemClock_Config+0x4e>
  * @rmtoll CR    DBP       LL_PWR_EnableBkUpAccess
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR, PWR_CR_DBP);
 80033ee:	4a29      	ldr	r2, [pc, #164]	; (8003494 <SystemClock_Config+0xfc>)
 80033f0:	6811      	ldr	r1, [r2, #0]
 80033f2:	2380      	movs	r3, #128	; 0x80
 80033f4:	005b      	lsls	r3, r3, #1
 80033f6:	430b      	orrs	r3, r1
 80033f8:	6013      	str	r3, [r2, #0]
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_RTCSEL));
 80033fa:	4b28      	ldr	r3, [pc, #160]	; (800349c <SystemClock_Config+0x104>)
 80033fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033fe:	22c0      	movs	r2, #192	; 0xc0
 8003400:	0292      	lsls	r2, r2, #10
 8003402:	4013      	ands	r3, r2
  if(LL_RCC_GetRTCClockSource() != LL_RCC_RTC_CLKSOURCE_LSI)
 8003404:	2280      	movs	r2, #128	; 0x80
 8003406:	0292      	lsls	r2, r2, #10
 8003408:	4293      	cmp	r3, r2
 800340a:	d010      	beq.n	800342e <SystemClock_Config+0x96>
  SET_BIT(RCC->CSR, RCC_CSR_RTCRST);
 800340c:	4b23      	ldr	r3, [pc, #140]	; (800349c <SystemClock_Config+0x104>)
 800340e:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003410:	2280      	movs	r2, #128	; 0x80
 8003412:	0312      	lsls	r2, r2, #12
 8003414:	430a      	orrs	r2, r1
 8003416:	651a      	str	r2, [r3, #80]	; 0x50
  CLEAR_BIT(RCC->CSR, RCC_CSR_RTCRST);
 8003418:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800341a:	4922      	ldr	r1, [pc, #136]	; (80034a4 <SystemClock_Config+0x10c>)
 800341c:	400a      	ands	r2, r1
 800341e:	651a      	str	r2, [r3, #80]	; 0x50
  MODIFY_REG(RCC->CSR, RCC_CSR_RTCSEL, Source);
 8003420:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003422:	4921      	ldr	r1, [pc, #132]	; (80034a8 <SystemClock_Config+0x110>)
 8003424:	4011      	ands	r1, r2
 8003426:	2280      	movs	r2, #128	; 0x80
 8003428:	0292      	lsls	r2, r2, #10
 800342a:	430a      	orrs	r2, r1
 800342c:	651a      	str	r2, [r3, #80]	; 0x50
  SET_BIT(RCC->CSR, RCC_CSR_RTCEN);
 800342e:	4b1b      	ldr	r3, [pc, #108]	; (800349c <SystemClock_Config+0x104>)
 8003430:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003432:	2280      	movs	r2, #128	; 0x80
 8003434:	02d2      	lsls	r2, r2, #11
 8003436:	430a      	orrs	r2, r1
 8003438:	651a      	str	r2, [r3, #80]	; 0x50
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800343a:	68da      	ldr	r2, [r3, #12]
 800343c:	21f0      	movs	r1, #240	; 0xf0
 800343e:	438a      	bics	r2, r1
 8003440:	60da      	str	r2, [r3, #12]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8003442:	68da      	ldr	r2, [r3, #12]
 8003444:	4919      	ldr	r1, [pc, #100]	; (80034ac <SystemClock_Config+0x114>)
 8003446:	400a      	ands	r2, r1
 8003448:	60da      	str	r2, [r3, #12]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800344a:	68da      	ldr	r2, [r3, #12]
 800344c:	4918      	ldr	r1, [pc, #96]	; (80034b0 <SystemClock_Config+0x118>)
 800344e:	400a      	ands	r2, r1
 8003450:	60da      	str	r2, [r3, #12]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8003452:	68da      	ldr	r2, [r3, #12]
 8003454:	2103      	movs	r1, #3
 8003456:	438a      	bics	r2, r1
 8003458:	3902      	subs	r1, #2
 800345a:	430a      	orrs	r2, r1
 800345c:	60da      	str	r2, [r3, #12]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800345e:	4b0f      	ldr	r3, [pc, #60]	; (800349c <SystemClock_Config+0x104>)
 8003460:	68da      	ldr	r2, [r3, #12]
 8003462:	230c      	movs	r3, #12
 8003464:	4013      	ands	r3, r2
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 8003466:	2b04      	cmp	r3, #4
 8003468:	d1f9      	bne.n	800345e <SystemClock_Config+0xc6>
  LL_Init1msTick(16000000);
 800346a:	4c12      	ldr	r4, [pc, #72]	; (80034b4 <SystemClock_Config+0x11c>)
 800346c:	0020      	movs	r0, r4
 800346e:	f7fd fcdf 	bl	8000e30 <LL_Init1msTick>
  LL_SetSystemCoreClock(16000000);
 8003472:	0020      	movs	r0, r4
 8003474:	f7fd fd00 	bl	8000e78 <LL_SetSystemCoreClock>
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16U), (USARTxSource & 0x0000FFFFU));
 8003478:	4a08      	ldr	r2, [pc, #32]	; (800349c <SystemClock_Config+0x104>)
 800347a:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800347c:	210c      	movs	r1, #12
 800347e:	438b      	bics	r3, r1
 8003480:	3904      	subs	r1, #4
 8003482:	430b      	orrs	r3, r1
 8003484:	64d3      	str	r3, [r2, #76]	; 0x4c
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4U) & 0x000FF000U), ((I2CxSource << 4U) & 0x000FF000U));
 8003486:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8003488:	490b      	ldr	r1, [pc, #44]	; (80034b8 <SystemClock_Config+0x120>)
 800348a:	400b      	ands	r3, r1
 800348c:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 800348e:	bd10      	pop	{r4, pc}
 8003490:	40022000 	.word	0x40022000
 8003494:	40007000 	.word	0x40007000
 8003498:	ffffe7ff 	.word	0xffffe7ff
 800349c:	40021000 	.word	0x40021000
 80034a0:	ffffe0ff 	.word	0xffffe0ff
 80034a4:	fff7ffff 	.word	0xfff7ffff
 80034a8:	fffcffff 	.word	0xfffcffff
 80034ac:	fffff8ff 	.word	0xfffff8ff
 80034b0:	ffffc7ff 	.word	0xffffc7ff
 80034b4:	00f42400 	.word	0x00f42400
 80034b8:	ffffcfff 	.word	0xffffcfff

080034bc <main>:
{
 80034bc:	b530      	push	{r4, r5, lr}
 80034be:	b083      	sub	sp, #12
    SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP | DBGMCU_CR_DBG_STOP | DBGMCU_CR_DBG_STANDBY );
 80034c0:	4a9c      	ldr	r2, [pc, #624]	; (8003734 <main+0x278>)
 80034c2:	6853      	ldr	r3, [r2, #4]
 80034c4:	2507      	movs	r5, #7
 80034c6:	432b      	orrs	r3, r5
 80034c8:	6053      	str	r3, [r2, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80034ca:	4c9b      	ldr	r4, [pc, #620]	; (8003738 <main+0x27c>)
 80034cc:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80034ce:	2301      	movs	r3, #1
 80034d0:	431a      	orrs	r2, r3
 80034d2:	6362      	str	r2, [r4, #52]	; 0x34
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80034d4:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80034d6:	4013      	ands	r3, r2
 80034d8:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80034da:	9b01      	ldr	r3, [sp, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 80034dc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80034de:	2180      	movs	r1, #128	; 0x80
 80034e0:	0549      	lsls	r1, r1, #21
 80034e2:	430a      	orrs	r2, r1
 80034e4:	63a2      	str	r2, [r4, #56]	; 0x38
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80034e6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80034e8:	400b      	ands	r3, r1
 80034ea:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 80034ec:	9b00      	ldr	r3, [sp, #0]
  SystemClock_Config();
 80034ee:	f7ff ff53 	bl	8003398 <SystemClock_Config>
    SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80034f2:	4b92      	ldr	r3, [pc, #584]	; (800373c <main+0x280>)
 80034f4:	601d      	str	r5, [r3, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 80034f6:	68e3      	ldr	r3, [r4, #12]
 80034f8:	4a91      	ldr	r2, [pc, #580]	; (8003740 <main+0x284>)
 80034fa:	401a      	ands	r2, r3
 80034fc:	2380      	movs	r3, #128	; 0x80
 80034fe:	021b      	lsls	r3, r3, #8
 8003500:	4313      	orrs	r3, r2
 8003502:	60e3      	str	r3, [r4, #12]
  MX_GPIO_Init();
 8003504:	f7ff fb3c 	bl	8002b80 <MX_GPIO_Init>
  MX_SPI1_Init();
 8003508:	f7ff fc28 	bl	8002d5c <MX_SPI1_Init>
  MX_USART2_UART_Init();
 800350c:	f7ff fc8e 	bl	8002e2c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8003510:	f7ff fd2a 	bl	8002f68 <MX_I2C1_Init>
  MX_CRC_Init();
 8003514:	f7ff fb0e 	bl	8002b34 <MX_CRC_Init>
  MX_RTC_Init();
 8003518:	f7ff fd96 	bl	8003048 <MX_RTC_Init>
    lis3dh_power_ON();
 800351c:	f7fe fd92 	bl	8002044 <lis3dh_power_ON>
    memset(&app,0,sizeof(app));
 8003520:	2210      	movs	r2, #16
 8003522:	2100      	movs	r1, #0
 8003524:	4887      	ldr	r0, [pc, #540]	; (8003744 <main+0x288>)
 8003526:	f000 faca 	bl	8003abe <memset>
    reset_DW1000();
 800352a:	f7fe fd3d 	bl	8001fa8 <reset_DW1000>
    load_bssConfig();                 /**< load the RAM Configuration parameters from NVM block */
 800352e:	f7ff fad1 	bl	8002ad4 <load_bssConfig>
    reset_DW1000(); // Target specific drive of RSTn line into DW1000 low for a period.
 8003532:	f7fe fd39 	bl	8001fa8 <reset_DW1000>
    port_set_dw1000_slowrate();
 8003536:	f7fe fcfd 	bl	8001f34 <port_set_dw1000_slowrate>
    if (dwt_initialise(DWT_LOADUCODE) == DWT_ERROR)
 800353a:	2001      	movs	r0, #1
 800353c:	f7fe fac2 	bl	8001ac4 <dwt_initialise>
 8003540:	1c43      	adds	r3, r0, #1
 8003542:	d03b      	beq.n	80035bc <main+0x100>
    port_set_dw1000_fastrate();
 8003544:	f7fe fd12 	bl	8001f6c <port_set_dw1000_fastrate>
    dwt_configure(&(app.pConfig->dwt_config)); // &config);
 8003548:	4c7e      	ldr	r4, [pc, #504]	; (8003744 <main+0x288>)
 800354a:	6820      	ldr	r0, [r4, #0]
 800354c:	f7fd fefa 	bl	8001344 <dwt_configure>
    dwt_write32bitreg(TX_POWER_ID, txpow_STXP_DISabled_table20[ app.pConfig->dwt_config.chan ][ app.pConfig->dwt_config.prf - 1 ] );
 8003550:	6822      	ldr	r2, [r4, #0]
 8003552:	7813      	ldrb	r3, [r2, #0]
 8003554:	7852      	ldrb	r2, [r2, #1]
 8003556:	3a01      	subs	r2, #1
 8003558:	005b      	lsls	r3, r3, #1
 800355a:	189b      	adds	r3, r3, r2
 800355c:	009b      	lsls	r3, r3, #2
 800355e:	4a7a      	ldr	r2, [pc, #488]	; (8003748 <main+0x28c>)
 8003560:	18d3      	adds	r3, r2, r3
 8003562:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003564:	2100      	movs	r1, #0
 8003566:	201e      	movs	r0, #30
 8003568:	f7fd fdb1 	bl	80010ce <dwt_write32bitoffsetreg>
    dwt_write8bitoffsetreg(TX_CAL_ID, TC_PGDELAY_OFFSET, pg_delay_table40[ app.pConfig->dwt_config.chan ] );
 800356c:	6823      	ldr	r3, [r4, #0]
 800356e:	781b      	ldrb	r3, [r3, #0]
 8003570:	4a76      	ldr	r2, [pc, #472]	; (800374c <main+0x290>)
 8003572:	5cd2      	ldrb	r2, [r2, r3]
 8003574:	210b      	movs	r1, #11
 8003576:	202a      	movs	r0, #42	; 0x2a
 8003578:	f7fd fd69 	bl	800104e <dwt_write8bitoffsetreg>
    if( app.pConfig->dwt_config.txPreambLength == DWT_PLEN_64 )
 800357c:	6823      	ldr	r3, [r4, #0]
 800357e:	789a      	ldrb	r2, [r3, #2]
 8003580:	2a04      	cmp	r2, #4
 8003582:	d01f      	beq.n	80035c4 <main+0x108>
    set_los_nlos_config( app.pConfig->nlos );
 8003584:	4c6f      	ldr	r4, [pc, #444]	; (8003744 <main+0x288>)
 8003586:	2364      	movs	r3, #100	; 0x64
 8003588:	6822      	ldr	r2, [r4, #0]
 800358a:	5cd0      	ldrb	r0, [r2, r3]
 800358c:	f7fe ffba 	bl	8002504 <set_los_nlos_config>
    dwt_setrxantennadelay(RX_ANT_DLY);
 8003590:	4d6f      	ldr	r5, [pc, #444]	; (8003750 <main+0x294>)
 8003592:	0028      	movs	r0, r5
 8003594:	f7fd fd8a 	bl	80010ac <dwt_setrxantennadelay>
    dwt_settxantennadelay(TX_ANT_DLY);
 8003598:	0028      	movs	r0, r5
 800359a:	f7fd fd91 	bl	80010c0 <dwt_settxantennadelay>
    if( app.pConfig->twr_role == TWR_INIT )
 800359e:	6822      	ldr	r2, [r4, #0]
 80035a0:	2363      	movs	r3, #99	; 0x63
 80035a2:	5cd3      	ldrb	r3, [r2, r3]
 80035a4:	2b01      	cmp	r3, #1
 80035a6:	d011      	beq.n	80035cc <main+0x110>
    dwt_setrxtimeout(65000); // RESP_RX_TIMEOUT_UUS
 80035a8:	486a      	ldr	r0, [pc, #424]	; (8003754 <main+0x298>)
 80035aa:	f7fe f971 	bl	8001890 <dwt_setrxtimeout>
    dwt_setleds(3);
 80035ae:	2003      	movs	r0, #3
 80035b0:	f7fd fffe 	bl	80015b0 <dwt_setleds>
    dw_printf("Starting\n");
 80035b4:	4868      	ldr	r0, [pc, #416]	; (8003758 <main+0x29c>)
 80035b6:	f7fe fc69 	bl	8001e8c <dw_printf>
 80035ba:	e06e      	b.n	800369a <main+0x1de>
        dw_printf("INIT FAILED\n\r");
 80035bc:	4867      	ldr	r0, [pc, #412]	; (800375c <main+0x2a0>)
 80035be:	f7fe fc65 	bl	8001e8c <dw_printf>
        while (1)
 80035c2:	e7fe      	b.n	80035c2 <main+0x106>
        dwt_configurefor64plen(app.pConfig->dwt_config.prf);
 80035c4:	7858      	ldrb	r0, [r3, #1]
 80035c6:	f7fd fd4e 	bl	8001066 <dwt_configurefor64plen>
 80035ca:	e7db      	b.n	8003584 <main+0xc8>
      dwt_setrxaftertxdelay(POLL_TX_TO_RESP_RX_DLY_UUS);
 80035cc:	208c      	movs	r0, #140	; 0x8c
 80035ce:	f7fd ffdf 	bl	8001590 <dwt_setrxaftertxdelay>
 80035d2:	e7e9      	b.n	80035a8 <main+0xec>
            b_user_button = 0;
 80035d4:	2334      	movs	r3, #52	; 0x34
 80035d6:	2100      	movs	r1, #0
 80035d8:	54d1      	strb	r1, [r2, r3]
            dw_printf("User button pressed\n\r");
 80035da:	4861      	ldr	r0, [pc, #388]	; (8003760 <main+0x2a4>)
 80035dc:	f7fe fc56 	bl	8001e8c <dw_printf>
            if( app.pConfig->twr_role == TWR_INIT )
 80035e0:	4b58      	ldr	r3, [pc, #352]	; (8003744 <main+0x288>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	2263      	movs	r2, #99	; 0x63
 80035e6:	5c9a      	ldrb	r2, [r3, r2]
 80035e8:	2a01      	cmp	r2, #1
 80035ea:	d006      	beq.n	80035fa <main+0x13e>
                app.pConfig->twr_role = TWR_INIT;
 80035ec:	2263      	movs	r2, #99	; 0x63
 80035ee:	2101      	movs	r1, #1
 80035f0:	5499      	strb	r1, [r3, r2]
                dw_printf("Switching from TWR_RESP to TWR_INIT\n\r");
 80035f2:	485c      	ldr	r0, [pc, #368]	; (8003764 <main+0x2a8>)
 80035f4:	f7fe fc4a 	bl	8001e8c <dw_printf>
 80035f8:	e054      	b.n	80036a4 <main+0x1e8>
                app.pConfig->twr_role = TWR_RESP;
 80035fa:	3262      	adds	r2, #98	; 0x62
 80035fc:	2100      	movs	r1, #0
 80035fe:	5499      	strb	r1, [r3, r2]
                dw_printf("Switching from TWR_INIT to TWR_RESP\n\r");
 8003600:	4859      	ldr	r0, [pc, #356]	; (8003768 <main+0x2ac>)
 8003602:	f7fe fc43 	bl	8001e8c <dw_printf>
                dwt_setrxaftertxdelay(POLL_TX_TO_RESP_RX_DLY_UUS);
 8003606:	208c      	movs	r0, #140	; 0x8c
 8003608:	f7fd ffc2 	bl	8001590 <dwt_setrxaftertxdelay>
                dwt_setrxtimeout(65000 ); // RESP_RX_TIMEOUT_UUS
 800360c:	4851      	ldr	r0, [pc, #324]	; (8003754 <main+0x298>)
 800360e:	f7fe f93f 	bl	8001890 <dwt_setrxtimeout>
 8003612:	e047      	b.n	80036a4 <main+0x1e8>
            process_uartmsg();
 8003614:	f7ff f9c2 	bl	800299c <process_uartmsg>
            LEDS_OFF(LED_BLUE_MASK);
 8003618:	2002      	movs	r0, #2
 800361a:	f7fe fce7 	bl	8001fec <LEDS_OFF>
 800361e:	e045      	b.n	80036ac <main+0x1f0>
            LEDS_ON(LED_RED_MASK);
 8003620:	2008      	movs	r0, #8
 8003622:	f7fe fcf9 	bl	8002018 <LEDS_ON>
            tx_poll_msg[ALL_MSG_SN_IDX] = frame_seq_nb;
 8003626:	4d51      	ldr	r5, [pc, #324]	; (800376c <main+0x2b0>)
 8003628:	4c51      	ldr	r4, [pc, #324]	; (8003770 <main+0x2b4>)
 800362a:	7823      	ldrb	r3, [r4, #0]
 800362c:	70ab      	strb	r3, [r5, #2]
            dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_TXFRS);
 800362e:	2280      	movs	r2, #128	; 0x80
 8003630:	2100      	movs	r1, #0
 8003632:	200f      	movs	r0, #15
 8003634:	f7fd fd4b 	bl	80010ce <dwt_write32bitoffsetreg>
            dwt_writetxdata(sizeof(tx_poll_msg), tx_poll_msg, 0); // Zero offset in TX buffer.
 8003638:	2200      	movs	r2, #0
 800363a:	0029      	movs	r1, r5
 800363c:	200c      	movs	r0, #12
 800363e:	f7fd fc44 	bl	8000eca <dwt_writetxdata>
            dwt_writetxfctrl(sizeof(tx_poll_msg), 0, 1); // Zero offset in TX buffer, ranging.
 8003642:	2201      	movs	r2, #1
 8003644:	2100      	movs	r1, #0
 8003646:	200c      	movs	r0, #12
 8003648:	f7fd fd54 	bl	80010f4 <dwt_writetxfctrl>
            dwt_starttx(DWT_START_TX_IMMEDIATE | DWT_RESPONSE_EXPECTED);
 800364c:	2002      	movs	r0, #2
 800364e:	f7fe f881 	bl	8001754 <dwt_starttx>
            frame_seq_nb++;
 8003652:	7823      	ldrb	r3, [r4, #0]
 8003654:	3301      	adds	r3, #1
 8003656:	7023      	strb	r3, [r4, #0]
 8003658:	e034      	b.n	80036c4 <main+0x208>
                            dwt_readrxdata(rx_buffer, frame_len, 0);
 800365a:	b2a1      	uxth	r1, r4
 800365c:	4844      	ldr	r0, [pc, #272]	; (8003770 <main+0x2b4>)
 800365e:	2200      	movs	r2, #0
 8003660:	3004      	adds	r0, #4
 8003662:	f7fd fc63 	bl	8000f2c <dwt_readrxdata>
 8003666:	e047      	b.n	80036f8 <main+0x23c>
                    calc_tof_from_rcved_resp( rx_buffer , frame_len );
 8003668:	b2e1      	uxtb	r1, r4
 800366a:	4841      	ldr	r0, [pc, #260]	; (8003770 <main+0x2b4>)
 800366c:	3004      	adds	r0, #4
 800366e:	f7ff fdd1 	bl	8003214 <calc_tof_from_rcved_resp>
 8003672:	e009      	b.n	8003688 <main+0x1cc>
            dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR);
 8003674:	4a3f      	ldr	r2, [pc, #252]	; (8003774 <main+0x2b8>)
 8003676:	2100      	movs	r1, #0
 8003678:	200f      	movs	r0, #15
 800367a:	f7fd fd28 	bl	80010ce <dwt_write32bitoffsetreg>
            dw_printf("Clearing error / timeout events. Resetting.. \n\r");
 800367e:	483e      	ldr	r0, [pc, #248]	; (8003778 <main+0x2bc>)
 8003680:	f7fe fc04 	bl	8001e8c <dw_printf>
            dwt_rxreset();
 8003684:	f7fe f934 	bl	80018f0 <dwt_rxreset>
        LEDS_OFF(LED_RED_MASK|LED_GREEN_MASK|LED_BLUE_MASK);
 8003688:	200b      	movs	r0, #11
 800368a:	f7fe fcaf 	bl	8001fec <LEDS_OFF>
        if( app.pConfig->twr_role == TWR_INIT )
 800368e:	4b2d      	ldr	r3, [pc, #180]	; (8003744 <main+0x288>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	2263      	movs	r2, #99	; 0x63
 8003694:	5c9a      	ldrb	r2, [r3, r2]
 8003696:	2a01      	cmp	r2, #1
 8003698:	d03f      	beq.n	800371a <main+0x25e>
        if( b_user_button )
 800369a:	4a34      	ldr	r2, [pc, #208]	; (800376c <main+0x2b0>)
 800369c:	2334      	movs	r3, #52	; 0x34
 800369e:	5cd3      	ldrb	r3, [r2, r3]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d197      	bne.n	80035d4 <main+0x118>
        if( deca_uart_rx_data_ready() )
 80036a4:	f7fe fb9e 	bl	8001de4 <deca_uart_rx_data_ready>
 80036a8:	2800      	cmp	r0, #0
 80036aa:	d1b3      	bne.n	8003614 <main+0x158>
        if( app.pConfig->twr_role == TWR_INIT )
 80036ac:	4b25      	ldr	r3, [pc, #148]	; (8003744 <main+0x288>)
 80036ae:	681a      	ldr	r2, [r3, #0]
 80036b0:	2363      	movs	r3, #99	; 0x63
 80036b2:	5cd3      	ldrb	r3, [r2, r3]
 80036b4:	2b01      	cmp	r3, #1
 80036b6:	d0b3      	beq.n	8003620 <main+0x164>
            LEDS_ON(LED_GREEN_MASK);
 80036b8:	2001      	movs	r0, #1
 80036ba:	f7fe fcad 	bl	8002018 <LEDS_ON>
            dwt_rxenable(DWT_START_RX_IMMEDIATE);
 80036be:	2000      	movs	r0, #0
 80036c0:	f7fe f8b6 	bl	8001830 <dwt_rxenable>
        while (!((status_reg = dwt_read32bitreg(SYS_STATUS_ID)) & (SYS_STATUS_RXFCG | SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR)))
 80036c4:	2100      	movs	r1, #0
 80036c6:	200f      	movs	r0, #15
 80036c8:	f7fd fc60 	bl	8000f8c <dwt_read32bitoffsetreg>
 80036cc:	4b2b      	ldr	r3, [pc, #172]	; (800377c <main+0x2c0>)
 80036ce:	4218      	tst	r0, r3
 80036d0:	d0f8      	beq.n	80036c4 <main+0x208>
        if (status_reg & SYS_STATUS_RXFCG)
 80036d2:	0443      	lsls	r3, r0, #17
 80036d4:	d5ce      	bpl.n	8003674 <main+0x1b8>
            dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_RXFCG);
 80036d6:	2280      	movs	r2, #128	; 0x80
 80036d8:	01d2      	lsls	r2, r2, #7
 80036da:	2100      	movs	r1, #0
 80036dc:	200f      	movs	r0, #15
 80036de:	f7fd fcf6 	bl	80010ce <dwt_write32bitoffsetreg>
            dw_printf("A frame has been received. \n\r");
 80036e2:	4827      	ldr	r0, [pc, #156]	; (8003780 <main+0x2c4>)
 80036e4:	f7fe fbd2 	bl	8001e8c <dw_printf>
            frame_len = dwt_read32bitreg(RX_FINFO_ID) & RX_FINFO_RXFLEN_MASK;
 80036e8:	2100      	movs	r1, #0
 80036ea:	2010      	movs	r0, #16
 80036ec:	f7fd fc4e 	bl	8000f8c <dwt_read32bitoffsetreg>
 80036f0:	247f      	movs	r4, #127	; 0x7f
 80036f2:	4004      	ands	r4, r0
            if (frame_len <= RX_BUF_LEN)
 80036f4:	2c40      	cmp	r4, #64	; 0x40
 80036f6:	d9b0      	bls.n	800365a <main+0x19e>
                                                    seq_number = rx_buffer[ALL_MSG_SN_IDX];
 80036f8:	4b1d      	ldr	r3, [pc, #116]	; (8003770 <main+0x2b4>)
 80036fa:	799a      	ldrb	r2, [r3, #6]
 80036fc:	705a      	strb	r2, [r3, #1]
            rx_buffer[ALL_MSG_SN_IDX] = 0;
 80036fe:	2200      	movs	r2, #0
 8003700:	719a      	strb	r2, [r3, #6]
            if( app.pConfig->twr_role == TWR_INIT )
 8003702:	4b10      	ldr	r3, [pc, #64]	; (8003744 <main+0x288>)
 8003704:	681a      	ldr	r2, [r3, #0]
 8003706:	2363      	movs	r3, #99	; 0x63
 8003708:	5cd3      	ldrb	r3, [r2, r3]
 800370a:	2b01      	cmp	r3, #1
 800370c:	d0ac      	beq.n	8003668 <main+0x1ac>
                    resp_to_poll( rx_buffer , frame_len );
 800370e:	b2e1      	uxtb	r1, r4
 8003710:	4817      	ldr	r0, [pc, #92]	; (8003770 <main+0x2b4>)
 8003712:	3004      	adds	r0, #4
 8003714:	f7ff fd02 	bl	800311c <resp_to_poll>
 8003718:	e7b6      	b.n	8003688 <main+0x1cc>
            deca_sleep(app.pConfig->blink.interval_in_ms); // RNG_DELAY_MS);
 800371a:	7b18      	ldrb	r0, [r3, #12]
 800371c:	7b5a      	ldrb	r2, [r3, #13]
 800371e:	0212      	lsls	r2, r2, #8
 8003720:	4302      	orrs	r2, r0
 8003722:	7b98      	ldrb	r0, [r3, #14]
 8003724:	0400      	lsls	r0, r0, #16
 8003726:	4302      	orrs	r2, r0
 8003728:	7bd8      	ldrb	r0, [r3, #15]
 800372a:	0600      	lsls	r0, r0, #24
 800372c:	4310      	orrs	r0, r2
 800372e:	f7fe faad 	bl	8001c8c <deca_sleep>
 8003732:	e7b2      	b.n	800369a <main+0x1de>
 8003734:	40015800 	.word	0x40015800
 8003738:	40021000 	.word	0x40021000
 800373c:	e000e010 	.word	0xe000e010
 8003740:	ffff7fff 	.word	0xffff7fff
 8003744:	200005b8 	.word	0x200005b8
 8003748:	0800502c 	.word	0x0800502c
 800374c:	080050ac 	.word	0x080050ac
 8003750:	00004034 	.word	0x00004034
 8003754:	0000fde8 	.word	0x0000fde8
 8003758:	08005558 	.word	0x08005558
 800375c:	08005548 	.word	0x08005548
 8003760:	08005564 	.word	0x08005564
 8003764:	080055a4 	.word	0x080055a4
 8003768:	0800557c 	.word	0x0800557c
 800376c:	20000004 	.word	0x20000004
 8003770:	20000568 	.word	0x20000568
 8003774:	24279000 	.word	0x24279000
 8003778:	080055ec 	.word	0x080055ec
 800377c:	2427d000 	.word	0x2427d000
 8003780:	080055cc 	.word	0x080055cc

08003784 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003784:	4770      	bx	lr

08003786 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003786:	e7fe      	b.n	8003786 <HardFault_Handler>

08003788 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003788:	4770      	bx	lr

0800378a <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800378a:	4770      	bx	lr

0800378c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800378c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

    IncSysTick();
 800378e:	f7fe fbc3 	bl	8001f18 <IncSysTick>
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003792:	bd10      	pop	{r4, pc}

08003794 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8003794:	b510      	push	{r4, lr}
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 8003796:	4b05      	ldr	r3, [pc, #20]	; (80037ac <EXTI0_1_IRQHandler+0x18>)
 8003798:	695b      	ldr	r3, [r3, #20]
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_0) != RESET)
 800379a:	07db      	lsls	r3, r3, #31
 800379c:	d400      	bmi.n	80037a0 <EXTI0_1_IRQHandler+0xc>
    /* USER CODE END LL_EXTI_LINE_0 */
  }
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 800379e:	bd10      	pop	{r4, pc}
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR, ExtiLine);
 80037a0:	4b02      	ldr	r3, [pc, #8]	; (80037ac <EXTI0_1_IRQHandler+0x18>)
 80037a2:	2201      	movs	r2, #1
 80037a4:	615a      	str	r2, [r3, #20]
    GPIO_EXTI0_Callback();
 80037a6:	f7fe fc59 	bl	800205c <GPIO_EXTI0_Callback>
}
 80037aa:	e7f8      	b.n	800379e <EXTI0_1_IRQHandler+0xa>
 80037ac:	40010400 	.word	0x40010400

080037b0 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 80037b0:	b510      	push	{r4, lr}
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 80037b2:	4b0a      	ldr	r3, [pc, #40]	; (80037dc <EXTI2_3_IRQHandler+0x2c>)
 80037b4:	695b      	ldr	r3, [r3, #20]
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_2) != RESET)
 80037b6:	075b      	lsls	r3, r3, #29
 80037b8:	d404      	bmi.n	80037c4 <EXTI2_3_IRQHandler+0x14>
 80037ba:	4b08      	ldr	r3, [pc, #32]	; (80037dc <EXTI2_3_IRQHandler+0x2c>)
 80037bc:	695b      	ldr	r3, [r3, #20]
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_2);
    /* USER CODE BEGIN LL_EXTI_LINE_2 */
    GPIO_EXTI3_Callback();
    /* USER CODE END LL_EXTI_LINE_2 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_3) != RESET)
 80037be:	071b      	lsls	r3, r3, #28
 80037c0:	d406      	bmi.n	80037d0 <EXTI2_3_IRQHandler+0x20>
    /* USER CODE END LL_EXTI_LINE_3 */
  }
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 80037c2:	bd10      	pop	{r4, pc}
  WRITE_REG(EXTI->PR, ExtiLine);
 80037c4:	4b05      	ldr	r3, [pc, #20]	; (80037dc <EXTI2_3_IRQHandler+0x2c>)
 80037c6:	2204      	movs	r2, #4
 80037c8:	615a      	str	r2, [r3, #20]
    GPIO_EXTI3_Callback();
 80037ca:	f7fe fc41 	bl	8002050 <GPIO_EXTI3_Callback>
 80037ce:	e7f4      	b.n	80037ba <EXTI2_3_IRQHandler+0xa>
 80037d0:	4b02      	ldr	r3, [pc, #8]	; (80037dc <EXTI2_3_IRQHandler+0x2c>)
 80037d2:	2208      	movs	r2, #8
 80037d4:	615a      	str	r2, [r3, #20]
    dwt_isr();
 80037d6:	f7fe f897 	bl	8001908 <dwt_isr>
}
 80037da:	e7f2      	b.n	80037c2 <EXTI2_3_IRQHandler+0x12>
 80037dc:	40010400 	.word	0x40010400

080037e0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80037e0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */
    // here we should put the actual handler for receive

    UART2_IRQHandler();
 80037e2:	f7fe fc4f 	bl	8002084 <UART2_IRQHandler>

  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80037e6:	bd10      	pop	{r4, pc}

080037e8 <SystemInit>:
  * @retval None
  */
void SystemInit (void)
{
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 80037e8:	4b10      	ldr	r3, [pc, #64]	; (800382c <SystemInit+0x44>)
 80037ea:	6819      	ldr	r1, [r3, #0]
 80037ec:	2280      	movs	r2, #128	; 0x80
 80037ee:	0052      	lsls	r2, r2, #1
 80037f0:	430a      	orrs	r2, r1
 80037f2:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 80037f4:	68da      	ldr	r2, [r3, #12]
 80037f6:	490e      	ldr	r1, [pc, #56]	; (8003830 <SystemInit+0x48>)
 80037f8:	400a      	ands	r2, r1
 80037fa:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 80037fc:	681a      	ldr	r2, [r3, #0]
 80037fe:	490d      	ldr	r1, [pc, #52]	; (8003834 <SystemInit+0x4c>)
 8003800:	400a      	ands	r2, r1
 8003802:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8003804:	689a      	ldr	r2, [r3, #8]
 8003806:	2101      	movs	r1, #1
 8003808:	438a      	bics	r2, r1
 800380a:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 800380c:	681a      	ldr	r2, [r3, #0]
 800380e:	490a      	ldr	r1, [pc, #40]	; (8003838 <SystemInit+0x50>)
 8003810:	400a      	ands	r2, r1
 8003812:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 8003814:	68da      	ldr	r2, [r3, #12]
 8003816:	4909      	ldr	r1, [pc, #36]	; (800383c <SystemInit+0x54>)
 8003818:	400a      	ands	r2, r1
 800381a:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800381c:	2200      	movs	r2, #0
 800381e:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003820:	4b07      	ldr	r3, [pc, #28]	; (8003840 <SystemInit+0x58>)
 8003822:	2280      	movs	r2, #128	; 0x80
 8003824:	0512      	lsls	r2, r2, #20
 8003826:	609a      	str	r2, [r3, #8]
#endif
}
 8003828:	4770      	bx	lr
 800382a:	46c0      	nop			; (mov r8, r8)
 800382c:	40021000 	.word	0x40021000
 8003830:	88ff400c 	.word	0x88ff400c
 8003834:	fef6fff6 	.word	0xfef6fff6
 8003838:	fffbffff 	.word	0xfffbffff
 800383c:	ff02ffff 	.word	0xff02ffff
 8003840:	e000ed00 	.word	0xe000ed00

08003844 <chan_to_deca>:


/* Channel */
int chan_to_deca(int i)
{
    switch (i)
 8003844:	2807      	cmp	r0, #7
 8003846:	d803      	bhi.n	8003850 <chan_to_deca+0xc>
 8003848:	0083      	lsls	r3, r0, #2
 800384a:	4a03      	ldr	r2, [pc, #12]	; (8003858 <chan_to_deca+0x14>)
 800384c:	58d3      	ldr	r3, [r2, r3]
 800384e:	469f      	mov	pc, r3
    case 5 :
        return 5;
    case 7 :
        return 7;
    default :
        return -1;
 8003850:	2001      	movs	r0, #1
 8003852:	4240      	negs	r0, r0
    }
}
 8003854:	4770      	bx	lr
 8003856:	46c0      	nop			; (mov r8, r8)
 8003858:	080050d8 	.word	0x080050d8

0800385c <deca_to_chan>:

int deca_to_chan(int i)
{
 800385c:	b510      	push	{r4, lr}
    return(chan_to_deca(i));
 800385e:	f7ff fff1 	bl	8003844 <chan_to_deca>
}
 8003862:	bd10      	pop	{r4, pc}

08003864 <bitrate_to_deca>:


/* Bitrate */
int bitrate_to_deca(int i)
{
    switch (i)
 8003864:	4b08      	ldr	r3, [pc, #32]	; (8003888 <bitrate_to_deca+0x24>)
 8003866:	4298      	cmp	r0, r3
 8003868:	d009      	beq.n	800387e <bitrate_to_deca+0x1a>
 800386a:	4b08      	ldr	r3, [pc, #32]	; (800388c <bitrate_to_deca+0x28>)
 800386c:	4298      	cmp	r0, r3
 800386e:	d008      	beq.n	8003882 <bitrate_to_deca+0x1e>
 8003870:	286e      	cmp	r0, #110	; 0x6e
 8003872:	d002      	beq.n	800387a <bitrate_to_deca+0x16>
    case 850 :
        return DWT_BR_850K;
    case 6810 :
        return DWT_BR_6M8;
    default :
        return -1;
 8003874:	2001      	movs	r0, #1
 8003876:	4240      	negs	r0, r0
    }
}
 8003878:	4770      	bx	lr
    switch (i)
 800387a:	2000      	movs	r0, #0
 800387c:	e7fc      	b.n	8003878 <bitrate_to_deca+0x14>
        return DWT_BR_850K;
 800387e:	2001      	movs	r0, #1
 8003880:	e7fa      	b.n	8003878 <bitrate_to_deca+0x14>
        return DWT_BR_6M8;
 8003882:	2002      	movs	r0, #2
 8003884:	e7f8      	b.n	8003878 <bitrate_to_deca+0x14>
 8003886:	46c0      	nop			; (mov r8, r8)
 8003888:	00000352 	.word	0x00000352
 800388c:	00001a9a 	.word	0x00001a9a

08003890 <deca_to_bitrate>:

int deca_to_bitrate(int i)
{
    switch (i)
 8003890:	2801      	cmp	r0, #1
 8003892:	d008      	beq.n	80038a6 <deca_to_bitrate+0x16>
 8003894:	2802      	cmp	r0, #2
 8003896:	d008      	beq.n	80038aa <deca_to_bitrate+0x1a>
 8003898:	2800      	cmp	r0, #0
 800389a:	d002      	beq.n	80038a2 <deca_to_bitrate+0x12>
    case DWT_BR_850K :
        return 850;
    case DWT_BR_6M8 :
        return 6810;
    default :
        return -1;
 800389c:	2001      	movs	r0, #1
 800389e:	4240      	negs	r0, r0
    }
}
 80038a0:	4770      	bx	lr
    switch (i)
 80038a2:	306e      	adds	r0, #110	; 0x6e
 80038a4:	e7fc      	b.n	80038a0 <deca_to_bitrate+0x10>
        return 850;
 80038a6:	4802      	ldr	r0, [pc, #8]	; (80038b0 <deca_to_bitrate+0x20>)
 80038a8:	e7fa      	b.n	80038a0 <deca_to_bitrate+0x10>
        return 6810;
 80038aa:	4802      	ldr	r0, [pc, #8]	; (80038b4 <deca_to_bitrate+0x24>)
 80038ac:	e7f8      	b.n	80038a0 <deca_to_bitrate+0x10>
 80038ae:	46c0      	nop			; (mov r8, r8)
 80038b0:	00000352 	.word	0x00000352
 80038b4:	00001a9a 	.word	0x00001a9a

080038b8 <prf_to_deca>:


/* PRF */
int prf_to_deca(int i)
{
    switch (i)
 80038b8:	2810      	cmp	r0, #16
 80038ba:	d003      	beq.n	80038c4 <prf_to_deca+0xc>
 80038bc:	2840      	cmp	r0, #64	; 0x40
 80038be:	d103      	bne.n	80038c8 <prf_to_deca+0x10>
    {
    case 16 :
        return DWT_PRF_16M;
    case 64 :
        return DWT_PRF_64M;
 80038c0:	383e      	subs	r0, #62	; 0x3e
    default :
        return -1;
    }
}
 80038c2:	4770      	bx	lr
    switch (i)
 80038c4:	2001      	movs	r0, #1
 80038c6:	e7fc      	b.n	80038c2 <prf_to_deca+0xa>
        return -1;
 80038c8:	2001      	movs	r0, #1
 80038ca:	4240      	negs	r0, r0
 80038cc:	e7f9      	b.n	80038c2 <prf_to_deca+0xa>

080038ce <deca_to_prf>:


int deca_to_prf(int i)
{
    switch (i)
 80038ce:	2801      	cmp	r0, #1
 80038d0:	d003      	beq.n	80038da <deca_to_prf+0xc>
 80038d2:	2802      	cmp	r0, #2
 80038d4:	d103      	bne.n	80038de <deca_to_prf+0x10>
    {
    case  DWT_PRF_16M:
        return 16;
    case  DWT_PRF_64M:
        return 64;
 80038d6:	303e      	adds	r0, #62	; 0x3e
    default :
        return -1;
    }
}
 80038d8:	4770      	bx	lr
    switch (i)
 80038da:	2010      	movs	r0, #16
 80038dc:	e7fc      	b.n	80038d8 <deca_to_prf+0xa>
        return -1;
 80038de:	2001      	movs	r0, #1
 80038e0:	4240      	negs	r0, r0
 80038e2:	e7f9      	b.n	80038d8 <deca_to_prf+0xa>

080038e4 <pac_to_deca>:


/* PAC */
int pac_to_deca(int i)
{
    switch (i)
 80038e4:	2820      	cmp	r0, #32
 80038e6:	d00a      	beq.n	80038fe <pac_to_deca+0x1a>
 80038e8:	dc05      	bgt.n	80038f6 <pac_to_deca+0x12>
 80038ea:	2808      	cmp	r0, #8
 80038ec:	d009      	beq.n	8003902 <pac_to_deca+0x1e>
 80038ee:	2810      	cmp	r0, #16
 80038f0:	d109      	bne.n	8003906 <pac_to_deca+0x22>
    {
    case 8 :
        return DWT_PAC8;
    case 16 :
        return DWT_PAC16;
 80038f2:	380f      	subs	r0, #15
    case 64 :
        return DWT_PAC64;
    default :
        return -1;
    }
}
 80038f4:	4770      	bx	lr
    switch (i)
 80038f6:	2840      	cmp	r0, #64	; 0x40
 80038f8:	d108      	bne.n	800390c <pac_to_deca+0x28>
        return DWT_PAC64;
 80038fa:	383d      	subs	r0, #61	; 0x3d
 80038fc:	e7fa      	b.n	80038f4 <pac_to_deca+0x10>
        return DWT_PAC32;
 80038fe:	2002      	movs	r0, #2
 8003900:	e7f8      	b.n	80038f4 <pac_to_deca+0x10>
    switch (i)
 8003902:	2000      	movs	r0, #0
 8003904:	e7f6      	b.n	80038f4 <pac_to_deca+0x10>
        return -1;
 8003906:	2001      	movs	r0, #1
 8003908:	4240      	negs	r0, r0
 800390a:	e7f3      	b.n	80038f4 <pac_to_deca+0x10>
 800390c:	2001      	movs	r0, #1
 800390e:	4240      	negs	r0, r0
 8003910:	e7f0      	b.n	80038f4 <pac_to_deca+0x10>

08003912 <deca_to_pac>:

int deca_to_pac(int i)
{
    switch (i)
 8003912:	2802      	cmp	r0, #2
 8003914:	d00a      	beq.n	800392c <deca_to_pac+0x1a>
 8003916:	dc05      	bgt.n	8003924 <deca_to_pac+0x12>
 8003918:	2800      	cmp	r0, #0
 800391a:	d009      	beq.n	8003930 <deca_to_pac+0x1e>
 800391c:	2801      	cmp	r0, #1
 800391e:	d109      	bne.n	8003934 <deca_to_pac+0x22>
    {
    case DWT_PAC8 :
        return 8;
    case DWT_PAC16 :
        return 16;
 8003920:	300f      	adds	r0, #15
    case DWT_PAC64 :
        return 64;
    default :
        return -1;
    }
}
 8003922:	4770      	bx	lr
    switch (i)
 8003924:	2803      	cmp	r0, #3
 8003926:	d108      	bne.n	800393a <deca_to_pac+0x28>
        return 64;
 8003928:	303d      	adds	r0, #61	; 0x3d
 800392a:	e7fa      	b.n	8003922 <deca_to_pac+0x10>
        return 32;
 800392c:	2020      	movs	r0, #32
 800392e:	e7f8      	b.n	8003922 <deca_to_pac+0x10>
    switch (i)
 8003930:	2008      	movs	r0, #8
 8003932:	e7f6      	b.n	8003922 <deca_to_pac+0x10>
        return -1;
 8003934:	2001      	movs	r0, #1
 8003936:	4240      	negs	r0, r0
 8003938:	e7f3      	b.n	8003922 <deca_to_pac+0x10>
 800393a:	2001      	movs	r0, #1
 800393c:	4240      	negs	r0, r0
 800393e:	e7f0      	b.n	8003922 <deca_to_pac+0x10>

08003940 <plen_to_deca>:


/* PLEN */
int plen_to_deca(int i)
{
    switch (i)
 8003940:	2380      	movs	r3, #128	; 0x80
 8003942:	00db      	lsls	r3, r3, #3
 8003944:	4298      	cmp	r0, r3
 8003946:	d021      	beq.n	800398c <plen_to_deca+0x4c>
 8003948:	dc10      	bgt.n	800396c <plen_to_deca+0x2c>
 800394a:	2380      	movs	r3, #128	; 0x80
 800394c:	005b      	lsls	r3, r3, #1
 800394e:	4298      	cmp	r0, r3
 8003950:	d01e      	beq.n	8003990 <plen_to_deca+0x50>
 8003952:	dd05      	ble.n	8003960 <plen_to_deca+0x20>
 8003954:	2380      	movs	r3, #128	; 0x80
 8003956:	009b      	lsls	r3, r3, #2
 8003958:	4298      	cmp	r0, r3
 800395a:	d120      	bne.n	800399e <plen_to_deca+0x5e>
    case 1536 :
        return DWT_PLEN_1536;
    case 1024 :
        return DWT_PLEN_1024;
    case 512 :
        return DWT_PLEN_512;
 800395c:	2034      	movs	r0, #52	; 0x34
 800395e:	e004      	b.n	800396a <plen_to_deca+0x2a>
    switch (i)
 8003960:	2840      	cmp	r0, #64	; 0x40
 8003962:	d017      	beq.n	8003994 <plen_to_deca+0x54>
 8003964:	2880      	cmp	r0, #128	; 0x80
 8003966:	d117      	bne.n	8003998 <plen_to_deca+0x58>
    case 256 :
        return DWT_PLEN_256;
    case 128 :
        return DWT_PLEN_128;
 8003968:	386c      	subs	r0, #108	; 0x6c
    case 64 :
        return DWT_PLEN_64;
    default :
        return -1;
    }
}
 800396a:	4770      	bx	lr
    switch (i)
 800396c:	2380      	movs	r3, #128	; 0x80
 800396e:	011b      	lsls	r3, r3, #4
 8003970:	4298      	cmp	r0, r3
 8003972:	d017      	beq.n	80039a4 <plen_to_deca+0x64>
 8003974:	2380      	movs	r3, #128	; 0x80
 8003976:	015b      	lsls	r3, r3, #5
 8003978:	4298      	cmp	r0, r3
 800397a:	d101      	bne.n	8003980 <plen_to_deca+0x40>
 800397c:	200c      	movs	r0, #12
 800397e:	e7f4      	b.n	800396a <plen_to_deca+0x2a>
 8003980:	23c0      	movs	r3, #192	; 0xc0
 8003982:	00db      	lsls	r3, r3, #3
 8003984:	4298      	cmp	r0, r3
 8003986:	d10f      	bne.n	80039a8 <plen_to_deca+0x68>
        return DWT_PLEN_1536;
 8003988:	2018      	movs	r0, #24
 800398a:	e7ee      	b.n	800396a <plen_to_deca+0x2a>
        return DWT_PLEN_1024;
 800398c:	2008      	movs	r0, #8
 800398e:	e7ec      	b.n	800396a <plen_to_deca+0x2a>
        return DWT_PLEN_256;
 8003990:	2024      	movs	r0, #36	; 0x24
 8003992:	e7ea      	b.n	800396a <plen_to_deca+0x2a>
        return DWT_PLEN_64;
 8003994:	2004      	movs	r0, #4
 8003996:	e7e8      	b.n	800396a <plen_to_deca+0x2a>
        return -1;
 8003998:	2001      	movs	r0, #1
 800399a:	4240      	negs	r0, r0
 800399c:	e7e5      	b.n	800396a <plen_to_deca+0x2a>
 800399e:	2001      	movs	r0, #1
 80039a0:	4240      	negs	r0, r0
 80039a2:	e7e2      	b.n	800396a <plen_to_deca+0x2a>
        return DWT_PLEN_2048;
 80039a4:	2028      	movs	r0, #40	; 0x28
 80039a6:	e7e0      	b.n	800396a <plen_to_deca+0x2a>
        return -1;
 80039a8:	2001      	movs	r0, #1
 80039aa:	4240      	negs	r0, r0
 80039ac:	e7dd      	b.n	800396a <plen_to_deca+0x2a>
	...

080039b0 <deca_to_plen>:

int deca_to_plen(int i)
{
    switch (i)
 80039b0:	3804      	subs	r0, #4
 80039b2:	2830      	cmp	r0, #48	; 0x30
 80039b4:	d816      	bhi.n	80039e4 <deca_to_plen+0x34>
 80039b6:	0080      	lsls	r0, r0, #2
 80039b8:	4b0d      	ldr	r3, [pc, #52]	; (80039f0 <deca_to_plen+0x40>)
 80039ba:	581b      	ldr	r3, [r3, r0]
 80039bc:	469f      	mov	pc, r3
    case DWT_PLEN_256 :
        return 256;
    case DWT_PLEN_128 :
        return 128;
    case DWT_PLEN_64 :
        return 64;
 80039be:	2080      	movs	r0, #128	; 0x80
 80039c0:	0140      	lsls	r0, r0, #5
 80039c2:	e001      	b.n	80039c8 <deca_to_plen+0x18>
        return 1536;
 80039c4:	20c0      	movs	r0, #192	; 0xc0
 80039c6:	00c0      	lsls	r0, r0, #3
    default :
        return -1;
    }
}
 80039c8:	4770      	bx	lr
        return 1024;
 80039ca:	2080      	movs	r0, #128	; 0x80
 80039cc:	00c0      	lsls	r0, r0, #3
 80039ce:	e7fb      	b.n	80039c8 <deca_to_plen+0x18>
        return 512;
 80039d0:	2080      	movs	r0, #128	; 0x80
 80039d2:	0080      	lsls	r0, r0, #2
 80039d4:	e7f8      	b.n	80039c8 <deca_to_plen+0x18>
        return 256;
 80039d6:	2080      	movs	r0, #128	; 0x80
 80039d8:	0040      	lsls	r0, r0, #1
 80039da:	e7f5      	b.n	80039c8 <deca_to_plen+0x18>
        return 128;
 80039dc:	2080      	movs	r0, #128	; 0x80
 80039de:	e7f3      	b.n	80039c8 <deca_to_plen+0x18>
        return 64;
 80039e0:	2040      	movs	r0, #64	; 0x40
 80039e2:	e7f1      	b.n	80039c8 <deca_to_plen+0x18>
        return -1;
 80039e4:	2001      	movs	r0, #1
 80039e6:	4240      	negs	r0, r0
 80039e8:	e7ee      	b.n	80039c8 <deca_to_plen+0x18>
        return 2048;
 80039ea:	2080      	movs	r0, #128	; 0x80
 80039ec:	0100      	lsls	r0, r0, #4
 80039ee:	e7eb      	b.n	80039c8 <deca_to_plen+0x18>
 80039f0:	080050f8 	.word	0x080050f8

080039f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80039f4:	480d      	ldr	r0, [pc, #52]	; (8003a2c <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80039f6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 80039f8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80039fa:	e003      	b.n	8003a04 <LoopCopyDataInit>

080039fc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80039fc:	4b0c      	ldr	r3, [pc, #48]	; (8003a30 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 80039fe:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003a00:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003a02:	3104      	adds	r1, #4

08003a04 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8003a04:	480b      	ldr	r0, [pc, #44]	; (8003a34 <LoopForever+0xa>)
  ldr  r3, =_edata
 8003a06:	4b0c      	ldr	r3, [pc, #48]	; (8003a38 <LoopForever+0xe>)
  adds  r2, r0, r1
 8003a08:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003a0a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003a0c:	d3f6      	bcc.n	80039fc <CopyDataInit>
  ldr  r2, =_sbss
 8003a0e:	4a0b      	ldr	r2, [pc, #44]	; (8003a3c <LoopForever+0x12>)
  b  LoopFillZerobss
 8003a10:	e002      	b.n	8003a18 <LoopFillZerobss>

08003a12 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8003a12:	2300      	movs	r3, #0
  str  r3, [r2]
 8003a14:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003a16:	3204      	adds	r2, #4

08003a18 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 8003a18:	4b09      	ldr	r3, [pc, #36]	; (8003a40 <LoopForever+0x16>)
  cmp  r2, r3
 8003a1a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003a1c:	d3f9      	bcc.n	8003a12 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8003a1e:	f7ff fee3 	bl	80037e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003a22:	f000 f811 	bl	8003a48 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003a26:	f7ff fd49 	bl	80034bc <main>

08003a2a <LoopForever>:

LoopForever:
    b LoopForever
 8003a2a:	e7fe      	b.n	8003a2a <LoopForever>
   ldr   r0, =_estack
 8003a2c:	20002000 	.word	0x20002000
  ldr  r3, =_sidata
 8003a30:	08005878 	.word	0x08005878
  ldr  r0, =_sdata
 8003a34:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003a38:	200000a4 	.word	0x200000a4
  ldr  r2, =_sbss
 8003a3c:	20000200 	.word	0x20000200
  ldr  r3, = _ebss
 8003a40:	200005d8 	.word	0x200005d8

08003a44 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003a44:	e7fe      	b.n	8003a44 <ADC1_COMP_IRQHandler>
	...

08003a48 <__libc_init_array>:
 8003a48:	b570      	push	{r4, r5, r6, lr}
 8003a4a:	2600      	movs	r6, #0
 8003a4c:	4d0c      	ldr	r5, [pc, #48]	; (8003a80 <__libc_init_array+0x38>)
 8003a4e:	4c0d      	ldr	r4, [pc, #52]	; (8003a84 <__libc_init_array+0x3c>)
 8003a50:	1b64      	subs	r4, r4, r5
 8003a52:	10a4      	asrs	r4, r4, #2
 8003a54:	42a6      	cmp	r6, r4
 8003a56:	d109      	bne.n	8003a6c <__libc_init_array+0x24>
 8003a58:	2600      	movs	r6, #0
 8003a5a:	f001 f9a7 	bl	8004dac <_init>
 8003a5e:	4d0a      	ldr	r5, [pc, #40]	; (8003a88 <__libc_init_array+0x40>)
 8003a60:	4c0a      	ldr	r4, [pc, #40]	; (8003a8c <__libc_init_array+0x44>)
 8003a62:	1b64      	subs	r4, r4, r5
 8003a64:	10a4      	asrs	r4, r4, #2
 8003a66:	42a6      	cmp	r6, r4
 8003a68:	d105      	bne.n	8003a76 <__libc_init_array+0x2e>
 8003a6a:	bd70      	pop	{r4, r5, r6, pc}
 8003a6c:	00b3      	lsls	r3, r6, #2
 8003a6e:	58eb      	ldr	r3, [r5, r3]
 8003a70:	4798      	blx	r3
 8003a72:	3601      	adds	r6, #1
 8003a74:	e7ee      	b.n	8003a54 <__libc_init_array+0xc>
 8003a76:	00b3      	lsls	r3, r6, #2
 8003a78:	58eb      	ldr	r3, [r5, r3]
 8003a7a:	4798      	blx	r3
 8003a7c:	3601      	adds	r6, #1
 8003a7e:	e7f2      	b.n	8003a66 <__libc_init_array+0x1e>
 8003a80:	08005870 	.word	0x08005870
 8003a84:	08005870 	.word	0x08005870
 8003a88:	08005870 	.word	0x08005870
 8003a8c:	08005874 	.word	0x08005874

08003a90 <memcmp>:
 8003a90:	b530      	push	{r4, r5, lr}
 8003a92:	2400      	movs	r4, #0
 8003a94:	3901      	subs	r1, #1
 8003a96:	42a2      	cmp	r2, r4
 8003a98:	d101      	bne.n	8003a9e <memcmp+0xe>
 8003a9a:	2000      	movs	r0, #0
 8003a9c:	e005      	b.n	8003aaa <memcmp+0x1a>
 8003a9e:	5d03      	ldrb	r3, [r0, r4]
 8003aa0:	3401      	adds	r4, #1
 8003aa2:	5d0d      	ldrb	r5, [r1, r4]
 8003aa4:	42ab      	cmp	r3, r5
 8003aa6:	d0f6      	beq.n	8003a96 <memcmp+0x6>
 8003aa8:	1b58      	subs	r0, r3, r5
 8003aaa:	bd30      	pop	{r4, r5, pc}

08003aac <memcpy>:
 8003aac:	2300      	movs	r3, #0
 8003aae:	b510      	push	{r4, lr}
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	d100      	bne.n	8003ab6 <memcpy+0xa>
 8003ab4:	bd10      	pop	{r4, pc}
 8003ab6:	5ccc      	ldrb	r4, [r1, r3]
 8003ab8:	54c4      	strb	r4, [r0, r3]
 8003aba:	3301      	adds	r3, #1
 8003abc:	e7f8      	b.n	8003ab0 <memcpy+0x4>

08003abe <memset>:
 8003abe:	0003      	movs	r3, r0
 8003ac0:	1882      	adds	r2, r0, r2
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d100      	bne.n	8003ac8 <memset+0xa>
 8003ac6:	4770      	bx	lr
 8003ac8:	7019      	strb	r1, [r3, #0]
 8003aca:	3301      	adds	r3, #1
 8003acc:	e7f9      	b.n	8003ac2 <memset+0x4>
	...

08003ad0 <_free_r>:
 8003ad0:	b570      	push	{r4, r5, r6, lr}
 8003ad2:	0005      	movs	r5, r0
 8003ad4:	2900      	cmp	r1, #0
 8003ad6:	d010      	beq.n	8003afa <_free_r+0x2a>
 8003ad8:	1f0c      	subs	r4, r1, #4
 8003ada:	6823      	ldr	r3, [r4, #0]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	da00      	bge.n	8003ae2 <_free_r+0x12>
 8003ae0:	18e4      	adds	r4, r4, r3
 8003ae2:	0028      	movs	r0, r5
 8003ae4:	f000 f938 	bl	8003d58 <__malloc_lock>
 8003ae8:	4a1d      	ldr	r2, [pc, #116]	; (8003b60 <_free_r+0x90>)
 8003aea:	6813      	ldr	r3, [r2, #0]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d105      	bne.n	8003afc <_free_r+0x2c>
 8003af0:	6063      	str	r3, [r4, #4]
 8003af2:	6014      	str	r4, [r2, #0]
 8003af4:	0028      	movs	r0, r5
 8003af6:	f000 f937 	bl	8003d68 <__malloc_unlock>
 8003afa:	bd70      	pop	{r4, r5, r6, pc}
 8003afc:	42a3      	cmp	r3, r4
 8003afe:	d908      	bls.n	8003b12 <_free_r+0x42>
 8003b00:	6821      	ldr	r1, [r4, #0]
 8003b02:	1860      	adds	r0, r4, r1
 8003b04:	4283      	cmp	r3, r0
 8003b06:	d1f3      	bne.n	8003af0 <_free_r+0x20>
 8003b08:	6818      	ldr	r0, [r3, #0]
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	1841      	adds	r1, r0, r1
 8003b0e:	6021      	str	r1, [r4, #0]
 8003b10:	e7ee      	b.n	8003af0 <_free_r+0x20>
 8003b12:	001a      	movs	r2, r3
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d001      	beq.n	8003b1e <_free_r+0x4e>
 8003b1a:	42a3      	cmp	r3, r4
 8003b1c:	d9f9      	bls.n	8003b12 <_free_r+0x42>
 8003b1e:	6811      	ldr	r1, [r2, #0]
 8003b20:	1850      	adds	r0, r2, r1
 8003b22:	42a0      	cmp	r0, r4
 8003b24:	d10b      	bne.n	8003b3e <_free_r+0x6e>
 8003b26:	6820      	ldr	r0, [r4, #0]
 8003b28:	1809      	adds	r1, r1, r0
 8003b2a:	1850      	adds	r0, r2, r1
 8003b2c:	6011      	str	r1, [r2, #0]
 8003b2e:	4283      	cmp	r3, r0
 8003b30:	d1e0      	bne.n	8003af4 <_free_r+0x24>
 8003b32:	6818      	ldr	r0, [r3, #0]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	1841      	adds	r1, r0, r1
 8003b38:	6011      	str	r1, [r2, #0]
 8003b3a:	6053      	str	r3, [r2, #4]
 8003b3c:	e7da      	b.n	8003af4 <_free_r+0x24>
 8003b3e:	42a0      	cmp	r0, r4
 8003b40:	d902      	bls.n	8003b48 <_free_r+0x78>
 8003b42:	230c      	movs	r3, #12
 8003b44:	602b      	str	r3, [r5, #0]
 8003b46:	e7d5      	b.n	8003af4 <_free_r+0x24>
 8003b48:	6821      	ldr	r1, [r4, #0]
 8003b4a:	1860      	adds	r0, r4, r1
 8003b4c:	4283      	cmp	r3, r0
 8003b4e:	d103      	bne.n	8003b58 <_free_r+0x88>
 8003b50:	6818      	ldr	r0, [r3, #0]
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	1841      	adds	r1, r0, r1
 8003b56:	6021      	str	r1, [r4, #0]
 8003b58:	6063      	str	r3, [r4, #4]
 8003b5a:	6054      	str	r4, [r2, #4]
 8003b5c:	e7ca      	b.n	8003af4 <_free_r+0x24>
 8003b5e:	46c0      	nop			; (mov r8, r8)
 8003b60:	200005ac 	.word	0x200005ac

08003b64 <_malloc_r>:
 8003b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b66:	2303      	movs	r3, #3
 8003b68:	1ccd      	adds	r5, r1, #3
 8003b6a:	439d      	bics	r5, r3
 8003b6c:	3508      	adds	r5, #8
 8003b6e:	0006      	movs	r6, r0
 8003b70:	2d0c      	cmp	r5, #12
 8003b72:	d21f      	bcs.n	8003bb4 <_malloc_r+0x50>
 8003b74:	250c      	movs	r5, #12
 8003b76:	42a9      	cmp	r1, r5
 8003b78:	d81e      	bhi.n	8003bb8 <_malloc_r+0x54>
 8003b7a:	0030      	movs	r0, r6
 8003b7c:	f000 f8ec 	bl	8003d58 <__malloc_lock>
 8003b80:	4925      	ldr	r1, [pc, #148]	; (8003c18 <_malloc_r+0xb4>)
 8003b82:	680a      	ldr	r2, [r1, #0]
 8003b84:	0014      	movs	r4, r2
 8003b86:	2c00      	cmp	r4, #0
 8003b88:	d11a      	bne.n	8003bc0 <_malloc_r+0x5c>
 8003b8a:	4f24      	ldr	r7, [pc, #144]	; (8003c1c <_malloc_r+0xb8>)
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d104      	bne.n	8003b9c <_malloc_r+0x38>
 8003b92:	0021      	movs	r1, r4
 8003b94:	0030      	movs	r0, r6
 8003b96:	f000 f843 	bl	8003c20 <_sbrk_r>
 8003b9a:	6038      	str	r0, [r7, #0]
 8003b9c:	0029      	movs	r1, r5
 8003b9e:	0030      	movs	r0, r6
 8003ba0:	f000 f83e 	bl	8003c20 <_sbrk_r>
 8003ba4:	1c43      	adds	r3, r0, #1
 8003ba6:	d12b      	bne.n	8003c00 <_malloc_r+0x9c>
 8003ba8:	230c      	movs	r3, #12
 8003baa:	0030      	movs	r0, r6
 8003bac:	6033      	str	r3, [r6, #0]
 8003bae:	f000 f8db 	bl	8003d68 <__malloc_unlock>
 8003bb2:	e003      	b.n	8003bbc <_malloc_r+0x58>
 8003bb4:	2d00      	cmp	r5, #0
 8003bb6:	dade      	bge.n	8003b76 <_malloc_r+0x12>
 8003bb8:	230c      	movs	r3, #12
 8003bba:	6033      	str	r3, [r6, #0]
 8003bbc:	2000      	movs	r0, #0
 8003bbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003bc0:	6823      	ldr	r3, [r4, #0]
 8003bc2:	1b5b      	subs	r3, r3, r5
 8003bc4:	d419      	bmi.n	8003bfa <_malloc_r+0x96>
 8003bc6:	2b0b      	cmp	r3, #11
 8003bc8:	d903      	bls.n	8003bd2 <_malloc_r+0x6e>
 8003bca:	6023      	str	r3, [r4, #0]
 8003bcc:	18e4      	adds	r4, r4, r3
 8003bce:	6025      	str	r5, [r4, #0]
 8003bd0:	e003      	b.n	8003bda <_malloc_r+0x76>
 8003bd2:	6863      	ldr	r3, [r4, #4]
 8003bd4:	42a2      	cmp	r2, r4
 8003bd6:	d10e      	bne.n	8003bf6 <_malloc_r+0x92>
 8003bd8:	600b      	str	r3, [r1, #0]
 8003bda:	0030      	movs	r0, r6
 8003bdc:	f000 f8c4 	bl	8003d68 <__malloc_unlock>
 8003be0:	0020      	movs	r0, r4
 8003be2:	2207      	movs	r2, #7
 8003be4:	300b      	adds	r0, #11
 8003be6:	1d23      	adds	r3, r4, #4
 8003be8:	4390      	bics	r0, r2
 8003bea:	1ac2      	subs	r2, r0, r3
 8003bec:	4298      	cmp	r0, r3
 8003bee:	d0e6      	beq.n	8003bbe <_malloc_r+0x5a>
 8003bf0:	1a1b      	subs	r3, r3, r0
 8003bf2:	50a3      	str	r3, [r4, r2]
 8003bf4:	e7e3      	b.n	8003bbe <_malloc_r+0x5a>
 8003bf6:	6053      	str	r3, [r2, #4]
 8003bf8:	e7ef      	b.n	8003bda <_malloc_r+0x76>
 8003bfa:	0022      	movs	r2, r4
 8003bfc:	6864      	ldr	r4, [r4, #4]
 8003bfe:	e7c2      	b.n	8003b86 <_malloc_r+0x22>
 8003c00:	2303      	movs	r3, #3
 8003c02:	1cc4      	adds	r4, r0, #3
 8003c04:	439c      	bics	r4, r3
 8003c06:	42a0      	cmp	r0, r4
 8003c08:	d0e1      	beq.n	8003bce <_malloc_r+0x6a>
 8003c0a:	1a21      	subs	r1, r4, r0
 8003c0c:	0030      	movs	r0, r6
 8003c0e:	f000 f807 	bl	8003c20 <_sbrk_r>
 8003c12:	1c43      	adds	r3, r0, #1
 8003c14:	d1db      	bne.n	8003bce <_malloc_r+0x6a>
 8003c16:	e7c7      	b.n	8003ba8 <_malloc_r+0x44>
 8003c18:	200005ac 	.word	0x200005ac
 8003c1c:	200005b0 	.word	0x200005b0

08003c20 <_sbrk_r>:
 8003c20:	2300      	movs	r3, #0
 8003c22:	b570      	push	{r4, r5, r6, lr}
 8003c24:	4d06      	ldr	r5, [pc, #24]	; (8003c40 <_sbrk_r+0x20>)
 8003c26:	0004      	movs	r4, r0
 8003c28:	0008      	movs	r0, r1
 8003c2a:	602b      	str	r3, [r5, #0]
 8003c2c:	f001 f8ae 	bl	8004d8c <_sbrk>
 8003c30:	1c43      	adds	r3, r0, #1
 8003c32:	d103      	bne.n	8003c3c <_sbrk_r+0x1c>
 8003c34:	682b      	ldr	r3, [r5, #0]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d000      	beq.n	8003c3c <_sbrk_r+0x1c>
 8003c3a:	6023      	str	r3, [r4, #0]
 8003c3c:	bd70      	pop	{r4, r5, r6, pc}
 8003c3e:	46c0      	nop			; (mov r8, r8)
 8003c40:	200005c8 	.word	0x200005c8

08003c44 <siprintf>:
 8003c44:	b40e      	push	{r1, r2, r3}
 8003c46:	b500      	push	{lr}
 8003c48:	490b      	ldr	r1, [pc, #44]	; (8003c78 <siprintf+0x34>)
 8003c4a:	b09c      	sub	sp, #112	; 0x70
 8003c4c:	ab1d      	add	r3, sp, #116	; 0x74
 8003c4e:	9002      	str	r0, [sp, #8]
 8003c50:	9006      	str	r0, [sp, #24]
 8003c52:	9107      	str	r1, [sp, #28]
 8003c54:	9104      	str	r1, [sp, #16]
 8003c56:	4809      	ldr	r0, [pc, #36]	; (8003c7c <siprintf+0x38>)
 8003c58:	4909      	ldr	r1, [pc, #36]	; (8003c80 <siprintf+0x3c>)
 8003c5a:	cb04      	ldmia	r3!, {r2}
 8003c5c:	9105      	str	r1, [sp, #20]
 8003c5e:	6800      	ldr	r0, [r0, #0]
 8003c60:	a902      	add	r1, sp, #8
 8003c62:	9301      	str	r3, [sp, #4]
 8003c64:	f000 f8ea 	bl	8003e3c <_svfiprintf_r>
 8003c68:	2300      	movs	r3, #0
 8003c6a:	9a02      	ldr	r2, [sp, #8]
 8003c6c:	7013      	strb	r3, [r2, #0]
 8003c6e:	b01c      	add	sp, #112	; 0x70
 8003c70:	bc08      	pop	{r3}
 8003c72:	b003      	add	sp, #12
 8003c74:	4718      	bx	r3
 8003c76:	46c0      	nop			; (mov r8, r8)
 8003c78:	7fffffff 	.word	0x7fffffff
 8003c7c:	20000040 	.word	0x20000040
 8003c80:	ffff0208 	.word	0xffff0208

08003c84 <siscanf>:
 8003c84:	b40e      	push	{r1, r2, r3}
 8003c86:	b530      	push	{r4, r5, lr}
 8003c88:	2381      	movs	r3, #129	; 0x81
 8003c8a:	b09c      	sub	sp, #112	; 0x70
 8003c8c:	466a      	mov	r2, sp
 8003c8e:	ac1f      	add	r4, sp, #124	; 0x7c
 8003c90:	009b      	lsls	r3, r3, #2
 8003c92:	cc20      	ldmia	r4!, {r5}
 8003c94:	8293      	strh	r3, [r2, #20]
 8003c96:	9002      	str	r0, [sp, #8]
 8003c98:	9006      	str	r0, [sp, #24]
 8003c9a:	f7fc fa3f 	bl	800011c <strlen>
 8003c9e:	4b0b      	ldr	r3, [pc, #44]	; (8003ccc <siscanf+0x48>)
 8003ca0:	466a      	mov	r2, sp
 8003ca2:	930b      	str	r3, [sp, #44]	; 0x2c
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	9003      	str	r0, [sp, #12]
 8003ca8:	9007      	str	r0, [sp, #28]
 8003caa:	4809      	ldr	r0, [pc, #36]	; (8003cd0 <siscanf+0x4c>)
 8003cac:	930f      	str	r3, [sp, #60]	; 0x3c
 8003cae:	9314      	str	r3, [sp, #80]	; 0x50
 8003cb0:	3b01      	subs	r3, #1
 8003cb2:	82d3      	strh	r3, [r2, #22]
 8003cb4:	a902      	add	r1, sp, #8
 8003cb6:	0023      	movs	r3, r4
 8003cb8:	002a      	movs	r2, r5
 8003cba:	6800      	ldr	r0, [r0, #0]
 8003cbc:	9401      	str	r4, [sp, #4]
 8003cbe:	f000 fa19 	bl	80040f4 <__ssvfiscanf_r>
 8003cc2:	b01c      	add	sp, #112	; 0x70
 8003cc4:	bc30      	pop	{r4, r5}
 8003cc6:	bc08      	pop	{r3}
 8003cc8:	b003      	add	sp, #12
 8003cca:	4718      	bx	r3
 8003ccc:	08003cd5 	.word	0x08003cd5
 8003cd0:	20000040 	.word	0x20000040

08003cd4 <__seofread>:
 8003cd4:	2000      	movs	r0, #0
 8003cd6:	4770      	bx	lr

08003cd8 <strcpy>:
 8003cd8:	0003      	movs	r3, r0
 8003cda:	780a      	ldrb	r2, [r1, #0]
 8003cdc:	3101      	adds	r1, #1
 8003cde:	701a      	strb	r2, [r3, #0]
 8003ce0:	3301      	adds	r3, #1
 8003ce2:	2a00      	cmp	r2, #0
 8003ce4:	d1f9      	bne.n	8003cda <strcpy+0x2>
 8003ce6:	4770      	bx	lr

08003ce8 <_vsniprintf_r>:
 8003ce8:	b530      	push	{r4, r5, lr}
 8003cea:	0014      	movs	r4, r2
 8003cec:	0005      	movs	r5, r0
 8003cee:	001a      	movs	r2, r3
 8003cf0:	b09b      	sub	sp, #108	; 0x6c
 8003cf2:	2c00      	cmp	r4, #0
 8003cf4:	da05      	bge.n	8003d02 <_vsniprintf_r+0x1a>
 8003cf6:	238b      	movs	r3, #139	; 0x8b
 8003cf8:	6003      	str	r3, [r0, #0]
 8003cfa:	2001      	movs	r0, #1
 8003cfc:	4240      	negs	r0, r0
 8003cfe:	b01b      	add	sp, #108	; 0x6c
 8003d00:	bd30      	pop	{r4, r5, pc}
 8003d02:	2382      	movs	r3, #130	; 0x82
 8003d04:	4668      	mov	r0, sp
 8003d06:	009b      	lsls	r3, r3, #2
 8003d08:	8183      	strh	r3, [r0, #12]
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	9100      	str	r1, [sp, #0]
 8003d0e:	9104      	str	r1, [sp, #16]
 8003d10:	429c      	cmp	r4, r3
 8003d12:	d000      	beq.n	8003d16 <_vsniprintf_r+0x2e>
 8003d14:	1e63      	subs	r3, r4, #1
 8003d16:	9302      	str	r3, [sp, #8]
 8003d18:	9305      	str	r3, [sp, #20]
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	4669      	mov	r1, sp
 8003d1e:	425b      	negs	r3, r3
 8003d20:	81cb      	strh	r3, [r1, #14]
 8003d22:	0028      	movs	r0, r5
 8003d24:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003d26:	f000 f889 	bl	8003e3c <_svfiprintf_r>
 8003d2a:	1c43      	adds	r3, r0, #1
 8003d2c:	da01      	bge.n	8003d32 <_vsniprintf_r+0x4a>
 8003d2e:	238b      	movs	r3, #139	; 0x8b
 8003d30:	602b      	str	r3, [r5, #0]
 8003d32:	2c00      	cmp	r4, #0
 8003d34:	d0e3      	beq.n	8003cfe <_vsniprintf_r+0x16>
 8003d36:	2300      	movs	r3, #0
 8003d38:	9a00      	ldr	r2, [sp, #0]
 8003d3a:	7013      	strb	r3, [r2, #0]
 8003d3c:	e7df      	b.n	8003cfe <_vsniprintf_r+0x16>
	...

08003d40 <vsniprintf>:
 8003d40:	b507      	push	{r0, r1, r2, lr}
 8003d42:	9300      	str	r3, [sp, #0]
 8003d44:	0013      	movs	r3, r2
 8003d46:	000a      	movs	r2, r1
 8003d48:	0001      	movs	r1, r0
 8003d4a:	4802      	ldr	r0, [pc, #8]	; (8003d54 <vsniprintf+0x14>)
 8003d4c:	6800      	ldr	r0, [r0, #0]
 8003d4e:	f7ff ffcb 	bl	8003ce8 <_vsniprintf_r>
 8003d52:	bd0e      	pop	{r1, r2, r3, pc}
 8003d54:	20000040 	.word	0x20000040

08003d58 <__malloc_lock>:
 8003d58:	b510      	push	{r4, lr}
 8003d5a:	4802      	ldr	r0, [pc, #8]	; (8003d64 <__malloc_lock+0xc>)
 8003d5c:	f000 ffc8 	bl	8004cf0 <__retarget_lock_acquire_recursive>
 8003d60:	bd10      	pop	{r4, pc}
 8003d62:	46c0      	nop			; (mov r8, r8)
 8003d64:	200005d0 	.word	0x200005d0

08003d68 <__malloc_unlock>:
 8003d68:	b510      	push	{r4, lr}
 8003d6a:	4802      	ldr	r0, [pc, #8]	; (8003d74 <__malloc_unlock+0xc>)
 8003d6c:	f000 ffc1 	bl	8004cf2 <__retarget_lock_release_recursive>
 8003d70:	bd10      	pop	{r4, pc}
 8003d72:	46c0      	nop			; (mov r8, r8)
 8003d74:	200005d0 	.word	0x200005d0

08003d78 <__ssputs_r>:
 8003d78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d7a:	688e      	ldr	r6, [r1, #8]
 8003d7c:	b085      	sub	sp, #20
 8003d7e:	0007      	movs	r7, r0
 8003d80:	000c      	movs	r4, r1
 8003d82:	9203      	str	r2, [sp, #12]
 8003d84:	9301      	str	r3, [sp, #4]
 8003d86:	429e      	cmp	r6, r3
 8003d88:	d83c      	bhi.n	8003e04 <__ssputs_r+0x8c>
 8003d8a:	2390      	movs	r3, #144	; 0x90
 8003d8c:	898a      	ldrh	r2, [r1, #12]
 8003d8e:	00db      	lsls	r3, r3, #3
 8003d90:	421a      	tst	r2, r3
 8003d92:	d034      	beq.n	8003dfe <__ssputs_r+0x86>
 8003d94:	2503      	movs	r5, #3
 8003d96:	6909      	ldr	r1, [r1, #16]
 8003d98:	6823      	ldr	r3, [r4, #0]
 8003d9a:	1a5b      	subs	r3, r3, r1
 8003d9c:	9302      	str	r3, [sp, #8]
 8003d9e:	6963      	ldr	r3, [r4, #20]
 8003da0:	9802      	ldr	r0, [sp, #8]
 8003da2:	435d      	muls	r5, r3
 8003da4:	0feb      	lsrs	r3, r5, #31
 8003da6:	195d      	adds	r5, r3, r5
 8003da8:	9b01      	ldr	r3, [sp, #4]
 8003daa:	106d      	asrs	r5, r5, #1
 8003dac:	3301      	adds	r3, #1
 8003dae:	181b      	adds	r3, r3, r0
 8003db0:	42ab      	cmp	r3, r5
 8003db2:	d900      	bls.n	8003db6 <__ssputs_r+0x3e>
 8003db4:	001d      	movs	r5, r3
 8003db6:	0553      	lsls	r3, r2, #21
 8003db8:	d532      	bpl.n	8003e20 <__ssputs_r+0xa8>
 8003dba:	0029      	movs	r1, r5
 8003dbc:	0038      	movs	r0, r7
 8003dbe:	f7ff fed1 	bl	8003b64 <_malloc_r>
 8003dc2:	1e06      	subs	r6, r0, #0
 8003dc4:	d109      	bne.n	8003dda <__ssputs_r+0x62>
 8003dc6:	230c      	movs	r3, #12
 8003dc8:	603b      	str	r3, [r7, #0]
 8003dca:	2340      	movs	r3, #64	; 0x40
 8003dcc:	2001      	movs	r0, #1
 8003dce:	89a2      	ldrh	r2, [r4, #12]
 8003dd0:	4240      	negs	r0, r0
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	81a3      	strh	r3, [r4, #12]
 8003dd6:	b005      	add	sp, #20
 8003dd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003dda:	9a02      	ldr	r2, [sp, #8]
 8003ddc:	6921      	ldr	r1, [r4, #16]
 8003dde:	f7ff fe65 	bl	8003aac <memcpy>
 8003de2:	89a3      	ldrh	r3, [r4, #12]
 8003de4:	4a14      	ldr	r2, [pc, #80]	; (8003e38 <__ssputs_r+0xc0>)
 8003de6:	401a      	ands	r2, r3
 8003de8:	2380      	movs	r3, #128	; 0x80
 8003dea:	4313      	orrs	r3, r2
 8003dec:	81a3      	strh	r3, [r4, #12]
 8003dee:	9b02      	ldr	r3, [sp, #8]
 8003df0:	6126      	str	r6, [r4, #16]
 8003df2:	18f6      	adds	r6, r6, r3
 8003df4:	6026      	str	r6, [r4, #0]
 8003df6:	6165      	str	r5, [r4, #20]
 8003df8:	9e01      	ldr	r6, [sp, #4]
 8003dfa:	1aed      	subs	r5, r5, r3
 8003dfc:	60a5      	str	r5, [r4, #8]
 8003dfe:	9b01      	ldr	r3, [sp, #4]
 8003e00:	429e      	cmp	r6, r3
 8003e02:	d900      	bls.n	8003e06 <__ssputs_r+0x8e>
 8003e04:	9e01      	ldr	r6, [sp, #4]
 8003e06:	0032      	movs	r2, r6
 8003e08:	9903      	ldr	r1, [sp, #12]
 8003e0a:	6820      	ldr	r0, [r4, #0]
 8003e0c:	f000 ff7d 	bl	8004d0a <memmove>
 8003e10:	68a3      	ldr	r3, [r4, #8]
 8003e12:	2000      	movs	r0, #0
 8003e14:	1b9b      	subs	r3, r3, r6
 8003e16:	60a3      	str	r3, [r4, #8]
 8003e18:	6823      	ldr	r3, [r4, #0]
 8003e1a:	199e      	adds	r6, r3, r6
 8003e1c:	6026      	str	r6, [r4, #0]
 8003e1e:	e7da      	b.n	8003dd6 <__ssputs_r+0x5e>
 8003e20:	002a      	movs	r2, r5
 8003e22:	0038      	movs	r0, r7
 8003e24:	f000 ff84 	bl	8004d30 <_realloc_r>
 8003e28:	1e06      	subs	r6, r0, #0
 8003e2a:	d1e0      	bne.n	8003dee <__ssputs_r+0x76>
 8003e2c:	0038      	movs	r0, r7
 8003e2e:	6921      	ldr	r1, [r4, #16]
 8003e30:	f7ff fe4e 	bl	8003ad0 <_free_r>
 8003e34:	e7c7      	b.n	8003dc6 <__ssputs_r+0x4e>
 8003e36:	46c0      	nop			; (mov r8, r8)
 8003e38:	fffffb7f 	.word	0xfffffb7f

08003e3c <_svfiprintf_r>:
 8003e3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e3e:	b0a1      	sub	sp, #132	; 0x84
 8003e40:	9003      	str	r0, [sp, #12]
 8003e42:	001d      	movs	r5, r3
 8003e44:	898b      	ldrh	r3, [r1, #12]
 8003e46:	000f      	movs	r7, r1
 8003e48:	0016      	movs	r6, r2
 8003e4a:	061b      	lsls	r3, r3, #24
 8003e4c:	d511      	bpl.n	8003e72 <_svfiprintf_r+0x36>
 8003e4e:	690b      	ldr	r3, [r1, #16]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d10e      	bne.n	8003e72 <_svfiprintf_r+0x36>
 8003e54:	2140      	movs	r1, #64	; 0x40
 8003e56:	f7ff fe85 	bl	8003b64 <_malloc_r>
 8003e5a:	6038      	str	r0, [r7, #0]
 8003e5c:	6138      	str	r0, [r7, #16]
 8003e5e:	2800      	cmp	r0, #0
 8003e60:	d105      	bne.n	8003e6e <_svfiprintf_r+0x32>
 8003e62:	230c      	movs	r3, #12
 8003e64:	9a03      	ldr	r2, [sp, #12]
 8003e66:	3801      	subs	r0, #1
 8003e68:	6013      	str	r3, [r2, #0]
 8003e6a:	b021      	add	sp, #132	; 0x84
 8003e6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e6e:	2340      	movs	r3, #64	; 0x40
 8003e70:	617b      	str	r3, [r7, #20]
 8003e72:	2300      	movs	r3, #0
 8003e74:	ac08      	add	r4, sp, #32
 8003e76:	6163      	str	r3, [r4, #20]
 8003e78:	3320      	adds	r3, #32
 8003e7a:	7663      	strb	r3, [r4, #25]
 8003e7c:	3310      	adds	r3, #16
 8003e7e:	76a3      	strb	r3, [r4, #26]
 8003e80:	9507      	str	r5, [sp, #28]
 8003e82:	0035      	movs	r5, r6
 8003e84:	782b      	ldrb	r3, [r5, #0]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d001      	beq.n	8003e8e <_svfiprintf_r+0x52>
 8003e8a:	2b25      	cmp	r3, #37	; 0x25
 8003e8c:	d147      	bne.n	8003f1e <_svfiprintf_r+0xe2>
 8003e8e:	1bab      	subs	r3, r5, r6
 8003e90:	9305      	str	r3, [sp, #20]
 8003e92:	42b5      	cmp	r5, r6
 8003e94:	d00c      	beq.n	8003eb0 <_svfiprintf_r+0x74>
 8003e96:	0032      	movs	r2, r6
 8003e98:	0039      	movs	r1, r7
 8003e9a:	9803      	ldr	r0, [sp, #12]
 8003e9c:	f7ff ff6c 	bl	8003d78 <__ssputs_r>
 8003ea0:	1c43      	adds	r3, r0, #1
 8003ea2:	d100      	bne.n	8003ea6 <_svfiprintf_r+0x6a>
 8003ea4:	e0ae      	b.n	8004004 <_svfiprintf_r+0x1c8>
 8003ea6:	6962      	ldr	r2, [r4, #20]
 8003ea8:	9b05      	ldr	r3, [sp, #20]
 8003eaa:	4694      	mov	ip, r2
 8003eac:	4463      	add	r3, ip
 8003eae:	6163      	str	r3, [r4, #20]
 8003eb0:	782b      	ldrb	r3, [r5, #0]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d100      	bne.n	8003eb8 <_svfiprintf_r+0x7c>
 8003eb6:	e0a5      	b.n	8004004 <_svfiprintf_r+0x1c8>
 8003eb8:	2201      	movs	r2, #1
 8003eba:	2300      	movs	r3, #0
 8003ebc:	4252      	negs	r2, r2
 8003ebe:	6062      	str	r2, [r4, #4]
 8003ec0:	a904      	add	r1, sp, #16
 8003ec2:	3254      	adds	r2, #84	; 0x54
 8003ec4:	1852      	adds	r2, r2, r1
 8003ec6:	1c6e      	adds	r6, r5, #1
 8003ec8:	6023      	str	r3, [r4, #0]
 8003eca:	60e3      	str	r3, [r4, #12]
 8003ecc:	60a3      	str	r3, [r4, #8]
 8003ece:	7013      	strb	r3, [r2, #0]
 8003ed0:	65a3      	str	r3, [r4, #88]	; 0x58
 8003ed2:	2205      	movs	r2, #5
 8003ed4:	7831      	ldrb	r1, [r6, #0]
 8003ed6:	4854      	ldr	r0, [pc, #336]	; (8004028 <_svfiprintf_r+0x1ec>)
 8003ed8:	f000 ff0c 	bl	8004cf4 <memchr>
 8003edc:	1c75      	adds	r5, r6, #1
 8003ede:	2800      	cmp	r0, #0
 8003ee0:	d11f      	bne.n	8003f22 <_svfiprintf_r+0xe6>
 8003ee2:	6822      	ldr	r2, [r4, #0]
 8003ee4:	06d3      	lsls	r3, r2, #27
 8003ee6:	d504      	bpl.n	8003ef2 <_svfiprintf_r+0xb6>
 8003ee8:	2353      	movs	r3, #83	; 0x53
 8003eea:	a904      	add	r1, sp, #16
 8003eec:	185b      	adds	r3, r3, r1
 8003eee:	2120      	movs	r1, #32
 8003ef0:	7019      	strb	r1, [r3, #0]
 8003ef2:	0713      	lsls	r3, r2, #28
 8003ef4:	d504      	bpl.n	8003f00 <_svfiprintf_r+0xc4>
 8003ef6:	2353      	movs	r3, #83	; 0x53
 8003ef8:	a904      	add	r1, sp, #16
 8003efa:	185b      	adds	r3, r3, r1
 8003efc:	212b      	movs	r1, #43	; 0x2b
 8003efe:	7019      	strb	r1, [r3, #0]
 8003f00:	7833      	ldrb	r3, [r6, #0]
 8003f02:	2b2a      	cmp	r3, #42	; 0x2a
 8003f04:	d016      	beq.n	8003f34 <_svfiprintf_r+0xf8>
 8003f06:	0035      	movs	r5, r6
 8003f08:	2100      	movs	r1, #0
 8003f0a:	200a      	movs	r0, #10
 8003f0c:	68e3      	ldr	r3, [r4, #12]
 8003f0e:	782a      	ldrb	r2, [r5, #0]
 8003f10:	1c6e      	adds	r6, r5, #1
 8003f12:	3a30      	subs	r2, #48	; 0x30
 8003f14:	2a09      	cmp	r2, #9
 8003f16:	d94e      	bls.n	8003fb6 <_svfiprintf_r+0x17a>
 8003f18:	2900      	cmp	r1, #0
 8003f1a:	d111      	bne.n	8003f40 <_svfiprintf_r+0x104>
 8003f1c:	e017      	b.n	8003f4e <_svfiprintf_r+0x112>
 8003f1e:	3501      	adds	r5, #1
 8003f20:	e7b0      	b.n	8003e84 <_svfiprintf_r+0x48>
 8003f22:	4b41      	ldr	r3, [pc, #260]	; (8004028 <_svfiprintf_r+0x1ec>)
 8003f24:	6822      	ldr	r2, [r4, #0]
 8003f26:	1ac0      	subs	r0, r0, r3
 8003f28:	2301      	movs	r3, #1
 8003f2a:	4083      	lsls	r3, r0
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	002e      	movs	r6, r5
 8003f30:	6023      	str	r3, [r4, #0]
 8003f32:	e7ce      	b.n	8003ed2 <_svfiprintf_r+0x96>
 8003f34:	9b07      	ldr	r3, [sp, #28]
 8003f36:	1d19      	adds	r1, r3, #4
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	9107      	str	r1, [sp, #28]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	db01      	blt.n	8003f44 <_svfiprintf_r+0x108>
 8003f40:	930b      	str	r3, [sp, #44]	; 0x2c
 8003f42:	e004      	b.n	8003f4e <_svfiprintf_r+0x112>
 8003f44:	425b      	negs	r3, r3
 8003f46:	60e3      	str	r3, [r4, #12]
 8003f48:	2302      	movs	r3, #2
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	6023      	str	r3, [r4, #0]
 8003f4e:	782b      	ldrb	r3, [r5, #0]
 8003f50:	2b2e      	cmp	r3, #46	; 0x2e
 8003f52:	d10a      	bne.n	8003f6a <_svfiprintf_r+0x12e>
 8003f54:	786b      	ldrb	r3, [r5, #1]
 8003f56:	2b2a      	cmp	r3, #42	; 0x2a
 8003f58:	d135      	bne.n	8003fc6 <_svfiprintf_r+0x18a>
 8003f5a:	9b07      	ldr	r3, [sp, #28]
 8003f5c:	3502      	adds	r5, #2
 8003f5e:	1d1a      	adds	r2, r3, #4
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	9207      	str	r2, [sp, #28]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	db2b      	blt.n	8003fc0 <_svfiprintf_r+0x184>
 8003f68:	9309      	str	r3, [sp, #36]	; 0x24
 8003f6a:	4e30      	ldr	r6, [pc, #192]	; (800402c <_svfiprintf_r+0x1f0>)
 8003f6c:	2203      	movs	r2, #3
 8003f6e:	0030      	movs	r0, r6
 8003f70:	7829      	ldrb	r1, [r5, #0]
 8003f72:	f000 febf 	bl	8004cf4 <memchr>
 8003f76:	2800      	cmp	r0, #0
 8003f78:	d006      	beq.n	8003f88 <_svfiprintf_r+0x14c>
 8003f7a:	2340      	movs	r3, #64	; 0x40
 8003f7c:	1b80      	subs	r0, r0, r6
 8003f7e:	4083      	lsls	r3, r0
 8003f80:	6822      	ldr	r2, [r4, #0]
 8003f82:	3501      	adds	r5, #1
 8003f84:	4313      	orrs	r3, r2
 8003f86:	6023      	str	r3, [r4, #0]
 8003f88:	7829      	ldrb	r1, [r5, #0]
 8003f8a:	2206      	movs	r2, #6
 8003f8c:	4828      	ldr	r0, [pc, #160]	; (8004030 <_svfiprintf_r+0x1f4>)
 8003f8e:	1c6e      	adds	r6, r5, #1
 8003f90:	7621      	strb	r1, [r4, #24]
 8003f92:	f000 feaf 	bl	8004cf4 <memchr>
 8003f96:	2800      	cmp	r0, #0
 8003f98:	d03c      	beq.n	8004014 <_svfiprintf_r+0x1d8>
 8003f9a:	4b26      	ldr	r3, [pc, #152]	; (8004034 <_svfiprintf_r+0x1f8>)
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d125      	bne.n	8003fec <_svfiprintf_r+0x1b0>
 8003fa0:	2207      	movs	r2, #7
 8003fa2:	9b07      	ldr	r3, [sp, #28]
 8003fa4:	3307      	adds	r3, #7
 8003fa6:	4393      	bics	r3, r2
 8003fa8:	3308      	adds	r3, #8
 8003faa:	9307      	str	r3, [sp, #28]
 8003fac:	6963      	ldr	r3, [r4, #20]
 8003fae:	9a04      	ldr	r2, [sp, #16]
 8003fb0:	189b      	adds	r3, r3, r2
 8003fb2:	6163      	str	r3, [r4, #20]
 8003fb4:	e765      	b.n	8003e82 <_svfiprintf_r+0x46>
 8003fb6:	4343      	muls	r3, r0
 8003fb8:	0035      	movs	r5, r6
 8003fba:	2101      	movs	r1, #1
 8003fbc:	189b      	adds	r3, r3, r2
 8003fbe:	e7a6      	b.n	8003f0e <_svfiprintf_r+0xd2>
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	425b      	negs	r3, r3
 8003fc4:	e7d0      	b.n	8003f68 <_svfiprintf_r+0x12c>
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	200a      	movs	r0, #10
 8003fca:	001a      	movs	r2, r3
 8003fcc:	3501      	adds	r5, #1
 8003fce:	6063      	str	r3, [r4, #4]
 8003fd0:	7829      	ldrb	r1, [r5, #0]
 8003fd2:	1c6e      	adds	r6, r5, #1
 8003fd4:	3930      	subs	r1, #48	; 0x30
 8003fd6:	2909      	cmp	r1, #9
 8003fd8:	d903      	bls.n	8003fe2 <_svfiprintf_r+0x1a6>
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d0c5      	beq.n	8003f6a <_svfiprintf_r+0x12e>
 8003fde:	9209      	str	r2, [sp, #36]	; 0x24
 8003fe0:	e7c3      	b.n	8003f6a <_svfiprintf_r+0x12e>
 8003fe2:	4342      	muls	r2, r0
 8003fe4:	0035      	movs	r5, r6
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	1852      	adds	r2, r2, r1
 8003fea:	e7f1      	b.n	8003fd0 <_svfiprintf_r+0x194>
 8003fec:	ab07      	add	r3, sp, #28
 8003fee:	9300      	str	r3, [sp, #0]
 8003ff0:	003a      	movs	r2, r7
 8003ff2:	0021      	movs	r1, r4
 8003ff4:	4b10      	ldr	r3, [pc, #64]	; (8004038 <_svfiprintf_r+0x1fc>)
 8003ff6:	9803      	ldr	r0, [sp, #12]
 8003ff8:	e000      	b.n	8003ffc <_svfiprintf_r+0x1c0>
 8003ffa:	bf00      	nop
 8003ffc:	9004      	str	r0, [sp, #16]
 8003ffe:	9b04      	ldr	r3, [sp, #16]
 8004000:	3301      	adds	r3, #1
 8004002:	d1d3      	bne.n	8003fac <_svfiprintf_r+0x170>
 8004004:	89bb      	ldrh	r3, [r7, #12]
 8004006:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004008:	065b      	lsls	r3, r3, #25
 800400a:	d400      	bmi.n	800400e <_svfiprintf_r+0x1d2>
 800400c:	e72d      	b.n	8003e6a <_svfiprintf_r+0x2e>
 800400e:	2001      	movs	r0, #1
 8004010:	4240      	negs	r0, r0
 8004012:	e72a      	b.n	8003e6a <_svfiprintf_r+0x2e>
 8004014:	ab07      	add	r3, sp, #28
 8004016:	9300      	str	r3, [sp, #0]
 8004018:	003a      	movs	r2, r7
 800401a:	0021      	movs	r1, r4
 800401c:	4b06      	ldr	r3, [pc, #24]	; (8004038 <_svfiprintf_r+0x1fc>)
 800401e:	9803      	ldr	r0, [sp, #12]
 8004020:	f000 fa50 	bl	80044c4 <_printf_i>
 8004024:	e7ea      	b.n	8003ffc <_svfiprintf_r+0x1c0>
 8004026:	46c0      	nop			; (mov r8, r8)
 8004028:	0800571d 	.word	0x0800571d
 800402c:	08005723 	.word	0x08005723
 8004030:	08005727 	.word	0x08005727
 8004034:	00000000 	.word	0x00000000
 8004038:	08003d79 	.word	0x08003d79

0800403c <_sungetc_r>:
 800403c:	b570      	push	{r4, r5, r6, lr}
 800403e:	0014      	movs	r4, r2
 8004040:	1c4b      	adds	r3, r1, #1
 8004042:	d103      	bne.n	800404c <_sungetc_r+0x10>
 8004044:	2501      	movs	r5, #1
 8004046:	426d      	negs	r5, r5
 8004048:	0028      	movs	r0, r5
 800404a:	bd70      	pop	{r4, r5, r6, pc}
 800404c:	8993      	ldrh	r3, [r2, #12]
 800404e:	2220      	movs	r2, #32
 8004050:	4393      	bics	r3, r2
 8004052:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8004054:	81a3      	strh	r3, [r4, #12]
 8004056:	b2ce      	uxtb	r6, r1
 8004058:	6863      	ldr	r3, [r4, #4]
 800405a:	b2cd      	uxtb	r5, r1
 800405c:	2a00      	cmp	r2, #0
 800405e:	d010      	beq.n	8004082 <_sungetc_r+0x46>
 8004060:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004062:	429a      	cmp	r2, r3
 8004064:	dd07      	ble.n	8004076 <_sungetc_r+0x3a>
 8004066:	6823      	ldr	r3, [r4, #0]
 8004068:	3b01      	subs	r3, #1
 800406a:	6023      	str	r3, [r4, #0]
 800406c:	701e      	strb	r6, [r3, #0]
 800406e:	6863      	ldr	r3, [r4, #4]
 8004070:	3301      	adds	r3, #1
 8004072:	6063      	str	r3, [r4, #4]
 8004074:	e7e8      	b.n	8004048 <_sungetc_r+0xc>
 8004076:	0021      	movs	r1, r4
 8004078:	f000 fdf6 	bl	8004c68 <__submore>
 800407c:	2800      	cmp	r0, #0
 800407e:	d0f2      	beq.n	8004066 <_sungetc_r+0x2a>
 8004080:	e7e0      	b.n	8004044 <_sungetc_r+0x8>
 8004082:	6921      	ldr	r1, [r4, #16]
 8004084:	6822      	ldr	r2, [r4, #0]
 8004086:	2900      	cmp	r1, #0
 8004088:	d007      	beq.n	800409a <_sungetc_r+0x5e>
 800408a:	4291      	cmp	r1, r2
 800408c:	d205      	bcs.n	800409a <_sungetc_r+0x5e>
 800408e:	1e51      	subs	r1, r2, #1
 8004090:	7808      	ldrb	r0, [r1, #0]
 8004092:	42a8      	cmp	r0, r5
 8004094:	d101      	bne.n	800409a <_sungetc_r+0x5e>
 8004096:	6021      	str	r1, [r4, #0]
 8004098:	e7ea      	b.n	8004070 <_sungetc_r+0x34>
 800409a:	6423      	str	r3, [r4, #64]	; 0x40
 800409c:	0023      	movs	r3, r4
 800409e:	3344      	adds	r3, #68	; 0x44
 80040a0:	6363      	str	r3, [r4, #52]	; 0x34
 80040a2:	2303      	movs	r3, #3
 80040a4:	63a3      	str	r3, [r4, #56]	; 0x38
 80040a6:	0023      	movs	r3, r4
 80040a8:	3346      	adds	r3, #70	; 0x46
 80040aa:	63e2      	str	r2, [r4, #60]	; 0x3c
 80040ac:	701e      	strb	r6, [r3, #0]
 80040ae:	6023      	str	r3, [r4, #0]
 80040b0:	2301      	movs	r3, #1
 80040b2:	e7de      	b.n	8004072 <_sungetc_r+0x36>

080040b4 <__ssrefill_r>:
 80040b4:	b510      	push	{r4, lr}
 80040b6:	000c      	movs	r4, r1
 80040b8:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80040ba:	2900      	cmp	r1, #0
 80040bc:	d00e      	beq.n	80040dc <__ssrefill_r+0x28>
 80040be:	0023      	movs	r3, r4
 80040c0:	3344      	adds	r3, #68	; 0x44
 80040c2:	4299      	cmp	r1, r3
 80040c4:	d001      	beq.n	80040ca <__ssrefill_r+0x16>
 80040c6:	f7ff fd03 	bl	8003ad0 <_free_r>
 80040ca:	2000      	movs	r0, #0
 80040cc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80040ce:	6360      	str	r0, [r4, #52]	; 0x34
 80040d0:	6063      	str	r3, [r4, #4]
 80040d2:	4283      	cmp	r3, r0
 80040d4:	d002      	beq.n	80040dc <__ssrefill_r+0x28>
 80040d6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80040d8:	6023      	str	r3, [r4, #0]
 80040da:	bd10      	pop	{r4, pc}
 80040dc:	6923      	ldr	r3, [r4, #16]
 80040de:	2001      	movs	r0, #1
 80040e0:	6023      	str	r3, [r4, #0]
 80040e2:	2300      	movs	r3, #0
 80040e4:	89a2      	ldrh	r2, [r4, #12]
 80040e6:	6063      	str	r3, [r4, #4]
 80040e8:	3320      	adds	r3, #32
 80040ea:	4313      	orrs	r3, r2
 80040ec:	81a3      	strh	r3, [r4, #12]
 80040ee:	4240      	negs	r0, r0
 80040f0:	e7f3      	b.n	80040da <__ssrefill_r+0x26>
	...

080040f4 <__ssvfiscanf_r>:
 80040f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80040f6:	4cb5      	ldr	r4, [pc, #724]	; (80043cc <__ssvfiscanf_r+0x2d8>)
 80040f8:	0005      	movs	r5, r0
 80040fa:	44a5      	add	sp, r4
 80040fc:	000c      	movs	r4, r1
 80040fe:	2100      	movs	r1, #0
 8004100:	9148      	str	r1, [sp, #288]	; 0x120
 8004102:	9149      	str	r1, [sp, #292]	; 0x124
 8004104:	a905      	add	r1, sp, #20
 8004106:	914a      	str	r1, [sp, #296]	; 0x128
 8004108:	21be      	movs	r1, #190	; 0xbe
 800410a:	48b1      	ldr	r0, [pc, #708]	; (80043d0 <__ssvfiscanf_r+0x2dc>)
 800410c:	0049      	lsls	r1, r1, #1
 800410e:	ae45      	add	r6, sp, #276	; 0x114
 8004110:	5070      	str	r0, [r6, r1]
 8004112:	48b0      	ldr	r0, [pc, #704]	; (80043d4 <__ssvfiscanf_r+0x2e0>)
 8004114:	3104      	adds	r1, #4
 8004116:	ae45      	add	r6, sp, #276	; 0x114
 8004118:	5070      	str	r0, [r6, r1]
 800411a:	9304      	str	r3, [sp, #16]
 800411c:	9101      	str	r1, [sp, #4]
 800411e:	7813      	ldrb	r3, [r2, #0]
 8004120:	9300      	str	r3, [sp, #0]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d100      	bne.n	8004128 <__ssvfiscanf_r+0x34>
 8004126:	e14f      	b.n	80043c8 <__ssvfiscanf_r+0x2d4>
 8004128:	4fab      	ldr	r7, [pc, #684]	; (80043d8 <__ssvfiscanf_r+0x2e4>)
 800412a:	2008      	movs	r0, #8
 800412c:	5cf9      	ldrb	r1, [r7, r3]
 800412e:	2308      	movs	r3, #8
 8004130:	1c56      	adds	r6, r2, #1
 8004132:	400b      	ands	r3, r1
 8004134:	4201      	tst	r1, r0
 8004136:	d01e      	beq.n	8004176 <__ssvfiscanf_r+0x82>
 8004138:	6863      	ldr	r3, [r4, #4]
 800413a:	2b00      	cmp	r3, #0
 800413c:	dd11      	ble.n	8004162 <__ssvfiscanf_r+0x6e>
 800413e:	2108      	movs	r1, #8
 8004140:	6823      	ldr	r3, [r4, #0]
 8004142:	781a      	ldrb	r2, [r3, #0]
 8004144:	5cba      	ldrb	r2, [r7, r2]
 8004146:	420a      	tst	r2, r1
 8004148:	d101      	bne.n	800414e <__ssvfiscanf_r+0x5a>
 800414a:	0032      	movs	r2, r6
 800414c:	e7e7      	b.n	800411e <__ssvfiscanf_r+0x2a>
 800414e:	9a49      	ldr	r2, [sp, #292]	; 0x124
 8004150:	3301      	adds	r3, #1
 8004152:	9200      	str	r2, [sp, #0]
 8004154:	3201      	adds	r2, #1
 8004156:	9249      	str	r2, [sp, #292]	; 0x124
 8004158:	6862      	ldr	r2, [r4, #4]
 800415a:	6023      	str	r3, [r4, #0]
 800415c:	3a01      	subs	r2, #1
 800415e:	6062      	str	r2, [r4, #4]
 8004160:	e7ea      	b.n	8004138 <__ssvfiscanf_r+0x44>
 8004162:	9a01      	ldr	r2, [sp, #4]
 8004164:	ab45      	add	r3, sp, #276	; 0x114
 8004166:	589b      	ldr	r3, [r3, r2]
 8004168:	0021      	movs	r1, r4
 800416a:	0028      	movs	r0, r5
 800416c:	9300      	str	r3, [sp, #0]
 800416e:	4798      	blx	r3
 8004170:	2800      	cmp	r0, #0
 8004172:	d0e4      	beq.n	800413e <__ssvfiscanf_r+0x4a>
 8004174:	e7e9      	b.n	800414a <__ssvfiscanf_r+0x56>
 8004176:	9900      	ldr	r1, [sp, #0]
 8004178:	2925      	cmp	r1, #37	; 0x25
 800417a:	d164      	bne.n	8004246 <__ssvfiscanf_r+0x152>
 800417c:	9347      	str	r3, [sp, #284]	; 0x11c
 800417e:	9345      	str	r3, [sp, #276]	; 0x114
 8004180:	7853      	ldrb	r3, [r2, #1]
 8004182:	2b2a      	cmp	r3, #42	; 0x2a
 8004184:	d102      	bne.n	800418c <__ssvfiscanf_r+0x98>
 8004186:	3b1a      	subs	r3, #26
 8004188:	9345      	str	r3, [sp, #276]	; 0x114
 800418a:	1c96      	adds	r6, r2, #2
 800418c:	0037      	movs	r7, r6
 800418e:	200a      	movs	r0, #10
 8004190:	7839      	ldrb	r1, [r7, #0]
 8004192:	1c7b      	adds	r3, r7, #1
 8004194:	9302      	str	r3, [sp, #8]
 8004196:	000b      	movs	r3, r1
 8004198:	3b30      	subs	r3, #48	; 0x30
 800419a:	2b09      	cmp	r3, #9
 800419c:	d91f      	bls.n	80041de <__ssvfiscanf_r+0xea>
 800419e:	4e8f      	ldr	r6, [pc, #572]	; (80043dc <__ssvfiscanf_r+0x2e8>)
 80041a0:	2203      	movs	r2, #3
 80041a2:	0030      	movs	r0, r6
 80041a4:	f000 fda6 	bl	8004cf4 <memchr>
 80041a8:	2800      	cmp	r0, #0
 80041aa:	d007      	beq.n	80041bc <__ssvfiscanf_r+0xc8>
 80041ac:	2301      	movs	r3, #1
 80041ae:	1b80      	subs	r0, r0, r6
 80041b0:	4083      	lsls	r3, r0
 80041b2:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80041b4:	9f02      	ldr	r7, [sp, #8]
 80041b6:	4313      	orrs	r3, r2
 80041b8:	9203      	str	r2, [sp, #12]
 80041ba:	9345      	str	r3, [sp, #276]	; 0x114
 80041bc:	783b      	ldrb	r3, [r7, #0]
 80041be:	1c7e      	adds	r6, r7, #1
 80041c0:	2b78      	cmp	r3, #120	; 0x78
 80041c2:	d807      	bhi.n	80041d4 <__ssvfiscanf_r+0xe0>
 80041c4:	2b57      	cmp	r3, #87	; 0x57
 80041c6:	d812      	bhi.n	80041ee <__ssvfiscanf_r+0xfa>
 80041c8:	2b25      	cmp	r3, #37	; 0x25
 80041ca:	d03c      	beq.n	8004246 <__ssvfiscanf_r+0x152>
 80041cc:	d836      	bhi.n	800423c <__ssvfiscanf_r+0x148>
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d100      	bne.n	80041d4 <__ssvfiscanf_r+0xe0>
 80041d2:	e0f6      	b.n	80043c2 <__ssvfiscanf_r+0x2ce>
 80041d4:	2303      	movs	r3, #3
 80041d6:	934b      	str	r3, [sp, #300]	; 0x12c
 80041d8:	3307      	adds	r3, #7
 80041da:	9346      	str	r3, [sp, #280]	; 0x118
 80041dc:	e076      	b.n	80042cc <__ssvfiscanf_r+0x1d8>
 80041de:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80041e0:	9f02      	ldr	r7, [sp, #8]
 80041e2:	9303      	str	r3, [sp, #12]
 80041e4:	4343      	muls	r3, r0
 80041e6:	3b30      	subs	r3, #48	; 0x30
 80041e8:	185b      	adds	r3, r3, r1
 80041ea:	9347      	str	r3, [sp, #284]	; 0x11c
 80041ec:	e7d0      	b.n	8004190 <__ssvfiscanf_r+0x9c>
 80041ee:	0018      	movs	r0, r3
 80041f0:	3858      	subs	r0, #88	; 0x58
 80041f2:	2820      	cmp	r0, #32
 80041f4:	d8ee      	bhi.n	80041d4 <__ssvfiscanf_r+0xe0>
 80041f6:	f7fb ff99 	bl	800012c <__gnu_thumb1_case_shi>
 80041fa:	0051      	.short	0x0051
 80041fc:	ffedffed 	.word	0xffedffed
 8004200:	ffed0086 	.word	0xffed0086
 8004204:	ffedffed 	.word	0xffedffed
 8004208:	ffedffed 	.word	0xffedffed
 800420c:	ffedffed 	.word	0xffedffed
 8004210:	00600093 	.word	0x00600093
 8004214:	00240024 	.word	0x00240024
 8004218:	ffed0024 	.word	0xffed0024
 800421c:	ffed0062 	.word	0xffed0062
 8004220:	ffedffed 	.word	0xffedffed
 8004224:	009dffed 	.word	0x009dffed
 8004228:	004b0065 	.word	0x004b0065
 800422c:	ffedffed 	.word	0xffedffed
 8004230:	ffed009b 	.word	0xffed009b
 8004234:	ffed0060 	.word	0xffed0060
 8004238:	0051ffed 	.word	0x0051ffed
 800423c:	3b45      	subs	r3, #69	; 0x45
 800423e:	2b02      	cmp	r3, #2
 8004240:	d8c8      	bhi.n	80041d4 <__ssvfiscanf_r+0xe0>
 8004242:	2305      	movs	r3, #5
 8004244:	e041      	b.n	80042ca <__ssvfiscanf_r+0x1d6>
 8004246:	6863      	ldr	r3, [r4, #4]
 8004248:	2b00      	cmp	r3, #0
 800424a:	dd0f      	ble.n	800426c <__ssvfiscanf_r+0x178>
 800424c:	6823      	ldr	r3, [r4, #0]
 800424e:	9900      	ldr	r1, [sp, #0]
 8004250:	781a      	ldrb	r2, [r3, #0]
 8004252:	428a      	cmp	r2, r1
 8004254:	d000      	beq.n	8004258 <__ssvfiscanf_r+0x164>
 8004256:	e0b7      	b.n	80043c8 <__ssvfiscanf_r+0x2d4>
 8004258:	3301      	adds	r3, #1
 800425a:	6862      	ldr	r2, [r4, #4]
 800425c:	6023      	str	r3, [r4, #0]
 800425e:	9b49      	ldr	r3, [sp, #292]	; 0x124
 8004260:	3a01      	subs	r2, #1
 8004262:	9300      	str	r3, [sp, #0]
 8004264:	3301      	adds	r3, #1
 8004266:	6062      	str	r2, [r4, #4]
 8004268:	9349      	str	r3, [sp, #292]	; 0x124
 800426a:	e76e      	b.n	800414a <__ssvfiscanf_r+0x56>
 800426c:	9a01      	ldr	r2, [sp, #4]
 800426e:	ab45      	add	r3, sp, #276	; 0x114
 8004270:	589b      	ldr	r3, [r3, r2]
 8004272:	0021      	movs	r1, r4
 8004274:	0028      	movs	r0, r5
 8004276:	9302      	str	r3, [sp, #8]
 8004278:	4798      	blx	r3
 800427a:	2800      	cmp	r0, #0
 800427c:	d0e6      	beq.n	800424c <__ssvfiscanf_r+0x158>
 800427e:	9848      	ldr	r0, [sp, #288]	; 0x120
 8004280:	2800      	cmp	r0, #0
 8004282:	d000      	beq.n	8004286 <__ssvfiscanf_r+0x192>
 8004284:	e099      	b.n	80043ba <__ssvfiscanf_r+0x2c6>
 8004286:	3801      	subs	r0, #1
 8004288:	23a7      	movs	r3, #167	; 0xa7
 800428a:	009b      	lsls	r3, r3, #2
 800428c:	449d      	add	sp, r3
 800428e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004290:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8004292:	9200      	str	r2, [sp, #0]
 8004294:	2220      	movs	r2, #32
 8004296:	9900      	ldr	r1, [sp, #0]
 8004298:	430a      	orrs	r2, r1
 800429a:	9245      	str	r2, [sp, #276]	; 0x114
 800429c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800429e:	9200      	str	r2, [sp, #0]
 80042a0:	2280      	movs	r2, #128	; 0x80
 80042a2:	9900      	ldr	r1, [sp, #0]
 80042a4:	0092      	lsls	r2, r2, #2
 80042a6:	430a      	orrs	r2, r1
 80042a8:	9245      	str	r2, [sp, #276]	; 0x114
 80042aa:	2210      	movs	r2, #16
 80042ac:	9246      	str	r2, [sp, #280]	; 0x118
 80042ae:	226e      	movs	r2, #110	; 0x6e
 80042b0:	429a      	cmp	r2, r3
 80042b2:	419b      	sbcs	r3, r3
 80042b4:	425b      	negs	r3, r3
 80042b6:	3303      	adds	r3, #3
 80042b8:	e007      	b.n	80042ca <__ssvfiscanf_r+0x1d6>
 80042ba:	220a      	movs	r2, #10
 80042bc:	e7f6      	b.n	80042ac <__ssvfiscanf_r+0x1b8>
 80042be:	2300      	movs	r3, #0
 80042c0:	9346      	str	r3, [sp, #280]	; 0x118
 80042c2:	e7f8      	b.n	80042b6 <__ssvfiscanf_r+0x1c2>
 80042c4:	2308      	movs	r3, #8
 80042c6:	9346      	str	r3, [sp, #280]	; 0x118
 80042c8:	3b04      	subs	r3, #4
 80042ca:	934b      	str	r3, [sp, #300]	; 0x12c
 80042cc:	6863      	ldr	r3, [r4, #4]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	dd3f      	ble.n	8004352 <__ssvfiscanf_r+0x25e>
 80042d2:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80042d4:	9300      	str	r3, [sp, #0]
 80042d6:	065b      	lsls	r3, r3, #25
 80042d8:	d406      	bmi.n	80042e8 <__ssvfiscanf_r+0x1f4>
 80042da:	6823      	ldr	r3, [r4, #0]
 80042dc:	493e      	ldr	r1, [pc, #248]	; (80043d8 <__ssvfiscanf_r+0x2e4>)
 80042de:	781a      	ldrb	r2, [r3, #0]
 80042e0:	5c8a      	ldrb	r2, [r1, r2]
 80042e2:	2108      	movs	r1, #8
 80042e4:	420a      	tst	r2, r1
 80042e6:	d13e      	bne.n	8004366 <__ssvfiscanf_r+0x272>
 80042e8:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
 80042ea:	2b02      	cmp	r3, #2
 80042ec:	dc51      	bgt.n	8004392 <__ssvfiscanf_r+0x29e>
 80042ee:	0022      	movs	r2, r4
 80042f0:	0028      	movs	r0, r5
 80042f2:	ab04      	add	r3, sp, #16
 80042f4:	a945      	add	r1, sp, #276	; 0x114
 80042f6:	f000 f9f7 	bl	80046e8 <_scanf_chars>
 80042fa:	2801      	cmp	r0, #1
 80042fc:	d064      	beq.n	80043c8 <__ssvfiscanf_r+0x2d4>
 80042fe:	2802      	cmp	r0, #2
 8004300:	d000      	beq.n	8004304 <__ssvfiscanf_r+0x210>
 8004302:	e722      	b.n	800414a <__ssvfiscanf_r+0x56>
 8004304:	e7bb      	b.n	800427e <__ssvfiscanf_r+0x18a>
 8004306:	0031      	movs	r1, r6
 8004308:	a805      	add	r0, sp, #20
 800430a:	f000 fb4f 	bl	80049ac <__sccl>
 800430e:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8004310:	0006      	movs	r6, r0
 8004312:	9300      	str	r3, [sp, #0]
 8004314:	2340      	movs	r3, #64	; 0x40
 8004316:	9a00      	ldr	r2, [sp, #0]
 8004318:	4313      	orrs	r3, r2
 800431a:	9345      	str	r3, [sp, #276]	; 0x114
 800431c:	2301      	movs	r3, #1
 800431e:	e7d4      	b.n	80042ca <__ssvfiscanf_r+0x1d6>
 8004320:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8004322:	9300      	str	r3, [sp, #0]
 8004324:	2340      	movs	r3, #64	; 0x40
 8004326:	9a00      	ldr	r2, [sp, #0]
 8004328:	4313      	orrs	r3, r2
 800432a:	9345      	str	r3, [sp, #276]	; 0x114
 800432c:	2300      	movs	r3, #0
 800432e:	e7cc      	b.n	80042ca <__ssvfiscanf_r+0x1d6>
 8004330:	2302      	movs	r3, #2
 8004332:	e7ca      	b.n	80042ca <__ssvfiscanf_r+0x1d6>
 8004334:	9845      	ldr	r0, [sp, #276]	; 0x114
 8004336:	06c3      	lsls	r3, r0, #27
 8004338:	d500      	bpl.n	800433c <__ssvfiscanf_r+0x248>
 800433a:	e706      	b.n	800414a <__ssvfiscanf_r+0x56>
 800433c:	9b04      	ldr	r3, [sp, #16]
 800433e:	9a49      	ldr	r2, [sp, #292]	; 0x124
 8004340:	1d19      	adds	r1, r3, #4
 8004342:	9104      	str	r1, [sp, #16]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	07c7      	lsls	r7, r0, #31
 8004348:	d501      	bpl.n	800434e <__ssvfiscanf_r+0x25a>
 800434a:	801a      	strh	r2, [r3, #0]
 800434c:	e6fd      	b.n	800414a <__ssvfiscanf_r+0x56>
 800434e:	601a      	str	r2, [r3, #0]
 8004350:	e6fb      	b.n	800414a <__ssvfiscanf_r+0x56>
 8004352:	9a01      	ldr	r2, [sp, #4]
 8004354:	ab45      	add	r3, sp, #276	; 0x114
 8004356:	589b      	ldr	r3, [r3, r2]
 8004358:	0021      	movs	r1, r4
 800435a:	0028      	movs	r0, r5
 800435c:	9300      	str	r3, [sp, #0]
 800435e:	4798      	blx	r3
 8004360:	2800      	cmp	r0, #0
 8004362:	d0b6      	beq.n	80042d2 <__ssvfiscanf_r+0x1de>
 8004364:	e78b      	b.n	800427e <__ssvfiscanf_r+0x18a>
 8004366:	9a49      	ldr	r2, [sp, #292]	; 0x124
 8004368:	9200      	str	r2, [sp, #0]
 800436a:	3201      	adds	r2, #1
 800436c:	9249      	str	r2, [sp, #292]	; 0x124
 800436e:	6862      	ldr	r2, [r4, #4]
 8004370:	3a01      	subs	r2, #1
 8004372:	6062      	str	r2, [r4, #4]
 8004374:	2a00      	cmp	r2, #0
 8004376:	dd02      	ble.n	800437e <__ssvfiscanf_r+0x28a>
 8004378:	3301      	adds	r3, #1
 800437a:	6023      	str	r3, [r4, #0]
 800437c:	e7ad      	b.n	80042da <__ssvfiscanf_r+0x1e6>
 800437e:	9a01      	ldr	r2, [sp, #4]
 8004380:	ab45      	add	r3, sp, #276	; 0x114
 8004382:	589b      	ldr	r3, [r3, r2]
 8004384:	0021      	movs	r1, r4
 8004386:	0028      	movs	r0, r5
 8004388:	9300      	str	r3, [sp, #0]
 800438a:	4798      	blx	r3
 800438c:	2800      	cmp	r0, #0
 800438e:	d0a4      	beq.n	80042da <__ssvfiscanf_r+0x1e6>
 8004390:	e775      	b.n	800427e <__ssvfiscanf_r+0x18a>
 8004392:	2b04      	cmp	r3, #4
 8004394:	dc06      	bgt.n	80043a4 <__ssvfiscanf_r+0x2b0>
 8004396:	0022      	movs	r2, r4
 8004398:	0028      	movs	r0, r5
 800439a:	ab04      	add	r3, sp, #16
 800439c:	a945      	add	r1, sp, #276	; 0x114
 800439e:	f000 fa01 	bl	80047a4 <_scanf_i>
 80043a2:	e7aa      	b.n	80042fa <__ssvfiscanf_r+0x206>
 80043a4:	4b0e      	ldr	r3, [pc, #56]	; (80043e0 <__ssvfiscanf_r+0x2ec>)
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d100      	bne.n	80043ac <__ssvfiscanf_r+0x2b8>
 80043aa:	e6ce      	b.n	800414a <__ssvfiscanf_r+0x56>
 80043ac:	0022      	movs	r2, r4
 80043ae:	0028      	movs	r0, r5
 80043b0:	ab04      	add	r3, sp, #16
 80043b2:	a945      	add	r1, sp, #276	; 0x114
 80043b4:	e000      	b.n	80043b8 <__ssvfiscanf_r+0x2c4>
 80043b6:	bf00      	nop
 80043b8:	e79f      	b.n	80042fa <__ssvfiscanf_r+0x206>
 80043ba:	89a3      	ldrh	r3, [r4, #12]
 80043bc:	065b      	lsls	r3, r3, #25
 80043be:	d400      	bmi.n	80043c2 <__ssvfiscanf_r+0x2ce>
 80043c0:	e762      	b.n	8004288 <__ssvfiscanf_r+0x194>
 80043c2:	2001      	movs	r0, #1
 80043c4:	4240      	negs	r0, r0
 80043c6:	e75f      	b.n	8004288 <__ssvfiscanf_r+0x194>
 80043c8:	9848      	ldr	r0, [sp, #288]	; 0x120
 80043ca:	e75d      	b.n	8004288 <__ssvfiscanf_r+0x194>
 80043cc:	fffffd64 	.word	0xfffffd64
 80043d0:	0800403d 	.word	0x0800403d
 80043d4:	080040b5 	.word	0x080040b5
 80043d8:	0800561d 	.word	0x0800561d
 80043dc:	08005723 	.word	0x08005723
 80043e0:	00000000 	.word	0x00000000

080043e4 <_printf_common>:
 80043e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80043e6:	0015      	movs	r5, r2
 80043e8:	9301      	str	r3, [sp, #4]
 80043ea:	688a      	ldr	r2, [r1, #8]
 80043ec:	690b      	ldr	r3, [r1, #16]
 80043ee:	000c      	movs	r4, r1
 80043f0:	9000      	str	r0, [sp, #0]
 80043f2:	4293      	cmp	r3, r2
 80043f4:	da00      	bge.n	80043f8 <_printf_common+0x14>
 80043f6:	0013      	movs	r3, r2
 80043f8:	0022      	movs	r2, r4
 80043fa:	602b      	str	r3, [r5, #0]
 80043fc:	3243      	adds	r2, #67	; 0x43
 80043fe:	7812      	ldrb	r2, [r2, #0]
 8004400:	2a00      	cmp	r2, #0
 8004402:	d001      	beq.n	8004408 <_printf_common+0x24>
 8004404:	3301      	adds	r3, #1
 8004406:	602b      	str	r3, [r5, #0]
 8004408:	6823      	ldr	r3, [r4, #0]
 800440a:	069b      	lsls	r3, r3, #26
 800440c:	d502      	bpl.n	8004414 <_printf_common+0x30>
 800440e:	682b      	ldr	r3, [r5, #0]
 8004410:	3302      	adds	r3, #2
 8004412:	602b      	str	r3, [r5, #0]
 8004414:	6822      	ldr	r2, [r4, #0]
 8004416:	2306      	movs	r3, #6
 8004418:	0017      	movs	r7, r2
 800441a:	401f      	ands	r7, r3
 800441c:	421a      	tst	r2, r3
 800441e:	d027      	beq.n	8004470 <_printf_common+0x8c>
 8004420:	0023      	movs	r3, r4
 8004422:	3343      	adds	r3, #67	; 0x43
 8004424:	781b      	ldrb	r3, [r3, #0]
 8004426:	1e5a      	subs	r2, r3, #1
 8004428:	4193      	sbcs	r3, r2
 800442a:	6822      	ldr	r2, [r4, #0]
 800442c:	0692      	lsls	r2, r2, #26
 800442e:	d430      	bmi.n	8004492 <_printf_common+0xae>
 8004430:	0022      	movs	r2, r4
 8004432:	9901      	ldr	r1, [sp, #4]
 8004434:	9800      	ldr	r0, [sp, #0]
 8004436:	9e08      	ldr	r6, [sp, #32]
 8004438:	3243      	adds	r2, #67	; 0x43
 800443a:	47b0      	blx	r6
 800443c:	1c43      	adds	r3, r0, #1
 800443e:	d025      	beq.n	800448c <_printf_common+0xa8>
 8004440:	2306      	movs	r3, #6
 8004442:	6820      	ldr	r0, [r4, #0]
 8004444:	682a      	ldr	r2, [r5, #0]
 8004446:	68e1      	ldr	r1, [r4, #12]
 8004448:	2500      	movs	r5, #0
 800444a:	4003      	ands	r3, r0
 800444c:	2b04      	cmp	r3, #4
 800444e:	d103      	bne.n	8004458 <_printf_common+0x74>
 8004450:	1a8d      	subs	r5, r1, r2
 8004452:	43eb      	mvns	r3, r5
 8004454:	17db      	asrs	r3, r3, #31
 8004456:	401d      	ands	r5, r3
 8004458:	68a3      	ldr	r3, [r4, #8]
 800445a:	6922      	ldr	r2, [r4, #16]
 800445c:	4293      	cmp	r3, r2
 800445e:	dd01      	ble.n	8004464 <_printf_common+0x80>
 8004460:	1a9b      	subs	r3, r3, r2
 8004462:	18ed      	adds	r5, r5, r3
 8004464:	2700      	movs	r7, #0
 8004466:	42bd      	cmp	r5, r7
 8004468:	d120      	bne.n	80044ac <_printf_common+0xc8>
 800446a:	2000      	movs	r0, #0
 800446c:	e010      	b.n	8004490 <_printf_common+0xac>
 800446e:	3701      	adds	r7, #1
 8004470:	68e3      	ldr	r3, [r4, #12]
 8004472:	682a      	ldr	r2, [r5, #0]
 8004474:	1a9b      	subs	r3, r3, r2
 8004476:	42bb      	cmp	r3, r7
 8004478:	ddd2      	ble.n	8004420 <_printf_common+0x3c>
 800447a:	0022      	movs	r2, r4
 800447c:	2301      	movs	r3, #1
 800447e:	9901      	ldr	r1, [sp, #4]
 8004480:	9800      	ldr	r0, [sp, #0]
 8004482:	9e08      	ldr	r6, [sp, #32]
 8004484:	3219      	adds	r2, #25
 8004486:	47b0      	blx	r6
 8004488:	1c43      	adds	r3, r0, #1
 800448a:	d1f0      	bne.n	800446e <_printf_common+0x8a>
 800448c:	2001      	movs	r0, #1
 800448e:	4240      	negs	r0, r0
 8004490:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004492:	2030      	movs	r0, #48	; 0x30
 8004494:	18e1      	adds	r1, r4, r3
 8004496:	3143      	adds	r1, #67	; 0x43
 8004498:	7008      	strb	r0, [r1, #0]
 800449a:	0021      	movs	r1, r4
 800449c:	1c5a      	adds	r2, r3, #1
 800449e:	3145      	adds	r1, #69	; 0x45
 80044a0:	7809      	ldrb	r1, [r1, #0]
 80044a2:	18a2      	adds	r2, r4, r2
 80044a4:	3243      	adds	r2, #67	; 0x43
 80044a6:	3302      	adds	r3, #2
 80044a8:	7011      	strb	r1, [r2, #0]
 80044aa:	e7c1      	b.n	8004430 <_printf_common+0x4c>
 80044ac:	0022      	movs	r2, r4
 80044ae:	2301      	movs	r3, #1
 80044b0:	9901      	ldr	r1, [sp, #4]
 80044b2:	9800      	ldr	r0, [sp, #0]
 80044b4:	9e08      	ldr	r6, [sp, #32]
 80044b6:	321a      	adds	r2, #26
 80044b8:	47b0      	blx	r6
 80044ba:	1c43      	adds	r3, r0, #1
 80044bc:	d0e6      	beq.n	800448c <_printf_common+0xa8>
 80044be:	3701      	adds	r7, #1
 80044c0:	e7d1      	b.n	8004466 <_printf_common+0x82>
	...

080044c4 <_printf_i>:
 80044c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80044c6:	b08b      	sub	sp, #44	; 0x2c
 80044c8:	9206      	str	r2, [sp, #24]
 80044ca:	000a      	movs	r2, r1
 80044cc:	3243      	adds	r2, #67	; 0x43
 80044ce:	9307      	str	r3, [sp, #28]
 80044d0:	9005      	str	r0, [sp, #20]
 80044d2:	9204      	str	r2, [sp, #16]
 80044d4:	7e0a      	ldrb	r2, [r1, #24]
 80044d6:	000c      	movs	r4, r1
 80044d8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80044da:	2a78      	cmp	r2, #120	; 0x78
 80044dc:	d806      	bhi.n	80044ec <_printf_i+0x28>
 80044de:	2a62      	cmp	r2, #98	; 0x62
 80044e0:	d808      	bhi.n	80044f4 <_printf_i+0x30>
 80044e2:	2a00      	cmp	r2, #0
 80044e4:	d100      	bne.n	80044e8 <_printf_i+0x24>
 80044e6:	e0c0      	b.n	800466a <_printf_i+0x1a6>
 80044e8:	2a58      	cmp	r2, #88	; 0x58
 80044ea:	d052      	beq.n	8004592 <_printf_i+0xce>
 80044ec:	0026      	movs	r6, r4
 80044ee:	3642      	adds	r6, #66	; 0x42
 80044f0:	7032      	strb	r2, [r6, #0]
 80044f2:	e022      	b.n	800453a <_printf_i+0x76>
 80044f4:	0010      	movs	r0, r2
 80044f6:	3863      	subs	r0, #99	; 0x63
 80044f8:	2815      	cmp	r0, #21
 80044fa:	d8f7      	bhi.n	80044ec <_printf_i+0x28>
 80044fc:	f7fb fe16 	bl	800012c <__gnu_thumb1_case_shi>
 8004500:	001f0016 	.word	0x001f0016
 8004504:	fff6fff6 	.word	0xfff6fff6
 8004508:	fff6fff6 	.word	0xfff6fff6
 800450c:	fff6001f 	.word	0xfff6001f
 8004510:	fff6fff6 	.word	0xfff6fff6
 8004514:	00a8fff6 	.word	0x00a8fff6
 8004518:	009a0036 	.word	0x009a0036
 800451c:	fff6fff6 	.word	0xfff6fff6
 8004520:	fff600b9 	.word	0xfff600b9
 8004524:	fff60036 	.word	0xfff60036
 8004528:	009efff6 	.word	0x009efff6
 800452c:	0026      	movs	r6, r4
 800452e:	681a      	ldr	r2, [r3, #0]
 8004530:	3642      	adds	r6, #66	; 0x42
 8004532:	1d11      	adds	r1, r2, #4
 8004534:	6019      	str	r1, [r3, #0]
 8004536:	6813      	ldr	r3, [r2, #0]
 8004538:	7033      	strb	r3, [r6, #0]
 800453a:	2301      	movs	r3, #1
 800453c:	e0a7      	b.n	800468e <_printf_i+0x1ca>
 800453e:	6808      	ldr	r0, [r1, #0]
 8004540:	6819      	ldr	r1, [r3, #0]
 8004542:	1d0a      	adds	r2, r1, #4
 8004544:	0605      	lsls	r5, r0, #24
 8004546:	d50b      	bpl.n	8004560 <_printf_i+0x9c>
 8004548:	680d      	ldr	r5, [r1, #0]
 800454a:	601a      	str	r2, [r3, #0]
 800454c:	2d00      	cmp	r5, #0
 800454e:	da03      	bge.n	8004558 <_printf_i+0x94>
 8004550:	232d      	movs	r3, #45	; 0x2d
 8004552:	9a04      	ldr	r2, [sp, #16]
 8004554:	426d      	negs	r5, r5
 8004556:	7013      	strb	r3, [r2, #0]
 8004558:	4b61      	ldr	r3, [pc, #388]	; (80046e0 <_printf_i+0x21c>)
 800455a:	270a      	movs	r7, #10
 800455c:	9303      	str	r3, [sp, #12]
 800455e:	e032      	b.n	80045c6 <_printf_i+0x102>
 8004560:	680d      	ldr	r5, [r1, #0]
 8004562:	601a      	str	r2, [r3, #0]
 8004564:	0641      	lsls	r1, r0, #25
 8004566:	d5f1      	bpl.n	800454c <_printf_i+0x88>
 8004568:	b22d      	sxth	r5, r5
 800456a:	e7ef      	b.n	800454c <_printf_i+0x88>
 800456c:	680d      	ldr	r5, [r1, #0]
 800456e:	6819      	ldr	r1, [r3, #0]
 8004570:	1d08      	adds	r0, r1, #4
 8004572:	6018      	str	r0, [r3, #0]
 8004574:	062e      	lsls	r6, r5, #24
 8004576:	d501      	bpl.n	800457c <_printf_i+0xb8>
 8004578:	680d      	ldr	r5, [r1, #0]
 800457a:	e003      	b.n	8004584 <_printf_i+0xc0>
 800457c:	066d      	lsls	r5, r5, #25
 800457e:	d5fb      	bpl.n	8004578 <_printf_i+0xb4>
 8004580:	680d      	ldr	r5, [r1, #0]
 8004582:	b2ad      	uxth	r5, r5
 8004584:	4b56      	ldr	r3, [pc, #344]	; (80046e0 <_printf_i+0x21c>)
 8004586:	270a      	movs	r7, #10
 8004588:	9303      	str	r3, [sp, #12]
 800458a:	2a6f      	cmp	r2, #111	; 0x6f
 800458c:	d117      	bne.n	80045be <_printf_i+0xfa>
 800458e:	2708      	movs	r7, #8
 8004590:	e015      	b.n	80045be <_printf_i+0xfa>
 8004592:	3145      	adds	r1, #69	; 0x45
 8004594:	700a      	strb	r2, [r1, #0]
 8004596:	4a52      	ldr	r2, [pc, #328]	; (80046e0 <_printf_i+0x21c>)
 8004598:	9203      	str	r2, [sp, #12]
 800459a:	681a      	ldr	r2, [r3, #0]
 800459c:	6821      	ldr	r1, [r4, #0]
 800459e:	ca20      	ldmia	r2!, {r5}
 80045a0:	601a      	str	r2, [r3, #0]
 80045a2:	0608      	lsls	r0, r1, #24
 80045a4:	d550      	bpl.n	8004648 <_printf_i+0x184>
 80045a6:	07cb      	lsls	r3, r1, #31
 80045a8:	d502      	bpl.n	80045b0 <_printf_i+0xec>
 80045aa:	2320      	movs	r3, #32
 80045ac:	4319      	orrs	r1, r3
 80045ae:	6021      	str	r1, [r4, #0]
 80045b0:	2710      	movs	r7, #16
 80045b2:	2d00      	cmp	r5, #0
 80045b4:	d103      	bne.n	80045be <_printf_i+0xfa>
 80045b6:	2320      	movs	r3, #32
 80045b8:	6822      	ldr	r2, [r4, #0]
 80045ba:	439a      	bics	r2, r3
 80045bc:	6022      	str	r2, [r4, #0]
 80045be:	0023      	movs	r3, r4
 80045c0:	2200      	movs	r2, #0
 80045c2:	3343      	adds	r3, #67	; 0x43
 80045c4:	701a      	strb	r2, [r3, #0]
 80045c6:	6863      	ldr	r3, [r4, #4]
 80045c8:	60a3      	str	r3, [r4, #8]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	db03      	blt.n	80045d6 <_printf_i+0x112>
 80045ce:	2204      	movs	r2, #4
 80045d0:	6821      	ldr	r1, [r4, #0]
 80045d2:	4391      	bics	r1, r2
 80045d4:	6021      	str	r1, [r4, #0]
 80045d6:	2d00      	cmp	r5, #0
 80045d8:	d102      	bne.n	80045e0 <_printf_i+0x11c>
 80045da:	9e04      	ldr	r6, [sp, #16]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d00c      	beq.n	80045fa <_printf_i+0x136>
 80045e0:	9e04      	ldr	r6, [sp, #16]
 80045e2:	0028      	movs	r0, r5
 80045e4:	0039      	movs	r1, r7
 80045e6:	f7fb fe31 	bl	800024c <__aeabi_uidivmod>
 80045ea:	9b03      	ldr	r3, [sp, #12]
 80045ec:	3e01      	subs	r6, #1
 80045ee:	5c5b      	ldrb	r3, [r3, r1]
 80045f0:	7033      	strb	r3, [r6, #0]
 80045f2:	002b      	movs	r3, r5
 80045f4:	0005      	movs	r5, r0
 80045f6:	429f      	cmp	r7, r3
 80045f8:	d9f3      	bls.n	80045e2 <_printf_i+0x11e>
 80045fa:	2f08      	cmp	r7, #8
 80045fc:	d109      	bne.n	8004612 <_printf_i+0x14e>
 80045fe:	6823      	ldr	r3, [r4, #0]
 8004600:	07db      	lsls	r3, r3, #31
 8004602:	d506      	bpl.n	8004612 <_printf_i+0x14e>
 8004604:	6863      	ldr	r3, [r4, #4]
 8004606:	6922      	ldr	r2, [r4, #16]
 8004608:	4293      	cmp	r3, r2
 800460a:	dc02      	bgt.n	8004612 <_printf_i+0x14e>
 800460c:	2330      	movs	r3, #48	; 0x30
 800460e:	3e01      	subs	r6, #1
 8004610:	7033      	strb	r3, [r6, #0]
 8004612:	9b04      	ldr	r3, [sp, #16]
 8004614:	1b9b      	subs	r3, r3, r6
 8004616:	6123      	str	r3, [r4, #16]
 8004618:	9b07      	ldr	r3, [sp, #28]
 800461a:	0021      	movs	r1, r4
 800461c:	9300      	str	r3, [sp, #0]
 800461e:	9805      	ldr	r0, [sp, #20]
 8004620:	9b06      	ldr	r3, [sp, #24]
 8004622:	aa09      	add	r2, sp, #36	; 0x24
 8004624:	f7ff fede 	bl	80043e4 <_printf_common>
 8004628:	1c43      	adds	r3, r0, #1
 800462a:	d135      	bne.n	8004698 <_printf_i+0x1d4>
 800462c:	2001      	movs	r0, #1
 800462e:	4240      	negs	r0, r0
 8004630:	b00b      	add	sp, #44	; 0x2c
 8004632:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004634:	2220      	movs	r2, #32
 8004636:	6809      	ldr	r1, [r1, #0]
 8004638:	430a      	orrs	r2, r1
 800463a:	6022      	str	r2, [r4, #0]
 800463c:	0022      	movs	r2, r4
 800463e:	2178      	movs	r1, #120	; 0x78
 8004640:	3245      	adds	r2, #69	; 0x45
 8004642:	7011      	strb	r1, [r2, #0]
 8004644:	4a27      	ldr	r2, [pc, #156]	; (80046e4 <_printf_i+0x220>)
 8004646:	e7a7      	b.n	8004598 <_printf_i+0xd4>
 8004648:	0648      	lsls	r0, r1, #25
 800464a:	d5ac      	bpl.n	80045a6 <_printf_i+0xe2>
 800464c:	b2ad      	uxth	r5, r5
 800464e:	e7aa      	b.n	80045a6 <_printf_i+0xe2>
 8004650:	681a      	ldr	r2, [r3, #0]
 8004652:	680d      	ldr	r5, [r1, #0]
 8004654:	1d10      	adds	r0, r2, #4
 8004656:	6949      	ldr	r1, [r1, #20]
 8004658:	6018      	str	r0, [r3, #0]
 800465a:	6813      	ldr	r3, [r2, #0]
 800465c:	062e      	lsls	r6, r5, #24
 800465e:	d501      	bpl.n	8004664 <_printf_i+0x1a0>
 8004660:	6019      	str	r1, [r3, #0]
 8004662:	e002      	b.n	800466a <_printf_i+0x1a6>
 8004664:	066d      	lsls	r5, r5, #25
 8004666:	d5fb      	bpl.n	8004660 <_printf_i+0x19c>
 8004668:	8019      	strh	r1, [r3, #0]
 800466a:	2300      	movs	r3, #0
 800466c:	9e04      	ldr	r6, [sp, #16]
 800466e:	6123      	str	r3, [r4, #16]
 8004670:	e7d2      	b.n	8004618 <_printf_i+0x154>
 8004672:	681a      	ldr	r2, [r3, #0]
 8004674:	1d11      	adds	r1, r2, #4
 8004676:	6019      	str	r1, [r3, #0]
 8004678:	6816      	ldr	r6, [r2, #0]
 800467a:	2100      	movs	r1, #0
 800467c:	0030      	movs	r0, r6
 800467e:	6862      	ldr	r2, [r4, #4]
 8004680:	f000 fb38 	bl	8004cf4 <memchr>
 8004684:	2800      	cmp	r0, #0
 8004686:	d001      	beq.n	800468c <_printf_i+0x1c8>
 8004688:	1b80      	subs	r0, r0, r6
 800468a:	6060      	str	r0, [r4, #4]
 800468c:	6863      	ldr	r3, [r4, #4]
 800468e:	6123      	str	r3, [r4, #16]
 8004690:	2300      	movs	r3, #0
 8004692:	9a04      	ldr	r2, [sp, #16]
 8004694:	7013      	strb	r3, [r2, #0]
 8004696:	e7bf      	b.n	8004618 <_printf_i+0x154>
 8004698:	6923      	ldr	r3, [r4, #16]
 800469a:	0032      	movs	r2, r6
 800469c:	9906      	ldr	r1, [sp, #24]
 800469e:	9805      	ldr	r0, [sp, #20]
 80046a0:	9d07      	ldr	r5, [sp, #28]
 80046a2:	47a8      	blx	r5
 80046a4:	1c43      	adds	r3, r0, #1
 80046a6:	d0c1      	beq.n	800462c <_printf_i+0x168>
 80046a8:	6823      	ldr	r3, [r4, #0]
 80046aa:	079b      	lsls	r3, r3, #30
 80046ac:	d415      	bmi.n	80046da <_printf_i+0x216>
 80046ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80046b0:	68e0      	ldr	r0, [r4, #12]
 80046b2:	4298      	cmp	r0, r3
 80046b4:	dabc      	bge.n	8004630 <_printf_i+0x16c>
 80046b6:	0018      	movs	r0, r3
 80046b8:	e7ba      	b.n	8004630 <_printf_i+0x16c>
 80046ba:	0022      	movs	r2, r4
 80046bc:	2301      	movs	r3, #1
 80046be:	9906      	ldr	r1, [sp, #24]
 80046c0:	9805      	ldr	r0, [sp, #20]
 80046c2:	9e07      	ldr	r6, [sp, #28]
 80046c4:	3219      	adds	r2, #25
 80046c6:	47b0      	blx	r6
 80046c8:	1c43      	adds	r3, r0, #1
 80046ca:	d0af      	beq.n	800462c <_printf_i+0x168>
 80046cc:	3501      	adds	r5, #1
 80046ce:	68e3      	ldr	r3, [r4, #12]
 80046d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80046d2:	1a9b      	subs	r3, r3, r2
 80046d4:	42ab      	cmp	r3, r5
 80046d6:	dcf0      	bgt.n	80046ba <_printf_i+0x1f6>
 80046d8:	e7e9      	b.n	80046ae <_printf_i+0x1ea>
 80046da:	2500      	movs	r5, #0
 80046dc:	e7f7      	b.n	80046ce <_printf_i+0x20a>
 80046de:	46c0      	nop			; (mov r8, r8)
 80046e0:	0800572e 	.word	0x0800572e
 80046e4:	0800573f 	.word	0x0800573f

080046e8 <_scanf_chars>:
 80046e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80046ea:	0015      	movs	r5, r2
 80046ec:	688a      	ldr	r2, [r1, #8]
 80046ee:	000c      	movs	r4, r1
 80046f0:	9001      	str	r0, [sp, #4]
 80046f2:	2a00      	cmp	r2, #0
 80046f4:	d105      	bne.n	8004702 <_scanf_chars+0x1a>
 80046f6:	6989      	ldr	r1, [r1, #24]
 80046f8:	3201      	adds	r2, #1
 80046fa:	2900      	cmp	r1, #0
 80046fc:	d000      	beq.n	8004700 <_scanf_chars+0x18>
 80046fe:	3a02      	subs	r2, #2
 8004700:	60a2      	str	r2, [r4, #8]
 8004702:	6822      	ldr	r2, [r4, #0]
 8004704:	06d2      	lsls	r2, r2, #27
 8004706:	d403      	bmi.n	8004710 <_scanf_chars+0x28>
 8004708:	681a      	ldr	r2, [r3, #0]
 800470a:	1d11      	adds	r1, r2, #4
 800470c:	6019      	str	r1, [r3, #0]
 800470e:	6817      	ldr	r7, [r2, #0]
 8004710:	2600      	movs	r6, #0
 8004712:	69a0      	ldr	r0, [r4, #24]
 8004714:	2800      	cmp	r0, #0
 8004716:	d013      	beq.n	8004740 <_scanf_chars+0x58>
 8004718:	2801      	cmp	r0, #1
 800471a:	d108      	bne.n	800472e <_scanf_chars+0x46>
 800471c:	682b      	ldr	r3, [r5, #0]
 800471e:	6962      	ldr	r2, [r4, #20]
 8004720:	781b      	ldrb	r3, [r3, #0]
 8004722:	5cd3      	ldrb	r3, [r2, r3]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d10b      	bne.n	8004740 <_scanf_chars+0x58>
 8004728:	2e00      	cmp	r6, #0
 800472a:	d127      	bne.n	800477c <_scanf_chars+0x94>
 800472c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800472e:	2802      	cmp	r0, #2
 8004730:	d124      	bne.n	800477c <_scanf_chars+0x94>
 8004732:	682b      	ldr	r3, [r5, #0]
 8004734:	4a1a      	ldr	r2, [pc, #104]	; (80047a0 <_scanf_chars+0xb8>)
 8004736:	781b      	ldrb	r3, [r3, #0]
 8004738:	5cd3      	ldrb	r3, [r2, r3]
 800473a:	2208      	movs	r2, #8
 800473c:	4213      	tst	r3, r2
 800473e:	d11d      	bne.n	800477c <_scanf_chars+0x94>
 8004740:	2210      	movs	r2, #16
 8004742:	6823      	ldr	r3, [r4, #0]
 8004744:	3601      	adds	r6, #1
 8004746:	4213      	tst	r3, r2
 8004748:	d103      	bne.n	8004752 <_scanf_chars+0x6a>
 800474a:	682b      	ldr	r3, [r5, #0]
 800474c:	781b      	ldrb	r3, [r3, #0]
 800474e:	703b      	strb	r3, [r7, #0]
 8004750:	3701      	adds	r7, #1
 8004752:	682a      	ldr	r2, [r5, #0]
 8004754:	686b      	ldr	r3, [r5, #4]
 8004756:	3201      	adds	r2, #1
 8004758:	602a      	str	r2, [r5, #0]
 800475a:	68a2      	ldr	r2, [r4, #8]
 800475c:	3b01      	subs	r3, #1
 800475e:	3a01      	subs	r2, #1
 8004760:	606b      	str	r3, [r5, #4]
 8004762:	60a2      	str	r2, [r4, #8]
 8004764:	2a00      	cmp	r2, #0
 8004766:	d009      	beq.n	800477c <_scanf_chars+0x94>
 8004768:	2b00      	cmp	r3, #0
 800476a:	dcd2      	bgt.n	8004712 <_scanf_chars+0x2a>
 800476c:	23c0      	movs	r3, #192	; 0xc0
 800476e:	005b      	lsls	r3, r3, #1
 8004770:	0029      	movs	r1, r5
 8004772:	58e3      	ldr	r3, [r4, r3]
 8004774:	9801      	ldr	r0, [sp, #4]
 8004776:	4798      	blx	r3
 8004778:	2800      	cmp	r0, #0
 800477a:	d0ca      	beq.n	8004712 <_scanf_chars+0x2a>
 800477c:	6822      	ldr	r2, [r4, #0]
 800477e:	2310      	movs	r3, #16
 8004780:	0011      	movs	r1, r2
 8004782:	4019      	ands	r1, r3
 8004784:	421a      	tst	r2, r3
 8004786:	d106      	bne.n	8004796 <_scanf_chars+0xae>
 8004788:	68e3      	ldr	r3, [r4, #12]
 800478a:	3301      	adds	r3, #1
 800478c:	60e3      	str	r3, [r4, #12]
 800478e:	69a3      	ldr	r3, [r4, #24]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d000      	beq.n	8004796 <_scanf_chars+0xae>
 8004794:	7039      	strb	r1, [r7, #0]
 8004796:	6923      	ldr	r3, [r4, #16]
 8004798:	2000      	movs	r0, #0
 800479a:	199e      	adds	r6, r3, r6
 800479c:	6126      	str	r6, [r4, #16]
 800479e:	e7c5      	b.n	800472c <_scanf_chars+0x44>
 80047a0:	0800561d 	.word	0x0800561d

080047a4 <_scanf_i>:
 80047a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80047a6:	000c      	movs	r4, r1
 80047a8:	b08d      	sub	sp, #52	; 0x34
 80047aa:	9302      	str	r3, [sp, #8]
 80047ac:	4b79      	ldr	r3, [pc, #484]	; (8004994 <_scanf_i+0x1f0>)
 80047ae:	0016      	movs	r6, r2
 80047b0:	9005      	str	r0, [sp, #20]
 80047b2:	aa09      	add	r2, sp, #36	; 0x24
 80047b4:	cb23      	ldmia	r3!, {r0, r1, r5}
 80047b6:	c223      	stmia	r2!, {r0, r1, r5}
 80047b8:	4b77      	ldr	r3, [pc, #476]	; (8004998 <_scanf_i+0x1f4>)
 80047ba:	9306      	str	r3, [sp, #24]
 80047bc:	69a3      	ldr	r3, [r4, #24]
 80047be:	2b03      	cmp	r3, #3
 80047c0:	d001      	beq.n	80047c6 <_scanf_i+0x22>
 80047c2:	4b76      	ldr	r3, [pc, #472]	; (800499c <_scanf_i+0x1f8>)
 80047c4:	9306      	str	r3, [sp, #24]
 80047c6:	22ae      	movs	r2, #174	; 0xae
 80047c8:	2000      	movs	r0, #0
 80047ca:	68a3      	ldr	r3, [r4, #8]
 80047cc:	0052      	lsls	r2, r2, #1
 80047ce:	1e59      	subs	r1, r3, #1
 80047d0:	9004      	str	r0, [sp, #16]
 80047d2:	4291      	cmp	r1, r2
 80047d4:	d905      	bls.n	80047e2 <_scanf_i+0x3e>
 80047d6:	3b5e      	subs	r3, #94	; 0x5e
 80047d8:	3bff      	subs	r3, #255	; 0xff
 80047da:	9304      	str	r3, [sp, #16]
 80047dc:	235e      	movs	r3, #94	; 0x5e
 80047de:	33ff      	adds	r3, #255	; 0xff
 80047e0:	60a3      	str	r3, [r4, #8]
 80047e2:	0023      	movs	r3, r4
 80047e4:	331c      	adds	r3, #28
 80047e6:	9301      	str	r3, [sp, #4]
 80047e8:	23d0      	movs	r3, #208	; 0xd0
 80047ea:	2700      	movs	r7, #0
 80047ec:	6822      	ldr	r2, [r4, #0]
 80047ee:	011b      	lsls	r3, r3, #4
 80047f0:	4313      	orrs	r3, r2
 80047f2:	6023      	str	r3, [r4, #0]
 80047f4:	9b01      	ldr	r3, [sp, #4]
 80047f6:	9303      	str	r3, [sp, #12]
 80047f8:	6833      	ldr	r3, [r6, #0]
 80047fa:	a809      	add	r0, sp, #36	; 0x24
 80047fc:	7819      	ldrb	r1, [r3, #0]
 80047fe:	00bb      	lsls	r3, r7, #2
 8004800:	2202      	movs	r2, #2
 8004802:	5818      	ldr	r0, [r3, r0]
 8004804:	f000 fa76 	bl	8004cf4 <memchr>
 8004808:	2800      	cmp	r0, #0
 800480a:	d02b      	beq.n	8004864 <_scanf_i+0xc0>
 800480c:	2f01      	cmp	r7, #1
 800480e:	d162      	bne.n	80048d6 <_scanf_i+0x132>
 8004810:	6863      	ldr	r3, [r4, #4]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d106      	bne.n	8004824 <_scanf_i+0x80>
 8004816:	3308      	adds	r3, #8
 8004818:	6822      	ldr	r2, [r4, #0]
 800481a:	6063      	str	r3, [r4, #4]
 800481c:	33f9      	adds	r3, #249	; 0xf9
 800481e:	33ff      	adds	r3, #255	; 0xff
 8004820:	4313      	orrs	r3, r2
 8004822:	6023      	str	r3, [r4, #0]
 8004824:	4b5e      	ldr	r3, [pc, #376]	; (80049a0 <_scanf_i+0x1fc>)
 8004826:	6822      	ldr	r2, [r4, #0]
 8004828:	4013      	ands	r3, r2
 800482a:	6023      	str	r3, [r4, #0]
 800482c:	68a3      	ldr	r3, [r4, #8]
 800482e:	1e5a      	subs	r2, r3, #1
 8004830:	60a2      	str	r2, [r4, #8]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d016      	beq.n	8004864 <_scanf_i+0xc0>
 8004836:	6833      	ldr	r3, [r6, #0]
 8004838:	1c5a      	adds	r2, r3, #1
 800483a:	6032      	str	r2, [r6, #0]
 800483c:	781b      	ldrb	r3, [r3, #0]
 800483e:	9a03      	ldr	r2, [sp, #12]
 8004840:	7013      	strb	r3, [r2, #0]
 8004842:	6873      	ldr	r3, [r6, #4]
 8004844:	1c55      	adds	r5, r2, #1
 8004846:	3b01      	subs	r3, #1
 8004848:	6073      	str	r3, [r6, #4]
 800484a:	9503      	str	r5, [sp, #12]
 800484c:	2b00      	cmp	r3, #0
 800484e:	dc09      	bgt.n	8004864 <_scanf_i+0xc0>
 8004850:	23c0      	movs	r3, #192	; 0xc0
 8004852:	005b      	lsls	r3, r3, #1
 8004854:	58e3      	ldr	r3, [r4, r3]
 8004856:	0031      	movs	r1, r6
 8004858:	9805      	ldr	r0, [sp, #20]
 800485a:	9307      	str	r3, [sp, #28]
 800485c:	4798      	blx	r3
 800485e:	2800      	cmp	r0, #0
 8004860:	d000      	beq.n	8004864 <_scanf_i+0xc0>
 8004862:	e081      	b.n	8004968 <_scanf_i+0x1c4>
 8004864:	3701      	adds	r7, #1
 8004866:	2f03      	cmp	r7, #3
 8004868:	d1c6      	bne.n	80047f8 <_scanf_i+0x54>
 800486a:	6863      	ldr	r3, [r4, #4]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d101      	bne.n	8004874 <_scanf_i+0xd0>
 8004870:	330a      	adds	r3, #10
 8004872:	6063      	str	r3, [r4, #4]
 8004874:	2110      	movs	r1, #16
 8004876:	2700      	movs	r7, #0
 8004878:	6863      	ldr	r3, [r4, #4]
 800487a:	6960      	ldr	r0, [r4, #20]
 800487c:	1ac9      	subs	r1, r1, r3
 800487e:	4b49      	ldr	r3, [pc, #292]	; (80049a4 <_scanf_i+0x200>)
 8004880:	18c9      	adds	r1, r1, r3
 8004882:	f000 f893 	bl	80049ac <__sccl>
 8004886:	9d03      	ldr	r5, [sp, #12]
 8004888:	68a3      	ldr	r3, [r4, #8]
 800488a:	6822      	ldr	r2, [r4, #0]
 800488c:	9303      	str	r3, [sp, #12]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d041      	beq.n	8004916 <_scanf_i+0x172>
 8004892:	6831      	ldr	r1, [r6, #0]
 8004894:	6963      	ldr	r3, [r4, #20]
 8004896:	7808      	ldrb	r0, [r1, #0]
 8004898:	5c1b      	ldrb	r3, [r3, r0]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d03b      	beq.n	8004916 <_scanf_i+0x172>
 800489e:	2830      	cmp	r0, #48	; 0x30
 80048a0:	d129      	bne.n	80048f6 <_scanf_i+0x152>
 80048a2:	2380      	movs	r3, #128	; 0x80
 80048a4:	011b      	lsls	r3, r3, #4
 80048a6:	421a      	tst	r2, r3
 80048a8:	d025      	beq.n	80048f6 <_scanf_i+0x152>
 80048aa:	9b04      	ldr	r3, [sp, #16]
 80048ac:	3701      	adds	r7, #1
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d005      	beq.n	80048be <_scanf_i+0x11a>
 80048b2:	001a      	movs	r2, r3
 80048b4:	9b03      	ldr	r3, [sp, #12]
 80048b6:	3a01      	subs	r2, #1
 80048b8:	3301      	adds	r3, #1
 80048ba:	9204      	str	r2, [sp, #16]
 80048bc:	60a3      	str	r3, [r4, #8]
 80048be:	6873      	ldr	r3, [r6, #4]
 80048c0:	3b01      	subs	r3, #1
 80048c2:	6073      	str	r3, [r6, #4]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	dd1d      	ble.n	8004904 <_scanf_i+0x160>
 80048c8:	6833      	ldr	r3, [r6, #0]
 80048ca:	3301      	adds	r3, #1
 80048cc:	6033      	str	r3, [r6, #0]
 80048ce:	68a3      	ldr	r3, [r4, #8]
 80048d0:	3b01      	subs	r3, #1
 80048d2:	60a3      	str	r3, [r4, #8]
 80048d4:	e7d8      	b.n	8004888 <_scanf_i+0xe4>
 80048d6:	2f02      	cmp	r7, #2
 80048d8:	d1a8      	bne.n	800482c <_scanf_i+0x88>
 80048da:	21c0      	movs	r1, #192	; 0xc0
 80048dc:	2380      	movs	r3, #128	; 0x80
 80048de:	6822      	ldr	r2, [r4, #0]
 80048e0:	00c9      	lsls	r1, r1, #3
 80048e2:	4011      	ands	r1, r2
 80048e4:	009b      	lsls	r3, r3, #2
 80048e6:	4299      	cmp	r1, r3
 80048e8:	d1bf      	bne.n	800486a <_scanf_i+0xc6>
 80048ea:	3bf1      	subs	r3, #241	; 0xf1
 80048ec:	3bff      	subs	r3, #255	; 0xff
 80048ee:	6063      	str	r3, [r4, #4]
 80048f0:	33f0      	adds	r3, #240	; 0xf0
 80048f2:	4313      	orrs	r3, r2
 80048f4:	e799      	b.n	800482a <_scanf_i+0x86>
 80048f6:	4b2c      	ldr	r3, [pc, #176]	; (80049a8 <_scanf_i+0x204>)
 80048f8:	4013      	ands	r3, r2
 80048fa:	6023      	str	r3, [r4, #0]
 80048fc:	780b      	ldrb	r3, [r1, #0]
 80048fe:	702b      	strb	r3, [r5, #0]
 8004900:	3501      	adds	r5, #1
 8004902:	e7dc      	b.n	80048be <_scanf_i+0x11a>
 8004904:	23c0      	movs	r3, #192	; 0xc0
 8004906:	005b      	lsls	r3, r3, #1
 8004908:	58e3      	ldr	r3, [r4, r3]
 800490a:	0031      	movs	r1, r6
 800490c:	9805      	ldr	r0, [sp, #20]
 800490e:	9303      	str	r3, [sp, #12]
 8004910:	4798      	blx	r3
 8004912:	2800      	cmp	r0, #0
 8004914:	d0db      	beq.n	80048ce <_scanf_i+0x12a>
 8004916:	6823      	ldr	r3, [r4, #0]
 8004918:	05db      	lsls	r3, r3, #23
 800491a:	d50e      	bpl.n	800493a <_scanf_i+0x196>
 800491c:	9b01      	ldr	r3, [sp, #4]
 800491e:	429d      	cmp	r5, r3
 8004920:	d907      	bls.n	8004932 <_scanf_i+0x18e>
 8004922:	23be      	movs	r3, #190	; 0xbe
 8004924:	3d01      	subs	r5, #1
 8004926:	005b      	lsls	r3, r3, #1
 8004928:	0032      	movs	r2, r6
 800492a:	7829      	ldrb	r1, [r5, #0]
 800492c:	58e3      	ldr	r3, [r4, r3]
 800492e:	9805      	ldr	r0, [sp, #20]
 8004930:	4798      	blx	r3
 8004932:	9b01      	ldr	r3, [sp, #4]
 8004934:	2001      	movs	r0, #1
 8004936:	429d      	cmp	r5, r3
 8004938:	d029      	beq.n	800498e <_scanf_i+0x1ea>
 800493a:	6821      	ldr	r1, [r4, #0]
 800493c:	2310      	movs	r3, #16
 800493e:	000a      	movs	r2, r1
 8004940:	401a      	ands	r2, r3
 8004942:	4219      	tst	r1, r3
 8004944:	d11c      	bne.n	8004980 <_scanf_i+0x1dc>
 8004946:	702a      	strb	r2, [r5, #0]
 8004948:	6863      	ldr	r3, [r4, #4]
 800494a:	9901      	ldr	r1, [sp, #4]
 800494c:	9805      	ldr	r0, [sp, #20]
 800494e:	9e06      	ldr	r6, [sp, #24]
 8004950:	47b0      	blx	r6
 8004952:	9b02      	ldr	r3, [sp, #8]
 8004954:	6821      	ldr	r1, [r4, #0]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	068a      	lsls	r2, r1, #26
 800495a:	d507      	bpl.n	800496c <_scanf_i+0x1c8>
 800495c:	1d1a      	adds	r2, r3, #4
 800495e:	9902      	ldr	r1, [sp, #8]
 8004960:	600a      	str	r2, [r1, #0]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	6018      	str	r0, [r3, #0]
 8004966:	e008      	b.n	800497a <_scanf_i+0x1d6>
 8004968:	2700      	movs	r7, #0
 800496a:	e7d4      	b.n	8004916 <_scanf_i+0x172>
 800496c:	1d1a      	adds	r2, r3, #4
 800496e:	07ce      	lsls	r6, r1, #31
 8004970:	d5f5      	bpl.n	800495e <_scanf_i+0x1ba>
 8004972:	9902      	ldr	r1, [sp, #8]
 8004974:	600a      	str	r2, [r1, #0]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	8018      	strh	r0, [r3, #0]
 800497a:	68e3      	ldr	r3, [r4, #12]
 800497c:	3301      	adds	r3, #1
 800497e:	60e3      	str	r3, [r4, #12]
 8004980:	2000      	movs	r0, #0
 8004982:	9b01      	ldr	r3, [sp, #4]
 8004984:	1aed      	subs	r5, r5, r3
 8004986:	6923      	ldr	r3, [r4, #16]
 8004988:	19ef      	adds	r7, r5, r7
 800498a:	19df      	adds	r7, r3, r7
 800498c:	6127      	str	r7, [r4, #16]
 800498e:	b00d      	add	sp, #52	; 0x34
 8004990:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004992:	46c0      	nop			; (mov r8, r8)
 8004994:	080051bc 	.word	0x080051bc
 8004998:	08004b41 	.word	0x08004b41
 800499c:	08004c61 	.word	0x08004c61
 80049a0:	fffffaff 	.word	0xfffffaff
 80049a4:	08005759 	.word	0x08005759
 80049a8:	fffff6ff 	.word	0xfffff6ff

080049ac <__sccl>:
 80049ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80049ae:	780b      	ldrb	r3, [r1, #0]
 80049b0:	0004      	movs	r4, r0
 80049b2:	2b5e      	cmp	r3, #94	; 0x5e
 80049b4:	d00c      	beq.n	80049d0 <__sccl+0x24>
 80049b6:	1c48      	adds	r0, r1, #1
 80049b8:	2100      	movs	r1, #0
 80049ba:	0022      	movs	r2, r4
 80049bc:	1c65      	adds	r5, r4, #1
 80049be:	35ff      	adds	r5, #255	; 0xff
 80049c0:	7011      	strb	r1, [r2, #0]
 80049c2:	3201      	adds	r2, #1
 80049c4:	42aa      	cmp	r2, r5
 80049c6:	d1fb      	bne.n	80049c0 <__sccl+0x14>
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d105      	bne.n	80049d8 <__sccl+0x2c>
 80049cc:	3801      	subs	r0, #1
 80049ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80049d0:	784b      	ldrb	r3, [r1, #1]
 80049d2:	1c88      	adds	r0, r1, #2
 80049d4:	2101      	movs	r1, #1
 80049d6:	e7f0      	b.n	80049ba <__sccl+0xe>
 80049d8:	2201      	movs	r2, #1
 80049da:	262d      	movs	r6, #45	; 0x2d
 80049dc:	4051      	eors	r1, r2
 80049de:	0002      	movs	r2, r0
 80049e0:	54e1      	strb	r1, [r4, r3]
 80049e2:	7815      	ldrb	r5, [r2, #0]
 80049e4:	1c50      	adds	r0, r2, #1
 80049e6:	2d2d      	cmp	r5, #45	; 0x2d
 80049e8:	d009      	beq.n	80049fe <__sccl+0x52>
 80049ea:	2d5d      	cmp	r5, #93	; 0x5d
 80049ec:	d0ef      	beq.n	80049ce <__sccl+0x22>
 80049ee:	2d00      	cmp	r5, #0
 80049f0:	d101      	bne.n	80049f6 <__sccl+0x4a>
 80049f2:	0010      	movs	r0, r2
 80049f4:	e7eb      	b.n	80049ce <__sccl+0x22>
 80049f6:	002b      	movs	r3, r5
 80049f8:	e7f1      	b.n	80049de <__sccl+0x32>
 80049fa:	0033      	movs	r3, r6
 80049fc:	e7ef      	b.n	80049de <__sccl+0x32>
 80049fe:	7855      	ldrb	r5, [r2, #1]
 8004a00:	2d5d      	cmp	r5, #93	; 0x5d
 8004a02:	d0fa      	beq.n	80049fa <__sccl+0x4e>
 8004a04:	42ab      	cmp	r3, r5
 8004a06:	dcf8      	bgt.n	80049fa <__sccl+0x4e>
 8004a08:	0018      	movs	r0, r3
 8004a0a:	3202      	adds	r2, #2
 8004a0c:	3001      	adds	r0, #1
 8004a0e:	5421      	strb	r1, [r4, r0]
 8004a10:	4285      	cmp	r5, r0
 8004a12:	dcfb      	bgt.n	8004a0c <__sccl+0x60>
 8004a14:	2000      	movs	r0, #0
 8004a16:	1c5f      	adds	r7, r3, #1
 8004a18:	42ab      	cmp	r3, r5
 8004a1a:	da01      	bge.n	8004a20 <__sccl+0x74>
 8004a1c:	1ae8      	subs	r0, r5, r3
 8004a1e:	3801      	subs	r0, #1
 8004a20:	183b      	adds	r3, r7, r0
 8004a22:	e7de      	b.n	80049e2 <__sccl+0x36>

08004a24 <_strtol_l.isra.0>:
 8004a24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a26:	b087      	sub	sp, #28
 8004a28:	001e      	movs	r6, r3
 8004a2a:	9005      	str	r0, [sp, #20]
 8004a2c:	9101      	str	r1, [sp, #4]
 8004a2e:	9202      	str	r2, [sp, #8]
 8004a30:	2b01      	cmp	r3, #1
 8004a32:	d045      	beq.n	8004ac0 <_strtol_l.isra.0+0x9c>
 8004a34:	0008      	movs	r0, r1
 8004a36:	2b24      	cmp	r3, #36	; 0x24
 8004a38:	d842      	bhi.n	8004ac0 <_strtol_l.isra.0+0x9c>
 8004a3a:	4b3f      	ldr	r3, [pc, #252]	; (8004b38 <_strtol_l.isra.0+0x114>)
 8004a3c:	2208      	movs	r2, #8
 8004a3e:	469c      	mov	ip, r3
 8004a40:	0003      	movs	r3, r0
 8004a42:	4661      	mov	r1, ip
 8004a44:	781c      	ldrb	r4, [r3, #0]
 8004a46:	1c45      	adds	r5, r0, #1
 8004a48:	5d09      	ldrb	r1, [r1, r4]
 8004a4a:	0028      	movs	r0, r5
 8004a4c:	000f      	movs	r7, r1
 8004a4e:	4017      	ands	r7, r2
 8004a50:	4211      	tst	r1, r2
 8004a52:	d1f5      	bne.n	8004a40 <_strtol_l.isra.0+0x1c>
 8004a54:	2c2d      	cmp	r4, #45	; 0x2d
 8004a56:	d13a      	bne.n	8004ace <_strtol_l.isra.0+0xaa>
 8004a58:	2701      	movs	r7, #1
 8004a5a:	782c      	ldrb	r4, [r5, #0]
 8004a5c:	1c9d      	adds	r5, r3, #2
 8004a5e:	2e00      	cmp	r6, #0
 8004a60:	d065      	beq.n	8004b2e <_strtol_l.isra.0+0x10a>
 8004a62:	2e10      	cmp	r6, #16
 8004a64:	d109      	bne.n	8004a7a <_strtol_l.isra.0+0x56>
 8004a66:	2c30      	cmp	r4, #48	; 0x30
 8004a68:	d107      	bne.n	8004a7a <_strtol_l.isra.0+0x56>
 8004a6a:	2220      	movs	r2, #32
 8004a6c:	782b      	ldrb	r3, [r5, #0]
 8004a6e:	4393      	bics	r3, r2
 8004a70:	2b58      	cmp	r3, #88	; 0x58
 8004a72:	d157      	bne.n	8004b24 <_strtol_l.isra.0+0x100>
 8004a74:	2610      	movs	r6, #16
 8004a76:	786c      	ldrb	r4, [r5, #1]
 8004a78:	3502      	adds	r5, #2
 8004a7a:	4b30      	ldr	r3, [pc, #192]	; (8004b3c <_strtol_l.isra.0+0x118>)
 8004a7c:	0031      	movs	r1, r6
 8004a7e:	18fb      	adds	r3, r7, r3
 8004a80:	0018      	movs	r0, r3
 8004a82:	9303      	str	r3, [sp, #12]
 8004a84:	f7fb fbe2 	bl	800024c <__aeabi_uidivmod>
 8004a88:	2300      	movs	r3, #0
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	4684      	mov	ip, r0
 8004a8e:	0018      	movs	r0, r3
 8004a90:	9104      	str	r1, [sp, #16]
 8004a92:	4252      	negs	r2, r2
 8004a94:	0021      	movs	r1, r4
 8004a96:	3930      	subs	r1, #48	; 0x30
 8004a98:	2909      	cmp	r1, #9
 8004a9a:	d81d      	bhi.n	8004ad8 <_strtol_l.isra.0+0xb4>
 8004a9c:	000c      	movs	r4, r1
 8004a9e:	42a6      	cmp	r6, r4
 8004aa0:	dd28      	ble.n	8004af4 <_strtol_l.isra.0+0xd0>
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	db24      	blt.n	8004af0 <_strtol_l.isra.0+0xcc>
 8004aa6:	0013      	movs	r3, r2
 8004aa8:	4584      	cmp	ip, r0
 8004aaa:	d306      	bcc.n	8004aba <_strtol_l.isra.0+0x96>
 8004aac:	d102      	bne.n	8004ab4 <_strtol_l.isra.0+0x90>
 8004aae:	9904      	ldr	r1, [sp, #16]
 8004ab0:	42a1      	cmp	r1, r4
 8004ab2:	db02      	blt.n	8004aba <_strtol_l.isra.0+0x96>
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	4370      	muls	r0, r6
 8004ab8:	1820      	adds	r0, r4, r0
 8004aba:	782c      	ldrb	r4, [r5, #0]
 8004abc:	3501      	adds	r5, #1
 8004abe:	e7e9      	b.n	8004a94 <_strtol_l.isra.0+0x70>
 8004ac0:	f000 f910 	bl	8004ce4 <__errno>
 8004ac4:	2316      	movs	r3, #22
 8004ac6:	6003      	str	r3, [r0, #0]
 8004ac8:	2000      	movs	r0, #0
 8004aca:	b007      	add	sp, #28
 8004acc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ace:	2c2b      	cmp	r4, #43	; 0x2b
 8004ad0:	d1c5      	bne.n	8004a5e <_strtol_l.isra.0+0x3a>
 8004ad2:	782c      	ldrb	r4, [r5, #0]
 8004ad4:	1c9d      	adds	r5, r3, #2
 8004ad6:	e7c2      	b.n	8004a5e <_strtol_l.isra.0+0x3a>
 8004ad8:	0021      	movs	r1, r4
 8004ada:	3941      	subs	r1, #65	; 0x41
 8004adc:	2919      	cmp	r1, #25
 8004ade:	d801      	bhi.n	8004ae4 <_strtol_l.isra.0+0xc0>
 8004ae0:	3c37      	subs	r4, #55	; 0x37
 8004ae2:	e7dc      	b.n	8004a9e <_strtol_l.isra.0+0x7a>
 8004ae4:	0021      	movs	r1, r4
 8004ae6:	3961      	subs	r1, #97	; 0x61
 8004ae8:	2919      	cmp	r1, #25
 8004aea:	d803      	bhi.n	8004af4 <_strtol_l.isra.0+0xd0>
 8004aec:	3c57      	subs	r4, #87	; 0x57
 8004aee:	e7d6      	b.n	8004a9e <_strtol_l.isra.0+0x7a>
 8004af0:	0013      	movs	r3, r2
 8004af2:	e7e2      	b.n	8004aba <_strtol_l.isra.0+0x96>
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	da09      	bge.n	8004b0c <_strtol_l.isra.0+0xe8>
 8004af8:	2322      	movs	r3, #34	; 0x22
 8004afa:	9a05      	ldr	r2, [sp, #20]
 8004afc:	9803      	ldr	r0, [sp, #12]
 8004afe:	6013      	str	r3, [r2, #0]
 8004b00:	9b02      	ldr	r3, [sp, #8]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d0e1      	beq.n	8004aca <_strtol_l.isra.0+0xa6>
 8004b06:	1e6b      	subs	r3, r5, #1
 8004b08:	9301      	str	r3, [sp, #4]
 8004b0a:	e007      	b.n	8004b1c <_strtol_l.isra.0+0xf8>
 8004b0c:	2f00      	cmp	r7, #0
 8004b0e:	d000      	beq.n	8004b12 <_strtol_l.isra.0+0xee>
 8004b10:	4240      	negs	r0, r0
 8004b12:	9a02      	ldr	r2, [sp, #8]
 8004b14:	2a00      	cmp	r2, #0
 8004b16:	d0d8      	beq.n	8004aca <_strtol_l.isra.0+0xa6>
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d1f4      	bne.n	8004b06 <_strtol_l.isra.0+0xe2>
 8004b1c:	9b02      	ldr	r3, [sp, #8]
 8004b1e:	9a01      	ldr	r2, [sp, #4]
 8004b20:	601a      	str	r2, [r3, #0]
 8004b22:	e7d2      	b.n	8004aca <_strtol_l.isra.0+0xa6>
 8004b24:	2430      	movs	r4, #48	; 0x30
 8004b26:	2e00      	cmp	r6, #0
 8004b28:	d1a7      	bne.n	8004a7a <_strtol_l.isra.0+0x56>
 8004b2a:	3608      	adds	r6, #8
 8004b2c:	e7a5      	b.n	8004a7a <_strtol_l.isra.0+0x56>
 8004b2e:	2c30      	cmp	r4, #48	; 0x30
 8004b30:	d09b      	beq.n	8004a6a <_strtol_l.isra.0+0x46>
 8004b32:	260a      	movs	r6, #10
 8004b34:	e7a1      	b.n	8004a7a <_strtol_l.isra.0+0x56>
 8004b36:	46c0      	nop			; (mov r8, r8)
 8004b38:	0800561d 	.word	0x0800561d
 8004b3c:	7fffffff 	.word	0x7fffffff

08004b40 <_strtol_r>:
 8004b40:	b510      	push	{r4, lr}
 8004b42:	f7ff ff6f 	bl	8004a24 <_strtol_l.isra.0>
 8004b46:	bd10      	pop	{r4, pc}

08004b48 <_strtoul_l.isra.0>:
 8004b48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b4a:	001e      	movs	r6, r3
 8004b4c:	4b43      	ldr	r3, [pc, #268]	; (8004c5c <_strtoul_l.isra.0+0x114>)
 8004b4e:	b087      	sub	sp, #28
 8004b50:	000f      	movs	r7, r1
 8004b52:	9101      	str	r1, [sp, #4]
 8004b54:	469c      	mov	ip, r3
 8004b56:	2108      	movs	r1, #8
 8004b58:	9005      	str	r0, [sp, #20]
 8004b5a:	9202      	str	r2, [sp, #8]
 8004b5c:	003b      	movs	r3, r7
 8004b5e:	4662      	mov	r2, ip
 8004b60:	781c      	ldrb	r4, [r3, #0]
 8004b62:	1c7d      	adds	r5, r7, #1
 8004b64:	5d10      	ldrb	r0, [r2, r4]
 8004b66:	002f      	movs	r7, r5
 8004b68:	0002      	movs	r2, r0
 8004b6a:	400a      	ands	r2, r1
 8004b6c:	4208      	tst	r0, r1
 8004b6e:	d1f5      	bne.n	8004b5c <_strtoul_l.isra.0+0x14>
 8004b70:	2c2d      	cmp	r4, #45	; 0x2d
 8004b72:	d13a      	bne.n	8004bea <_strtoul_l.isra.0+0xa2>
 8004b74:	2701      	movs	r7, #1
 8004b76:	782c      	ldrb	r4, [r5, #0]
 8004b78:	1c9d      	adds	r5, r3, #2
 8004b7a:	2e00      	cmp	r6, #0
 8004b7c:	d069      	beq.n	8004c52 <_strtoul_l.isra.0+0x10a>
 8004b7e:	2e10      	cmp	r6, #16
 8004b80:	d109      	bne.n	8004b96 <_strtoul_l.isra.0+0x4e>
 8004b82:	2c30      	cmp	r4, #48	; 0x30
 8004b84:	d107      	bne.n	8004b96 <_strtoul_l.isra.0+0x4e>
 8004b86:	2220      	movs	r2, #32
 8004b88:	782b      	ldrb	r3, [r5, #0]
 8004b8a:	4393      	bics	r3, r2
 8004b8c:	2b58      	cmp	r3, #88	; 0x58
 8004b8e:	d15b      	bne.n	8004c48 <_strtoul_l.isra.0+0x100>
 8004b90:	2610      	movs	r6, #16
 8004b92:	786c      	ldrb	r4, [r5, #1]
 8004b94:	3502      	adds	r5, #2
 8004b96:	2001      	movs	r0, #1
 8004b98:	0031      	movs	r1, r6
 8004b9a:	4240      	negs	r0, r0
 8004b9c:	f7fb fad0 	bl	8000140 <__udivsi3>
 8004ba0:	9003      	str	r0, [sp, #12]
 8004ba2:	2001      	movs	r0, #1
 8004ba4:	0031      	movs	r1, r6
 8004ba6:	4240      	negs	r0, r0
 8004ba8:	f7fb fb50 	bl	800024c <__aeabi_uidivmod>
 8004bac:	2300      	movs	r3, #0
 8004bae:	9104      	str	r1, [sp, #16]
 8004bb0:	2101      	movs	r1, #1
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	0018      	movs	r0, r3
 8004bb6:	468c      	mov	ip, r1
 8004bb8:	4252      	negs	r2, r2
 8004bba:	0021      	movs	r1, r4
 8004bbc:	3930      	subs	r1, #48	; 0x30
 8004bbe:	2909      	cmp	r1, #9
 8004bc0:	d81a      	bhi.n	8004bf8 <_strtoul_l.isra.0+0xb0>
 8004bc2:	000c      	movs	r4, r1
 8004bc4:	42a6      	cmp	r6, r4
 8004bc6:	dd25      	ble.n	8004c14 <_strtoul_l.isra.0+0xcc>
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	db21      	blt.n	8004c10 <_strtoul_l.isra.0+0xc8>
 8004bcc:	9903      	ldr	r1, [sp, #12]
 8004bce:	0013      	movs	r3, r2
 8004bd0:	4281      	cmp	r1, r0
 8004bd2:	d307      	bcc.n	8004be4 <_strtoul_l.isra.0+0x9c>
 8004bd4:	d103      	bne.n	8004bde <_strtoul_l.isra.0+0x96>
 8004bd6:	9904      	ldr	r1, [sp, #16]
 8004bd8:	0013      	movs	r3, r2
 8004bda:	42a1      	cmp	r1, r4
 8004bdc:	db02      	blt.n	8004be4 <_strtoul_l.isra.0+0x9c>
 8004bde:	4663      	mov	r3, ip
 8004be0:	4370      	muls	r0, r6
 8004be2:	1820      	adds	r0, r4, r0
 8004be4:	782c      	ldrb	r4, [r5, #0]
 8004be6:	3501      	adds	r5, #1
 8004be8:	e7e7      	b.n	8004bba <_strtoul_l.isra.0+0x72>
 8004bea:	2c2b      	cmp	r4, #43	; 0x2b
 8004bec:	d001      	beq.n	8004bf2 <_strtoul_l.isra.0+0xaa>
 8004bee:	0017      	movs	r7, r2
 8004bf0:	e7c3      	b.n	8004b7a <_strtoul_l.isra.0+0x32>
 8004bf2:	782c      	ldrb	r4, [r5, #0]
 8004bf4:	1c9d      	adds	r5, r3, #2
 8004bf6:	e7fa      	b.n	8004bee <_strtoul_l.isra.0+0xa6>
 8004bf8:	0021      	movs	r1, r4
 8004bfa:	3941      	subs	r1, #65	; 0x41
 8004bfc:	2919      	cmp	r1, #25
 8004bfe:	d801      	bhi.n	8004c04 <_strtoul_l.isra.0+0xbc>
 8004c00:	3c37      	subs	r4, #55	; 0x37
 8004c02:	e7df      	b.n	8004bc4 <_strtoul_l.isra.0+0x7c>
 8004c04:	0021      	movs	r1, r4
 8004c06:	3961      	subs	r1, #97	; 0x61
 8004c08:	2919      	cmp	r1, #25
 8004c0a:	d803      	bhi.n	8004c14 <_strtoul_l.isra.0+0xcc>
 8004c0c:	3c57      	subs	r4, #87	; 0x57
 8004c0e:	e7d9      	b.n	8004bc4 <_strtoul_l.isra.0+0x7c>
 8004c10:	0013      	movs	r3, r2
 8004c12:	e7e7      	b.n	8004be4 <_strtoul_l.isra.0+0x9c>
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	da09      	bge.n	8004c2c <_strtoul_l.isra.0+0xe4>
 8004c18:	2322      	movs	r3, #34	; 0x22
 8004c1a:	2001      	movs	r0, #1
 8004c1c:	9a05      	ldr	r2, [sp, #20]
 8004c1e:	4240      	negs	r0, r0
 8004c20:	6013      	str	r3, [r2, #0]
 8004c22:	9b02      	ldr	r3, [sp, #8]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d109      	bne.n	8004c3c <_strtoul_l.isra.0+0xf4>
 8004c28:	b007      	add	sp, #28
 8004c2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c2c:	2f00      	cmp	r7, #0
 8004c2e:	d000      	beq.n	8004c32 <_strtoul_l.isra.0+0xea>
 8004c30:	4240      	negs	r0, r0
 8004c32:	9a02      	ldr	r2, [sp, #8]
 8004c34:	2a00      	cmp	r2, #0
 8004c36:	d0f7      	beq.n	8004c28 <_strtoul_l.isra.0+0xe0>
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d001      	beq.n	8004c40 <_strtoul_l.isra.0+0xf8>
 8004c3c:	1e6b      	subs	r3, r5, #1
 8004c3e:	9301      	str	r3, [sp, #4]
 8004c40:	9b02      	ldr	r3, [sp, #8]
 8004c42:	9a01      	ldr	r2, [sp, #4]
 8004c44:	601a      	str	r2, [r3, #0]
 8004c46:	e7ef      	b.n	8004c28 <_strtoul_l.isra.0+0xe0>
 8004c48:	2430      	movs	r4, #48	; 0x30
 8004c4a:	2e00      	cmp	r6, #0
 8004c4c:	d1a3      	bne.n	8004b96 <_strtoul_l.isra.0+0x4e>
 8004c4e:	3608      	adds	r6, #8
 8004c50:	e7a1      	b.n	8004b96 <_strtoul_l.isra.0+0x4e>
 8004c52:	2c30      	cmp	r4, #48	; 0x30
 8004c54:	d097      	beq.n	8004b86 <_strtoul_l.isra.0+0x3e>
 8004c56:	260a      	movs	r6, #10
 8004c58:	e79d      	b.n	8004b96 <_strtoul_l.isra.0+0x4e>
 8004c5a:	46c0      	nop			; (mov r8, r8)
 8004c5c:	0800561d 	.word	0x0800561d

08004c60 <_strtoul_r>:
 8004c60:	b510      	push	{r4, lr}
 8004c62:	f7ff ff71 	bl	8004b48 <_strtoul_l.isra.0>
 8004c66:	bd10      	pop	{r4, pc}

08004c68 <__submore>:
 8004c68:	000b      	movs	r3, r1
 8004c6a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004c6c:	6b4d      	ldr	r5, [r1, #52]	; 0x34
 8004c6e:	3344      	adds	r3, #68	; 0x44
 8004c70:	000c      	movs	r4, r1
 8004c72:	429d      	cmp	r5, r3
 8004c74:	d11c      	bne.n	8004cb0 <__submore+0x48>
 8004c76:	2680      	movs	r6, #128	; 0x80
 8004c78:	00f6      	lsls	r6, r6, #3
 8004c7a:	0031      	movs	r1, r6
 8004c7c:	f7fe ff72 	bl	8003b64 <_malloc_r>
 8004c80:	2800      	cmp	r0, #0
 8004c82:	d102      	bne.n	8004c8a <__submore+0x22>
 8004c84:	2001      	movs	r0, #1
 8004c86:	4240      	negs	r0, r0
 8004c88:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004c8a:	0023      	movs	r3, r4
 8004c8c:	6360      	str	r0, [r4, #52]	; 0x34
 8004c8e:	63a6      	str	r6, [r4, #56]	; 0x38
 8004c90:	3346      	adds	r3, #70	; 0x46
 8004c92:	781a      	ldrb	r2, [r3, #0]
 8004c94:	4b10      	ldr	r3, [pc, #64]	; (8004cd8 <__submore+0x70>)
 8004c96:	54c2      	strb	r2, [r0, r3]
 8004c98:	0023      	movs	r3, r4
 8004c9a:	3345      	adds	r3, #69	; 0x45
 8004c9c:	781a      	ldrb	r2, [r3, #0]
 8004c9e:	4b0f      	ldr	r3, [pc, #60]	; (8004cdc <__submore+0x74>)
 8004ca0:	54c2      	strb	r2, [r0, r3]
 8004ca2:	782a      	ldrb	r2, [r5, #0]
 8004ca4:	4b0e      	ldr	r3, [pc, #56]	; (8004ce0 <__submore+0x78>)
 8004ca6:	54c2      	strb	r2, [r0, r3]
 8004ca8:	18c0      	adds	r0, r0, r3
 8004caa:	6020      	str	r0, [r4, #0]
 8004cac:	2000      	movs	r0, #0
 8004cae:	e7eb      	b.n	8004c88 <__submore+0x20>
 8004cb0:	6b8e      	ldr	r6, [r1, #56]	; 0x38
 8004cb2:	0029      	movs	r1, r5
 8004cb4:	0073      	lsls	r3, r6, #1
 8004cb6:	001a      	movs	r2, r3
 8004cb8:	9301      	str	r3, [sp, #4]
 8004cba:	f000 f839 	bl	8004d30 <_realloc_r>
 8004cbe:	1e05      	subs	r5, r0, #0
 8004cc0:	d0e0      	beq.n	8004c84 <__submore+0x1c>
 8004cc2:	1987      	adds	r7, r0, r6
 8004cc4:	0001      	movs	r1, r0
 8004cc6:	0032      	movs	r2, r6
 8004cc8:	0038      	movs	r0, r7
 8004cca:	f7fe feef 	bl	8003aac <memcpy>
 8004cce:	9b01      	ldr	r3, [sp, #4]
 8004cd0:	6027      	str	r7, [r4, #0]
 8004cd2:	6365      	str	r5, [r4, #52]	; 0x34
 8004cd4:	63a3      	str	r3, [r4, #56]	; 0x38
 8004cd6:	e7e9      	b.n	8004cac <__submore+0x44>
 8004cd8:	000003ff 	.word	0x000003ff
 8004cdc:	000003fe 	.word	0x000003fe
 8004ce0:	000003fd 	.word	0x000003fd

08004ce4 <__errno>:
 8004ce4:	4b01      	ldr	r3, [pc, #4]	; (8004cec <__errno+0x8>)
 8004ce6:	6818      	ldr	r0, [r3, #0]
 8004ce8:	4770      	bx	lr
 8004cea:	46c0      	nop			; (mov r8, r8)
 8004cec:	20000040 	.word	0x20000040

08004cf0 <__retarget_lock_acquire_recursive>:
 8004cf0:	4770      	bx	lr

08004cf2 <__retarget_lock_release_recursive>:
 8004cf2:	4770      	bx	lr

08004cf4 <memchr>:
 8004cf4:	b2c9      	uxtb	r1, r1
 8004cf6:	1882      	adds	r2, r0, r2
 8004cf8:	4290      	cmp	r0, r2
 8004cfa:	d101      	bne.n	8004d00 <memchr+0xc>
 8004cfc:	2000      	movs	r0, #0
 8004cfe:	4770      	bx	lr
 8004d00:	7803      	ldrb	r3, [r0, #0]
 8004d02:	428b      	cmp	r3, r1
 8004d04:	d0fb      	beq.n	8004cfe <memchr+0xa>
 8004d06:	3001      	adds	r0, #1
 8004d08:	e7f6      	b.n	8004cf8 <memchr+0x4>

08004d0a <memmove>:
 8004d0a:	b510      	push	{r4, lr}
 8004d0c:	4288      	cmp	r0, r1
 8004d0e:	d902      	bls.n	8004d16 <memmove+0xc>
 8004d10:	188b      	adds	r3, r1, r2
 8004d12:	4298      	cmp	r0, r3
 8004d14:	d303      	bcc.n	8004d1e <memmove+0x14>
 8004d16:	2300      	movs	r3, #0
 8004d18:	e007      	b.n	8004d2a <memmove+0x20>
 8004d1a:	5c8b      	ldrb	r3, [r1, r2]
 8004d1c:	5483      	strb	r3, [r0, r2]
 8004d1e:	3a01      	subs	r2, #1
 8004d20:	d2fb      	bcs.n	8004d1a <memmove+0x10>
 8004d22:	bd10      	pop	{r4, pc}
 8004d24:	5ccc      	ldrb	r4, [r1, r3]
 8004d26:	54c4      	strb	r4, [r0, r3]
 8004d28:	3301      	adds	r3, #1
 8004d2a:	429a      	cmp	r2, r3
 8004d2c:	d1fa      	bne.n	8004d24 <memmove+0x1a>
 8004d2e:	e7f8      	b.n	8004d22 <memmove+0x18>

08004d30 <_realloc_r>:
 8004d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d32:	0007      	movs	r7, r0
 8004d34:	000d      	movs	r5, r1
 8004d36:	0016      	movs	r6, r2
 8004d38:	2900      	cmp	r1, #0
 8004d3a:	d105      	bne.n	8004d48 <_realloc_r+0x18>
 8004d3c:	0011      	movs	r1, r2
 8004d3e:	f7fe ff11 	bl	8003b64 <_malloc_r>
 8004d42:	0004      	movs	r4, r0
 8004d44:	0020      	movs	r0, r4
 8004d46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d48:	2a00      	cmp	r2, #0
 8004d4a:	d103      	bne.n	8004d54 <_realloc_r+0x24>
 8004d4c:	f7fe fec0 	bl	8003ad0 <_free_r>
 8004d50:	0034      	movs	r4, r6
 8004d52:	e7f7      	b.n	8004d44 <_realloc_r+0x14>
 8004d54:	f000 f812 	bl	8004d7c <_malloc_usable_size_r>
 8004d58:	002c      	movs	r4, r5
 8004d5a:	42b0      	cmp	r0, r6
 8004d5c:	d2f2      	bcs.n	8004d44 <_realloc_r+0x14>
 8004d5e:	0031      	movs	r1, r6
 8004d60:	0038      	movs	r0, r7
 8004d62:	f7fe feff 	bl	8003b64 <_malloc_r>
 8004d66:	1e04      	subs	r4, r0, #0
 8004d68:	d0ec      	beq.n	8004d44 <_realloc_r+0x14>
 8004d6a:	0029      	movs	r1, r5
 8004d6c:	0032      	movs	r2, r6
 8004d6e:	f7fe fe9d 	bl	8003aac <memcpy>
 8004d72:	0029      	movs	r1, r5
 8004d74:	0038      	movs	r0, r7
 8004d76:	f7fe feab 	bl	8003ad0 <_free_r>
 8004d7a:	e7e3      	b.n	8004d44 <_realloc_r+0x14>

08004d7c <_malloc_usable_size_r>:
 8004d7c:	1f0b      	subs	r3, r1, #4
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	1f18      	subs	r0, r3, #4
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	da01      	bge.n	8004d8a <_malloc_usable_size_r+0xe>
 8004d86:	580b      	ldr	r3, [r1, r0]
 8004d88:	18c0      	adds	r0, r0, r3
 8004d8a:	4770      	bx	lr

08004d8c <_sbrk>:
 8004d8c:	4a05      	ldr	r2, [pc, #20]	; (8004da4 <_sbrk+0x18>)
 8004d8e:	0003      	movs	r3, r0
 8004d90:	6811      	ldr	r1, [r2, #0]
 8004d92:	2900      	cmp	r1, #0
 8004d94:	d101      	bne.n	8004d9a <_sbrk+0xe>
 8004d96:	4904      	ldr	r1, [pc, #16]	; (8004da8 <_sbrk+0x1c>)
 8004d98:	6011      	str	r1, [r2, #0]
 8004d9a:	6810      	ldr	r0, [r2, #0]
 8004d9c:	18c3      	adds	r3, r0, r3
 8004d9e:	6013      	str	r3, [r2, #0]
 8004da0:	4770      	bx	lr
 8004da2:	46c0      	nop			; (mov r8, r8)
 8004da4:	200005b4 	.word	0x200005b4
 8004da8:	200005d8 	.word	0x200005d8

08004dac <_init>:
 8004dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dae:	46c0      	nop			; (mov r8, r8)
 8004db0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004db2:	bc08      	pop	{r3}
 8004db4:	469e      	mov	lr, r3
 8004db6:	4770      	bx	lr

08004db8 <_fini>:
 8004db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dba:	46c0      	nop			; (mov r8, r8)
 8004dbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004dbe:	bc08      	pop	{r3}
 8004dc0:	469e      	mov	lr, r3
 8004dc2:	4770      	bx	lr
